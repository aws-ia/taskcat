"""
TaskCat Name Generator Module

This module provides functionality to generate random, human-readable names for
TaskCat resources such as CloudFormation stacks, S3 buckets, and other AWS resources.

The names are generated by combining random descriptive adjectives with animal names,
creating memorable and unique identifiers like "clever-dolphin" or "swift-eagle".

The word lists are stored in external text files to allow for easy customization
and expansion of the available vocabulary.
"""

from pathlib import Path
from random import choice

from taskcat.exceptions import TaskCatException


def generate_name():
    """
    Generate a random human-readable name for TaskCat resources.
    
    Creates a unique name by combining a random descriptor (adjective) with a
    random animal name, separated by a hyphen. This provides memorable names
    for AWS resources that are easier to identify than random strings.
    
    The function reads from two dictionary files:
    - descriptors.txt: Contains adjectives and descriptive words
    - animals.txt: Contains animal names
    
    Returns:
        str: A randomly generated name in the format "descriptor-animal"
             (e.g., "clever-dolphin", "swift-eagle")
    
    Raises:
        TaskCatException: If the required dictionary files cannot be found
                         or accessed
    
    Example:
        >>> name = generate_name()
        >>> print(name)
        "brave-tiger"
    """
    # Resolve the path to the configuration directory containing dictionary files
    path: Path = (Path(__file__).parent / "./cfg/").resolve()
    
    # Verify that both required dictionary files exist
    animals_file = path / "animals.txt"
    descriptors_file = path / "descriptors.txt"
    
    if not animals_file.is_file() or not descriptors_file.is_file():
        raise TaskCatException(
            f"Cannot find dictionary files. Expected files: "
            f"{animals_file} and {descriptors_file}"
        )
    
    # Read and parse the animals dictionary
    with open(str(animals_file), "r", encoding="utf-8") as _f:
        animals = _f.read().split("\n")
    
    # Read and parse the descriptors dictionary
    with open(str(descriptors_file), "r", encoding="utf-8") as _f:
        descriptors = _f.read().split("\n")
    
    # Generate and return a random combination
    # Note: Using random.choice is acceptable here as this is not for cryptographic purposes
    return choice(descriptors) + "-" + choice(animals)  # nosec: B311
