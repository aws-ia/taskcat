#!/usr/bin/env python
"""
AWS Local Zones Updater

This script automatically updates the list of AWS Availability Zones and Local Zones
used by TaskCat. It queries all AWS regions to discover available zones and generates
a Python module with the current zone mappings.

AWS Zone Types:
- availability-zone: Standard AZs within AWS regions
- local-zone: AWS Local Zones for ultra-low latency applications

The script uses zone IDs (e.g., 'use1-az1') rather than zone names (e.g., 'us-east-1a')
because zone names can vary between AWS accounts while zone IDs are consistent.

Usage:
    python update_local_zones.py

Output:
    Updates ./taskcat/local_zones.py with current zone mappings

Requirements:
    - AWS credentials configured (via AWS CLI, environment variables, or IAM role)
    - EC2 describe permissions for all regions
"""

import json

import boto3

# Initialize EC2 client for the default region to get list of all regions
print("Initializing AWS EC2 client...")
ec2 = boto3.client("ec2")

# Set to store unique zone IDs (using set to avoid duplicates)
local_zones = set()

# Get list of all AWS regions
print("Fetching list of AWS regions...")
regions = [x["RegionName"] for x in ec2.describe_regions()["Regions"]]
print(f"Found {len(regions)} regions to query")

# Query each region for its availability zones and local zones
for region_name in regions:
    print(f"Querying zones in region: {region_name}")
    
    try:
        # Create region-specific EC2 client
        regional_ec2 = boto3.client("ec2", region_name=region_name)
        
        # Get all availability zones (including local zones) for this region
        # AllAvailabilityZones=True includes local zones and wavelength zones
        zones_response = regional_ec2.describe_availability_zones(AllAvailabilityZones=True)
        
        # Process each zone in the region
        for zone in zones_response["AvailabilityZones"]:
            # Only include standard availability zones and local zones
            # Exclude wavelength zones and other specialized zone types
            if zone["ZoneType"] in ["availability-zone", "local-zone"]:
                # Use ZoneId (e.g., 'use1-az1') instead of ZoneName (e.g., 'us-east-1a')
                # ZoneId is consistent across AWS accounts while ZoneName can vary
                local_zones.add(zone["ZoneId"])
                
    except Exception as e:
        print(f"Warning: Failed to query region {region_name}: {e}")
        # Continue with other regions even if one fails
        continue

print(f"Discovered {len(local_zones)} unique zones across all regions")

# Write the zone mappings to the Python module file
print("Writing zone mappings to local_zones.py...")
with open("./taskcat/local_zones.py", "w") as fh:
    # Write file header comment
    fh.write('"""\n')
    fh.write("AWS Availability Zones and Local Zones Mappings\n\n")
    fh.write("This file is automatically generated by update_local_zones.py\n")
    fh.write("Do not edit manually - run the update script instead.\n\n")
    fh.write("Contains zone IDs (e.g., 'use1-az1') for all availability zones\n")
    fh.write("and local zones across all AWS regions.\n")
    fh.write('"""\n\n')
    
    # Write the zones list, sorted for consistency
    fh.write("# List of all AWS availability zone and local zone IDs\n")
    fh.write(f"ZONES = {json.dumps(sorted(local_zones), indent=4)}\n\n")

print("Successfully updated local zones mappings!")
