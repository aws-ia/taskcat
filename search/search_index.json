{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"taskcat Documentationtaskcat","text":"<p>Test your AWS CloudFormation templates across multiple regions with confidence. taskcat automates the deployment and validation of your infrastructure as code, ensuring your templates work reliably everywhere.</p> Get Started Install Now"},{"location":"#what-is-taskcat","title":"What is taskcat?","text":"<p>taskcat is a powerful testing framework for AWS CloudFormation templates that helps you validate your infrastructure as code across multiple AWS regions simultaneously. Built by AWS Solutions Architects, taskcat ensures your templates are robust, reliable, and ready for production deployment.</p> Multi-Region Testing <p>Deploy and test your CloudFormation templates across multiple AWS regions simultaneously to ensure global compatibility and resilience.</p> Automated Validation <p>Comprehensive automated testing with detailed pass/fail reporting, stack validation, and resource verification.</p> Dynamic Values <p>Runtime-evaluated parameters that pull values from your AWS environment, generate random data, and provide context-aware configurations.</p> Rich Reporting <p>Generate detailed HTML reports with deployment status, logs, and visual dashboards to track your testing results.</p> CI/CD Integration <p>Seamlessly integrate with your continuous integration pipelines using GitHub Actions, Jenkins, or AWS CodePipeline.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#quick-setup","title":"\ud83d\ude80 Quick Setup","text":"<p>Get started in minutes with simple configuration files and intuitive CLI commands.</p>"},{"location":"#global-testing","title":"\ud83c\udf0d Global Testing","text":"<p>Test across all AWS regions or specify custom region sets for your deployment requirements.</p>"},{"location":"#dynamic-values","title":"\u26a1 Dynamic Values","text":"<p>Runtime-evaluated parameters that can pull values from your AWS environment, generate random data, and provide context-aware configurations for flexible testing.</p>"},{"location":"#comprehensive-reports","title":"\ud83d\udcca Comprehensive Reports","text":"<p>Generate detailed reports with stack outputs, resource details, and deployment timelines.</p>"},{"location":"#security-first","title":"\ud83d\udd12 Security First","text":"<p>Built-in security best practices with IAM role management and secure parameter handling.</p>"},{"location":"#quick-start-example","title":"Quick Start Example","text":"Basic taskcat Configuration  === \"taskcat.yml\"      <pre><code>project:\n  name: my-cloudformation-project\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\ntests:\n  default:\n    template: templates/main.yaml\n    parameters:\n      InstanceType: t3.micro\n      AvailabilityZones: $[taskcat_genaz_2]\n      DatabasePassword: $[taskcat_genpass_16S]\n      S3Bucket: $[taskcat_autobucket]\n</code></pre>  === \"Advanced Configuration\"      <pre><code>project:\n  name: enterprise-app\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\nglobal:\n  parameters:\n    ProjectName: $[taskcat_project_name]\n    Environment: production\n\ntests:\n  vpc-infrastructure:\n    template: templates/vpc.yaml\n    parameters:\n      VpcName: $[taskcat_project_name]-vpc-$[taskcat_current_region]\n      AvailabilityZones: $[taskcat_genaz_3]\n\n  database-tier:\n    template: templates/rds.yaml\n    parameters:\n      DBInstanceId: $[taskcat_project_name]-db-$[taskcat_genuuid]\n      MasterPassword: $[taskcat_secretsmanager_prod/db/password]\n      DBSubnetGroup: $[taskcat_getval_VpcName]-db-subnets\n\n  application-tier:\n    template: templates/app.yaml\n    parameters:\n      AppName: $[taskcat_project_name]-app\n      S3Bucket: $[taskcat_autobucket]\n      ApiKey: $[taskcat_ssm_/app/api/key]\n      CurrentRegion: $[taskcat_current_region]\n</code></pre>  === \"CLI Commands\"      <pre><code># Install taskcat\npip install taskcat\n\n# Initialize a new project\ntaskcat init\n\n# Test your templates\ntaskcat test run\n\n# Generate reports\ntaskcat test run --output-directory ./reports\n</code></pre>  === \"GitHub Actions\"      <pre><code>name: taskcat Tests\non: [push, pull_request]\n\njobs:\n  taskcat:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Install taskcat\n        run: pip install taskcat\n      - name: Run Tests\n        run: taskcat test run\n</code></pre>"},{"location":"#why-choose-taskcat","title":"Why Choose taskcat?","text":"\ud83c\udfc6 AWS Solutions Architecture Team Approved taskcat is developed and maintained by the AWS Solutions Architecture team and is used internally by AWS for testing CloudFormation templates in AWS Quick Starts and Solutions."},{"location":"#proven-at-scale","title":"Proven at Scale","text":"<ul> <li>Used by AWS internally for testing hundreds of CloudFormation templates</li> <li>Powers the AWS Quick Start program with over 150+ tested solutions</li> <li>Trusted by enterprises worldwide for production deployments</li> </ul>"},{"location":"#developer-friendly","title":"Developer Friendly","text":"<ul> <li>Simple YAML configuration</li> <li>Intuitive command-line interface</li> <li>Rich documentation and examples</li> <li>Active community support</li> </ul>"},{"location":"#enterprise-ready","title":"Enterprise Ready","text":"<ul> <li>Multi-account testing support</li> <li>Advanced parameter management</li> <li>Comprehensive logging and reporting</li> <li>Integration with AWS services</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"\ud83d\udcda Documentation <p>Comprehensive guides, tutorials, and API reference to help you get the most out of taskcat.</p> Browse Docs \ud83d\udcac Community <p>Join our community discussions, ask questions, and share your taskcat experiences.</p> Join Community \ud83d\udc1b Issues <p>Report bugs, request features, or contribute to the taskcat project on GitHub.</p> Report Issue"},{"location":"#whats-new","title":"What's New","text":"\ud83c\udf89 Latest Updates Check out the latest features including enhanced pseudo-parameters, improved AWS service integrations, and better CI/CD support."},{"location":"#recent-improvements","title":"Recent Improvements","text":"<ul> <li>Enhanced Pseudo-Parameters: New AWS service integrations and improved parameter handling</li> <li>Better Error Reporting: More detailed error messages and troubleshooting guidance  </li> <li>Performance Optimizations: Faster template processing and parallel execution</li> <li>Extended AWS Service Support: Support for latest AWS services and regions</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Ready to start testing your CloudFormation templates? Here's your path forward:</p> <ol> <li>Install taskcat - Get taskcat up and running in minutes</li> <li>Quick Start Guide - Run your first test</li> <li>Configuration Guide - Learn about advanced configuration options</li> <li>Dynamic Values - Master runtime-evaluated parameters and AWS environment integration</li> <li>Examples - Explore real-world usage scenarios</li> </ol> \ud83d\udca1 Pro Tip Start with the Quick Start guide to run your first test, then explore Dynamic Values to make your templates flexible with runtime-evaluated parameters that pull from your AWS environment.  <p>taskcat - Making CloudFormation testing simple, reliable, and scalable.</p> <p>Built with \u2764\ufe0f by the AWS Solutions Architecture Team</p>"},{"location":"api/","title":"API Reference","text":"<p>Complete reference for taskcat's Python API and command-line interface.</p>"},{"location":"api/#command-line-interface","title":"Command Line Interface","text":""},{"location":"api/#main-commands","title":"Main Commands","text":""},{"location":"api/#taskcat-test-run","title":"<code>taskcat test run</code>","text":"<p>Execute taskcat tests with specified configuration.</p> <pre><code>taskcat test run [OPTIONS]\n</code></pre> <p>Options: - <code>--config-file, -c</code> - Path to configuration file (default: <code>.taskcat.yml</code>) - <code>--regions</code> - Comma-separated list of regions to test - <code>--tests</code> - Comma-separated list of tests to run - <code>--no-delete</code> - Skip resource cleanup (for debugging) - <code>--project-root</code> - Path to project root directory - <code>--output-directory</code> - Directory for test outputs</p> <p>Examples: <pre><code># Run all tests\ntaskcat test run\n\n# Run specific test\ntaskcat test run --tests vpc-test\n\n# Run in specific regions\ntaskcat test run --regions us-east-1,us-west-2\n\n# Keep resources for debugging\ntaskcat test run --no-delete\n</code></pre></p>"},{"location":"api/#taskcat-lint","title":"<code>taskcat lint</code>","text":"<p>Validate taskcat configuration and CloudFormation templates.</p> <pre><code>taskcat lint [OPTIONS]\n</code></pre> <p>Options: - <code>--config-file, -c</code> - Path to configuration file - <code>--templates</code> - Validate CloudFormation templates only - <code>--strict</code> - Enable strict validation mode</p> <p>Examples: <pre><code># Lint configuration\ntaskcat lint\n\n# Lint specific file\ntaskcat lint -c custom.yml\n\n# Validate templates only\ntaskcat lint --templates\n</code></pre></p>"},{"location":"api/#taskcat-test-list","title":"<code>taskcat test list</code>","text":"<p>List available tests in configuration.</p> <pre><code>taskcat test list [OPTIONS]\n</code></pre> <p>Options: - <code>--config-file, -c</code> - Path to configuration file</p>"},{"location":"api/#taskcat-upload","title":"<code>taskcat upload</code>","text":"<p>Upload templates and artifacts to S3.</p> <pre><code>taskcat upload [OPTIONS]\n</code></pre> <p>Options: - <code>--config-file, -c</code> - Path to configuration file - <code>--bucket</code> - S3 bucket name - <code>--key-prefix</code> - S3 key prefix</p>"},{"location":"api/#global-options","title":"Global Options","text":"<p>Available for all commands:</p> <ul> <li><code>--help, -h</code> - Show help message</li> <li><code>--version</code> - Show version information</li> <li><code>--debug</code> - Enable debug logging</li> <li><code>--quiet, -q</code> - Suppress output</li> </ul>"},{"location":"api/#python-api","title":"Python API","text":""},{"location":"api/#core-classes","title":"Core Classes","text":""},{"location":"api/#taskcat","title":"<code>TaskCat</code>","text":"<p>Main class for programmatic access to taskcat functionality.</p> <pre><code>from taskcat import TaskCat\n\n# Initialize TaskCat\ntc = TaskCat(\n    config_file='.taskcat.yml',\n    project_root='/path/to/project',\n    regions=['us-east-1', 'us-west-2']\n)\n\n# Run tests\nresults = tc.test()\n\n# Get test results\nfor test_name, result in results.items():\n    print(f\"Test {test_name}: {result.status}\")\n</code></pre>"},{"location":"api/#config","title":"<code>Config</code>","text":"<p>Configuration management class.</p> <pre><code>from taskcat.config import Config\n\n# Load configuration\nconfig = Config.create(\n    project_root='/path/to/project',\n    config_file='.taskcat.yml'\n)\n\n# Access configuration\nprint(config.project.name)\nprint(config.tests.keys())\n</code></pre>"},{"location":"api/#testresult","title":"<code>TestResult</code>","text":"<p>Test execution result container.</p> <pre><code># Access test results\nresult = tc.test()['test-name']\n\nprint(result.status)        # PASS, FAIL, or ERROR\nprint(result.region)        # AWS region\nprint(result.stack_name)    # CloudFormation stack name\nprint(result.outputs)       # Stack outputs\nprint(result.events)        # CloudFormation events\n</code></pre>"},{"location":"api/#configuration-objects","title":"Configuration Objects","text":""},{"location":"api/#projectconfig","title":"<code>ProjectConfig</code>","text":"<p>Project-level configuration.</p> <pre><code>project = config.project\n\nprint(project.name)                    # Project name\nprint(project.regions)                 # Default regions\nprint(project.parameters)              # Default parameters\nprint(project.s3_bucket)              # S3 bucket\nprint(project.lambda_source_path)      # Lambda source path\n</code></pre>"},{"location":"api/#testconfig","title":"<code>TestConfig</code>","text":"<p>Individual test configuration.</p> <pre><code>test = config.tests['test-name']\n\nprint(test.template)        # Template path\nprint(test.parameters)      # Test parameters\nprint(test.regions)         # Test regions\nprint(test.auth)           # Authentication settings\n</code></pre>"},{"location":"api/#utility-functions","title":"Utility Functions","text":""},{"location":"api/#parameter-generation","title":"Parameter Generation","text":"<pre><code>from taskcat._template_params import ParamGen\n\n# Generate parameters\nparam_gen = ParamGen(\n    project_root='/path/to/project',\n    param_dict={'Password': '$[taskcat_genpass_16S]'},\n    bucket_name='my-bucket',\n    region='us-east-1',\n    boto_client=boto3.client('cloudformation'),\n    project_name='my-project',\n    test_name='my-test'\n)\n\n# Access generated parameters\ngenerated_params = param_gen.results\nprint(generated_params['Password'])  # Generated password\n</code></pre>"},{"location":"api/#template-processing","title":"Template Processing","text":"<pre><code>from taskcat._cfn_lint import CfnLint\n\n# Validate CloudFormation template\nlinter = CfnLint()\nresults = linter.lint_file('template.yaml')\n\nfor result in results:\n    print(f\"{result.level}: {result.message}\")\n</code></pre>"},{"location":"api/#exception-handling","title":"Exception Handling","text":""},{"location":"api/#taskcatexception","title":"<code>TaskCatException</code>","text":"<p>Base exception for taskcat errors.</p> <pre><code>from taskcat.exceptions import TaskCatException\n\ntry:\n    tc = TaskCat(config_file='invalid.yml')\n    results = tc.test()\nexcept TaskCatException as e:\n    print(f\"TaskCat error: {e}\")\n</code></pre>"},{"location":"api/#common-exceptions","title":"Common Exceptions","text":"<ul> <li><code>TaskCatException</code> - Base taskcat exception</li> <li><code>ConfigError</code> - Configuration validation errors</li> <li><code>TemplateError</code> - CloudFormation template errors</li> <li><code>RegionError</code> - AWS region-related errors</li> </ul>"},{"location":"api/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/#custom-hooks","title":"Custom Hooks","text":"<pre><code>from taskcat import TaskCat\n\nclass CustomTaskCat(TaskCat):\n    def pre_test_hook(self, test_name, region):\n        \"\"\"Execute before each test\"\"\"\n        print(f\"Starting test {test_name} in {region}\")\n\n    def post_test_hook(self, test_name, region, result):\n        \"\"\"Execute after each test\"\"\"\n        print(f\"Test {test_name} completed: {result.status}\")\n\n# Use custom class\ntc = CustomTaskCat(config_file='.taskcat.yml')\nresults = tc.test()\n</code></pre>"},{"location":"api/#parallel-execution","title":"Parallel Execution","text":"<pre><code>import concurrent.futures\nfrom taskcat import TaskCat\n\ndef run_test(test_config):\n    tc = TaskCat(config_file=test_config)\n    return tc.test()\n\n# Run tests in parallel\nconfigs = ['test1.yml', 'test2.yml', 'test3.yml']\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    futures = [executor.submit(run_test, config) for config in configs]\n    results = [future.result() for future in futures]\n</code></pre>"},{"location":"api/#custom-parameter-generation","title":"Custom Parameter Generation","text":"<pre><code>from taskcat._template_params import ParamGen\n\nclass CustomParamGen(ParamGen):\n    def custom_function(self):\n        \"\"\"Custom parameter generation function\"\"\"\n        return \"custom-value\"\n\n    def transform_parameter(self):\n        # Call parent method\n        super().transform_parameter()\n\n        # Add custom transformations\n        if '$[custom_function]' in self.param_value:\n            self.param_value = self.param_value.replace(\n                '$[custom_function]', \n                self.custom_function()\n            )\n</code></pre>"},{"location":"api/#integration-examples","title":"Integration Examples","text":""},{"location":"api/#cicd-integration","title":"CI/CD Integration","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"CI/CD integration script\"\"\"\n\nimport sys\nfrom taskcat import TaskCat\nfrom taskcat.exceptions import TaskCatException\n\ndef main():\n    try:\n        # Initialize TaskCat\n        tc = TaskCat(\n            config_file='.taskcat.yml',\n            regions=['us-east-1', 'us-west-2']\n        )\n\n        # Run tests\n        results = tc.test()\n\n        # Check results\n        failed_tests = [\n            name for name, result in results.items() \n            if result.status != 'PASS'\n        ]\n\n        if failed_tests:\n            print(f\"Failed tests: {failed_tests}\")\n            sys.exit(1)\n        else:\n            print(\"All tests passed!\")\n            sys.exit(0)\n\n    except TaskCatException as e:\n        print(f\"TaskCat error: {e}\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()\n</code></pre>"},{"location":"api/#custom-reporting","title":"Custom Reporting","text":"<pre><code>import json\nfrom taskcat import TaskCat\n\ndef generate_custom_report(results):\n    \"\"\"Generate custom test report\"\"\"\n    report = {\n        'summary': {\n            'total_tests': len(results),\n            'passed': sum(1 for r in results.values() if r.status == 'PASS'),\n            'failed': sum(1 for r in results.values() if r.status == 'FAIL'),\n        },\n        'details': []\n    }\n\n    for test_name, result in results.items():\n        report['details'].append({\n            'test_name': test_name,\n            'status': result.status,\n            'region': result.region,\n            'stack_name': result.stack_name,\n            'duration': result.duration,\n            'outputs': result.outputs\n        })\n\n    return report\n\n# Run tests and generate report\ntc = TaskCat(config_file='.taskcat.yml')\nresults = tc.test()\nreport = generate_custom_report(results)\n\n# Save report\nwith open('test-report.json', 'w') as f:\n    json.dump(report, f, indent=2)\n</code></pre>"},{"location":"api/#environment-variables","title":"Environment Variables","text":"<p>TaskCat recognizes these environment variables:</p> <ul> <li><code>AWS_PROFILE</code> - AWS profile to use</li> <li><code>AWS_REGION</code> - Default AWS region</li> <li><code>TASKCAT_CONFIG_FILE</code> - Default configuration file path</li> <li><code>TASKCAT_PROJECT_ROOT</code> - Default project root directory</li> <li><code>TASKCAT_DEBUG</code> - Enable debug logging (set to <code>1</code>)</li> </ul>"},{"location":"api/#return-codes","title":"Return Codes","text":"<p>Command-line return codes:</p> <ul> <li><code>0</code> - Success</li> <li><code>1</code> - General error</li> <li><code>2</code> - Configuration error</li> <li><code>3</code> - Template validation error</li> <li><code>4</code> - Test execution error</li> </ul>"},{"location":"api/#version-information","title":"Version Information","text":"<pre><code># Get version\ntaskcat --version\n\n# Get detailed version info\ntaskcat --version --verbose\n</code></pre> <pre><code># Get version programmatically\nimport taskcat\nprint(taskcat.__version__)\n</code></pre> <p>For more detailed API documentation, see the inline docstrings and type hints in the source code.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Learn how to configure taskcat for your specific testing needs with comprehensive configuration options.</p>"},{"location":"configuration/#configuration-file-structure","title":"Configuration File Structure","text":"<p>taskcat uses YAML configuration files (<code>.taskcat.yml</code>) with this structure:</p> <pre><code>general:\n  # Global settings applied to all tests\n\nproject:\n  # Project-specific settings\n\ntests:\n  # Individual test definitions\n</code></pre>"},{"location":"configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"configuration/#minimal-configuration","title":"Minimal Configuration","text":"<pre><code>project:\n  name: my-project\n  regions:\n    - us-east-1\n\ntests:\n  basic:\n    template: template.yaml\n</code></pre>"},{"location":"configuration/#standard-configuration","title":"Standard Configuration","text":"<pre><code>project:\n  name: my-cloudformation-project\n  regions:\n    - us-east-1\n    - us-west-2\n  parameters:\n    Environment: test\n    Owner: development-team\n\ntests:\n  vpc-test:\n    template: templates/vpc.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n\n  app-test:\n    template: templates/app.yaml\n    parameters:\n      InstanceType: t3.micro\n      DatabasePassword: $[taskcat_genpass_16S]\n</code></pre>"},{"location":"configuration/#global-settings","title":"Global Settings","text":"<p>Configure settings that apply to all tests:</p> <pre><code>general:\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n  parameters:\n    Environment: production\n    ProjectName: my-project\n  tags:\n    CostCenter: \"1001\"\n    Department: Engineering\n  s3_regional_buckets: true\n</code></pre>"},{"location":"configuration/#global-properties","title":"Global Properties","text":"Property Description Example <code>regions</code> Default regions for all tests <code>[\"us-east-1\", \"us-west-2\"]</code> <code>parameters</code> Global CloudFormation parameters <code>{\"Environment\": \"prod\"}</code> <code>tags</code> CloudFormation stack tags <code>{\"Project\": \"taskcat\"}</code> <code>s3_bucket</code> Custom S3 bucket name <code>\"my-taskcat-bucket\"</code> <code>s3_regional_buckets</code> Enable regional buckets <code>true</code> <code>auth</code> AWS authentication profiles <code>{\"default\": \"my-profile\"}</code>"},{"location":"configuration/#project-settings","title":"Project Settings","text":"<p>Configure project-specific options:</p> <pre><code>project:\n  name: enterprise-application\n  owner: platform-team@company.com\n  regions:\n    - us-east-1\n    - us-west-2\n  parameters:\n    ProjectName: enterprise-app\n    Environment: production\n  lambda_source_path: functions/source\n  lambda_zip_path: functions/packages\n  package_lambda: true\n  shorten_stack_name: true\n  s3_object_acl: bucket-owner-read\n</code></pre>"},{"location":"configuration/#project-properties","title":"Project Properties","text":"Property Description Default <code>name</code> Project identifier Required <code>owner</code> Project owner email - <code>template</code> Default template path - <code>lambda_source_path</code> Lambda source directory <code>lambda_functions/source</code> <code>lambda_zip_path</code> Lambda package directory <code>lambda_functions/packages</code> <code>package_lambda</code> Enable Lambda packaging <code>true</code> <code>build_submodules</code> Build submodule Lambdas <code>true</code> <code>shorten_stack_name</code> Use short stack names <code>false</code> <code>role_name</code> CloudFormation service role -"},{"location":"configuration/#test-configuration","title":"Test Configuration","text":"<p>Define individual tests with specific settings:</p> <pre><code>tests:\n  # Basic test\n  simple-test:\n    template: templates/simple.yaml\n\n  # Test with parameters\n  parameterized-test:\n    template: templates/app.yaml\n    parameters:\n      InstanceType: t3.medium\n      DatabasePassword: $[taskcat_genpass_20S]\n\n  # Test with specific regions\n  regional-test:\n    template: templates/global.yaml\n    regions:\n      - us-east-1\n      - eu-west-1\n      - ap-southeast-1\n\n  # Test with authentication\n  authenticated-test:\n    template: templates/secure.yaml\n    auth:\n      us-east-1: production-profile\n      eu-west-1: europe-profile\n</code></pre>"},{"location":"configuration/#test-properties","title":"Test Properties","text":"Property Description Required <code>template</code> CloudFormation template path \u2705 <code>parameters</code> Test-specific parameters - <code>regions</code> Test-specific regions - <code>auth</code> Authentication overrides - <code>artifact_regions</code> Artifact copy regions -"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/#multi-environment-setup","title":"Multi-Environment Setup","text":"<pre><code>project:\n  name: multi-env-app\n\ntests:\n  development:\n    template: templates/app.yaml\n    parameters:\n      Environment: dev\n      InstanceType: t3.micro\n      DatabaseInstanceClass: db.t3.micro\n    regions:\n      - us-east-1\n\n  staging:\n    template: templates/app.yaml\n    parameters:\n      Environment: staging\n      InstanceType: t3.small\n      DatabaseInstanceClass: db.t3.small\n    regions:\n      - us-east-1\n      - us-west-2\n\n  production:\n    template: templates/app.yaml\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n      DatabaseInstanceClass: db.r5.large\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n</code></pre>"},{"location":"configuration/#cross-account-testing","title":"Cross-Account Testing","text":"<pre><code>project:\n  name: cross-account-app\n\ntests:\n  development-account:\n    template: templates/app.yaml\n    auth:\n      default: dev-account-profile\n    parameters:\n      Environment: dev\n\n  production-account:\n    template: templates/app.yaml\n    auth:\n      default: prod-account-profile\n    parameters:\n      Environment: prod\n</code></pre>"},{"location":"configuration/#lambda-function-testing","title":"Lambda Function Testing","text":"<pre><code>project:\n  name: serverless-app\n  lambda_source_path: src/functions\n  lambda_zip_path: dist/functions\n  package_lambda: true\n  build_submodules: true\n\ntests:\n  lambda-test:\n    template: templates/serverless.yaml\n    parameters:\n      Runtime: python3.9\n      MemorySize: 256\n      Timeout: 30\n</code></pre>"},{"location":"configuration/#authentication-configuration","title":"Authentication Configuration","text":"<p>Configure AWS authentication for different regions or accounts:</p>"},{"location":"configuration/#profile-based-authentication","title":"Profile-Based Authentication","text":"<pre><code>general:\n  auth:\n    default: my-default-profile\n    us-gov-east-1: govcloud-profile\n    cn-north-1: china-profile\n\nproject:\n  auth:\n    us-east-1: production-profile\n    eu-west-1: europe-profile\n</code></pre>"},{"location":"configuration/#test-specific-authentication","title":"Test-Specific Authentication","text":"<pre><code>tests:\n  secure-test:\n    template: templates/secure.yaml\n    auth:\n      us-east-1: security-profile\n      us-west-2: security-profile\n</code></pre>"},{"location":"configuration/#parameter-configuration","title":"Parameter Configuration","text":""},{"location":"configuration/#static-parameters","title":"Static Parameters","text":"<pre><code>tests:\n  static-test:\n    template: templates/app.yaml\n    parameters:\n      InstanceType: t3.medium\n      Environment: production\n      EnableLogging: true\n      Port: 8080\n</code></pre>"},{"location":"configuration/#dynamic-parameters","title":"Dynamic Parameters","text":"<pre><code>tests:\n  dynamic-test:\n    template: templates/app.yaml\n    parameters:\n      # Generate unique values\n      S3Bucket: $[taskcat_autobucket]\n      DatabasePassword: $[taskcat_genpass_16S]\n      UniqueId: $[taskcat_genuuid]\n\n      # Environment-aware values\n      CurrentRegion: $[taskcat_current_region]\n      ProjectName: $[taskcat_project_name]\n      TestName: $[taskcat_test_name]\n\n      # AWS resource values\n      AvailabilityZones: $[taskcat_genaz_2]\n      KeyPair: $[taskcat_getkeypair]\n\n      # External values\n      DatabaseHost: $[taskcat_ssm_/app/database/host]\n      ApiKey: $[taskcat_secretsmanager_prod/api/key]\n</code></pre>"},{"location":"configuration/#s3-configuration","title":"S3 Configuration","text":""},{"location":"configuration/#bucket-management","title":"Bucket Management","text":"<pre><code>project:\n  # Use custom bucket\n  s3_bucket: my-custom-taskcat-bucket\n\n  # Enable regional buckets\n  s3_regional_buckets: true\n\n  # Set object ACL\n  s3_object_acl: bucket-owner-read\n\n  # Enable legacy signature version\n  s3_enable_sig_v2: false\n</code></pre>"},{"location":"configuration/#artifact-regions","title":"Artifact Regions","text":"<pre><code>general:\n  artifact_regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\ntests:\n  global-test:\n    template: templates/global.yaml\n    artifact_regions:\n      - us-east-1\n      - ap-southeast-1\n</code></pre>"},{"location":"configuration/#hooks-configuration","title":"Hooks Configuration","text":"<p>Execute custom scripts before or after tests:</p> <pre><code>general:\n  prehooks:\n    - type: script\n      config:\n        command: ./scripts/setup.sh\n\n  posthooks:\n    - type: script\n      config:\n        command: ./scripts/cleanup.sh\n\ntests:\n  custom-test:\n    template: templates/app.yaml\n    prehooks:\n      - type: script\n        config:\n          command: ./scripts/test-setup.sh\n</code></pre>"},{"location":"configuration/#validation-and-linting","title":"Validation and Linting","text":"<p>Validate your configuration:</p> <pre><code># Lint configuration\ntaskcat lint\n\n# Lint specific file\ntaskcat lint --config-file custom.yml\n\n# Validate templates\ntaskcat lint --templates\n</code></pre>"},{"location":"configuration/#best-practices","title":"Best Practices","text":""},{"location":"configuration/#1-use-hierarchical-configuration","title":"1. Use Hierarchical Configuration","text":"<pre><code># Global defaults\ngeneral:\n  regions:\n    - us-east-1\n    - us-west-2\n  parameters:\n    Environment: test\n\n# Project overrides\nproject:\n  parameters:\n    ProjectName: my-app\n\n# Test-specific settings\ntests:\n  production:\n    parameters:\n      Environment: prod  # Overrides global\n</code></pre>"},{"location":"configuration/#2-leverage-dynamic-values","title":"2. Leverage Dynamic Values","text":"<pre><code>tests:\n  flexible-test:\n    template: templates/app.yaml\n    parameters:\n      # Avoid hardcoded values\n      S3Bucket: $[taskcat_autobucket]\n      DatabasePassword: $[taskcat_genpass_20S]\n\n      # Use context-aware values\n      StackName: $[taskcat_project_name]-$[taskcat_test_name]\n      Region: $[taskcat_current_region]\n</code></pre>"},{"location":"configuration/#3-organize-templates","title":"3. Organize Templates","text":"<pre><code>project:\n  name: organized-project\n\ntests:\n  infrastructure:\n    template: infrastructure/vpc.yaml\n\n  database:\n    template: database/rds.yaml\n\n  application:\n    template: application/app.yaml\n</code></pre>"},{"location":"configuration/#4-use-meaningful-names","title":"4. Use Meaningful Names","text":"<pre><code>tests:\n  # Good: Descriptive names\n  vpc-with-public-subnets:\n    template: templates/vpc-public.yaml\n\n  rds-mysql-multi-az:\n    template: templates/rds-mysql.yaml\n\n  # Avoid: Generic names\n  test1:\n    template: template1.yaml\n</code></pre>"},{"location":"configuration/#configuration-examples","title":"Configuration Examples","text":"<p>See the Examples page for complete, real-world configuration examples.</p>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Dynamic Values - Master runtime parameters</li> <li>Parameter Overrides - Advanced parameter techniques</li> <li>Schema Reference - Complete configuration reference</li> </ul>"},{"location":"dynamic-values/","title":"Dynamic Values","text":"<p>Dynamic Values are runtime-evaluated parameters that provide flexible, context-aware configurations for your CloudFormation templates. These values are evaluated during taskcat execution and can pull data from your AWS environment, generate random values, or provide contextual information about your test run.</p>"},{"location":"dynamic-values/#overview","title":"Overview","text":"<p>Dynamic Values solve common testing challenges:</p> <ul> <li>Environment-specific values - Pull actual values from your AWS environment</li> <li>Unique resource names - Generate random strings to avoid naming conflicts</li> <li>Context awareness - Access current region, project name, and test information</li> <li>Security - Generate secure passwords and retrieve secrets safely</li> <li>Flexibility - Reference other parameters and create complex configurations</li> </ul>"},{"location":"dynamic-values/#syntax","title":"Syntax","text":"<p>Dynamic Values use the syntax: <code>$[taskcat_function_name]</code> or <code>$[taskcat_function_name_parameter]</code></p> <pre><code>parameters:\n  DatabasePassword: $[taskcat_genpass_16S]\n  S3BucketName: $[taskcat_autobucket]\n  CurrentRegion: $[taskcat_current_region]\n  AvailabilityZones: $[taskcat_genaz_2]\n</code></pre>"},{"location":"dynamic-values/#complete-dynamic-values-reference","title":"Complete Dynamic Values Reference","text":""},{"location":"dynamic-values/#random-value-generation","title":"Random Value Generation","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_random-string]</code> Generate 20-character random string <code>kj8s9dkf7h3m2n4p5q6r</code> Unique resource identifiers <code>$[taskcat_random-numbers]</code> Generate 20-digit random number <code>12345678901234567890</code> Unique numeric identifiers <code>$[taskcat_genuuid]</code> Generate UUID v1 <code>550e8400-e29b-41d4-a716-446655440000</code> Globally unique identifiers"},{"location":"dynamic-values/#password-generation","title":"Password Generation","text":"Dynamic Value Description Example Use Case <code>$[taskcat_genpass_8]</code> 8-character alphanumeric password <code>aB3dE7gH</code> Simple passwords <code>$[taskcat_genpass_16S]</code> 16-character password with special chars <code>aB3!dE7@gH9#kL2$</code> Secure passwords <code>$[taskcat_genpass_32A]</code> 32-character alphanumeric password <code>aB3dE7gH9kL2mN4pQ6rS8tU0vW2xY4zA</code> Long secure passwords <p>Password Types: - No suffix: Alphanumeric only - <code>S</code>: Includes special characters (!@#$%^&amp;*) - <code>A</code>: Alphanumeric only (explicit)</p>"},{"location":"dynamic-values/#aws-environment-values","title":"AWS Environment Values","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_current_region]</code> Current AWS region <code>us-east-1</code> Region-specific configurations <code>$[taskcat_genaz_2]</code> 2 availability zones <code>us-east-1a,us-east-1b</code> Multi-AZ deployments <code>$[taskcat_genaz_3]</code> 3 availability zones <code>us-east-1a,us-east-1b,us-east-1c</code> High availability setups <code>$[taskcat_gensingleaz_1]</code> Single AZ (1<sup>st</sup> available) <code>us-east-1a</code> Single AZ deployments <code>$[taskcat_gensingleaz_2]</code> Single AZ (2<sup>nd</sup> available) <code>us-east-1b</code> Specific AZ selection"},{"location":"dynamic-values/#s3-and-storage","title":"S3 and Storage","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_autobucket]</code> Auto-generated S3 bucket name <code>tcat-myproject-us-east-1-123456789</code> Template artifacts <code>$[taskcat_autobucket_prefix]</code> S3 bucket prefix <code>myproject-us-east-1-123456789</code> Custom bucket naming"},{"location":"dynamic-values/#context-information","title":"Context Information","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_project_name]</code> Current project name <code>my-cloudformation-project</code> Tagging and naming <code>$[taskcat_test_name]</code> Current test name <code>production-test</code> Test identification <code>$[taskcat_git_branch]</code> Current Git branch <code>feature/new-feature</code> Branch-specific configs"},{"location":"dynamic-values/#parameter-references","title":"Parameter References","text":"Dynamic Value Description Example Use Case <code>$[taskcat_getval_ParameterName]</code> Reference another parameter <code>$[taskcat_getval_DatabasePassword]</code> Parameter dependencies"},{"location":"dynamic-values/#aws-services-integration","title":"AWS Services Integration","text":"Dynamic Value Description Example Use Case <code>$[taskcat_ssm_/path/to/parameter]</code> Retrieve SSM Parameter <code>$[taskcat_ssm_/app/database/host]</code> Configuration management <code>$[taskcat_secretsmanager_secret-name]</code> Retrieve Secrets Manager value <code>$[taskcat_secretsmanager_prod/db/password]</code> Secure credential retrieval"},{"location":"dynamic-values/#legacyspecialized-values","title":"Legacy/Specialized Values","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_getkeypair]</code> Default key pair name <code>cikey</code> EC2 key pair reference <code>$[taskcat_getlicensebucket]</code> License bucket placeholder <code>override_this</code> License content storage <code>$[taskcat_getmediabucket]</code> Media bucket placeholder <code>override_this</code> Media content storage"},{"location":"dynamic-values/#advanced-examples","title":"Advanced Examples","text":""},{"location":"dynamic-values/#multi-tier-application","title":"Multi-Tier Application","text":"<pre><code>project:\n  name: multi-tier-app\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\nglobal:\n  parameters:\n    ProjectName: $[taskcat_project_name]\n    Environment: production\n\ntests:\n  vpc-infrastructure:\n    template: templates/vpc.yaml\n    parameters:\n      VpcName: $[taskcat_project_name]-vpc-$[taskcat_current_region]\n      AvailabilityZones: $[taskcat_genaz_3]\n\n  database-tier:\n    template: templates/rds.yaml\n    parameters:\n      DBInstanceIdentifier: $[taskcat_project_name]-db-$[taskcat_random-string]\n      MasterUsername: admin\n      MasterUserPassword: $[taskcat_genpass_32S]\n      DBSubnetGroupName: $[taskcat_getval_VpcName]-db-subnets\n\n  application-tier:\n    template: templates/app.yaml\n    parameters:\n      ApplicationName: $[taskcat_project_name]-app\n      InstanceType: m5.large\n      KeyName: $[taskcat_getkeypair]\n      S3Bucket: $[taskcat_autobucket]\n      DatabaseEndpoint: $[taskcat_getval_DBInstanceIdentifier]\n\n  monitoring:\n    template: templates/monitoring.yaml\n    parameters:\n      DashboardName: $[taskcat_project_name]-$[taskcat_test_name]-dashboard\n      LogGroupName: /aws/lambda/$[taskcat_project_name]\n      AlertEmail: $[taskcat_ssm_/notifications/email]\n</code></pre>"},{"location":"dynamic-values/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code>project:\n  name: environment-configs\n  regions:\n    - us-east-1\n\ntests:\n  development:\n    template: templates/app.yaml\n    parameters:\n      Environment: dev\n      InstanceType: t3.micro\n      DatabasePassword: $[taskcat_genpass_16]\n      S3Bucket: $[taskcat_project_name]-dev-$[taskcat_current_region]\n\n  staging:\n    template: templates/app.yaml\n    parameters:\n      Environment: staging\n      InstanceType: t3.small\n      DatabasePassword: $[taskcat_secretsmanager_staging/db/password]\n      S3Bucket: $[taskcat_project_name]-staging-$[taskcat_current_region]\n\n  production:\n    template: templates/app.yaml\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      S3Bucket: $[taskcat_project_name]-prod-$[taskcat_current_region]\n      BackupRetention: 30\n      MonitoringEnabled: true\n</code></pre>"},{"location":"dynamic-values/#security-focused-configuration","title":"Security-Focused Configuration","text":"<pre><code>project:\n  name: secure-app\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  secure-deployment:\n    template: templates/secure-app.yaml\n    parameters:\n      # Generate unique, secure passwords\n      DatabaseMasterPassword: $[taskcat_genpass_32S]\n      ApplicationSecret: $[taskcat_genpass_24S]\n\n      # Use AWS Secrets Manager for production secrets\n      ApiKey: $[taskcat_secretsmanager_prod/api/key]\n      CertificateArn: $[taskcat_ssm_/ssl/certificate/arn]\n\n      # Generate unique resource names\n      KMSKeyAlias: $[taskcat_project_name]-key-$[taskcat_genuuid]\n      S3BucketName: $[taskcat_autobucket]\n\n      # Context-aware naming\n      LogGroupName: /aws/lambda/$[taskcat_project_name]-$[taskcat_current_region]\n\n      # Reference other parameters\n      DatabasePasswordConfirm: $[taskcat_getval_DatabaseMasterPassword]\n</code></pre>"},{"location":"dynamic-values/#multi-region-deployment","title":"Multi-Region Deployment","text":"<pre><code>project:\n  name: global-app\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n    - ap-southeast-1\n\ntests:\n  global-infrastructure:\n    template: templates/global-app.yaml\n    parameters:\n      # Region-specific configurations\n      PrimaryRegion: us-east-1\n      CurrentRegion: $[taskcat_current_region]\n\n      # Generate region-specific AZs\n      AvailabilityZones: $[taskcat_genaz_2]\n\n      # Unique naming per region\n      S3BucketName: $[taskcat_project_name]-$[taskcat_current_region]-$[taskcat_random-numbers]\n\n      # Global unique identifiers\n      DeploymentId: $[taskcat_genuuid]\n\n      # Branch-specific configurations\n      GitBranch: $[taskcat_git_branch]\n\n      # Environment from SSM\n      Environment: $[taskcat_ssm_/global/environment]\n</code></pre>"},{"location":"dynamic-values/#best-practices","title":"Best Practices","text":""},{"location":"dynamic-values/#1-use-appropriate-value-types","title":"1. Use Appropriate Value Types","text":"<pre><code># \u2705 Good: Use specific types for specific purposes\nparameters:\n  DatabasePassword: $[taskcat_genpass_16S]    # Secure password\n  ResourceId: $[taskcat_genuuid]              # Globally unique\n  BucketName: $[taskcat_autobucket]           # S3-compliant naming\n\n# \u274c Avoid: Using generic values for specific purposes\nparameters:\n  DatabasePassword: $[taskcat_random-string]  # Not secure enough\n  ResourceId: $[taskcat_random-numbers]       # May not be unique\n</code></pre>"},{"location":"dynamic-values/#2-leverage-parameter-references","title":"2. Leverage Parameter References","text":"<pre><code># \u2705 Good: Reference parameters to maintain consistency\nparameters:\n  MasterPassword: $[taskcat_genpass_20S]\n  PasswordConfirm: $[taskcat_getval_MasterPassword]\n\n# \u274c Avoid: Generating separate values for related parameters\nparameters:\n  MasterPassword: $[taskcat_genpass_20S]\n  PasswordConfirm: $[taskcat_genpass_20S]     # Different values!\n</code></pre>"},{"location":"dynamic-values/#3-use-context-aware-naming","title":"3. Use Context-Aware Naming","text":"<pre><code># \u2705 Good: Include context in resource names\nparameters:\n  LogGroup: /aws/lambda/$[taskcat_project_name]-$[taskcat_current_region]\n  S3Bucket: $[taskcat_project_name]-logs-$[taskcat_current_region]\n\n# \u274c Avoid: Generic naming that may conflict\nparameters:\n  LogGroup: /aws/lambda/myapp\n  S3Bucket: myapp-logs\n</code></pre>"},{"location":"dynamic-values/#4-secure-credential-management","title":"4. Secure Credential Management","text":"<pre><code># \u2705 Good: Use AWS services for production secrets\nparameters:\n  DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n  ApiKey: $[taskcat_ssm_/app/api/key]\n\n# \u2705 Good: Generate secure passwords for testing\nparameters:\n  TestPassword: $[taskcat_genpass_16S]\n\n# \u274c Avoid: Hardcoded secrets\nparameters:\n  DatabasePassword: \"hardcoded-password\"\n</code></pre>"},{"location":"dynamic-values/#troubleshooting","title":"Troubleshooting","text":""},{"location":"dynamic-values/#common-issues","title":"Common Issues","text":"<p>Dynamic Value not replaced: - Check syntax: <code>$[taskcat_function_name]</code> - Verify function name spelling - Ensure proper parameter placement</p> <p>AWS service integration fails: - Verify IAM permissions for SSM/Secrets Manager - Check parameter/secret exists in target region - Validate parameter path format</p> <p>AZ generation fails: - Check if region has enough AZs - Verify region is enabled in your account - Consider AZ exclusions in configuration</p> <p>Parameter reference fails: - Ensure referenced parameter exists - Check parameter name spelling - Verify parameter is defined before reference</p> <p>For more troubleshooting help, see the Troubleshooting Guide.</p>"},{"location":"examples/","title":"Examples","text":"<p>Explore real-world taskcat configurations and learn from practical implementations. These examples demonstrate best practices, advanced features, and common use cases.</p>"},{"location":"examples/#basic-examples","title":"Basic Examples","text":""},{"location":"examples/#simple-s3-bucket-test","title":"Simple S3 Bucket Test","text":"<pre><code># .taskcat.yml\nproject:\n  name: simple-s3-test\n  regions:\n    - us-east-1\n\ntests:\n  basic:\n    template: s3-bucket.yaml\n    parameters:\n      BucketName: $[taskcat_autobucket]\n</code></pre> <pre><code># s3-bucket.yaml\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Simple S3 bucket\n\nParameters:\n  BucketName:\n    Type: String\n\nResources:\n  TestBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref BucketName\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n\nOutputs:\n  BucketName:\n    Value: !Ref TestBucket\n  BucketArn:\n    Value: !GetAtt TestBucket.Arn\n</code></pre>"},{"location":"examples/#multi-region-vpc-test","title":"Multi-Region VPC Test","text":"<pre><code># .taskcat.yml\nproject:\n  name: vpc-multi-region\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\ntests:\n  vpc-test:\n    template: vpc.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n      AvailabilityZones: $[taskcat_genaz_2]\n      Environment: test\n</code></pre>"},{"location":"examples/#intermediate-examples","title":"Intermediate Examples","text":""},{"location":"examples/#web-application-with-database","title":"Web Application with Database","text":"<pre><code># .taskcat.yml\nproject:\n  name: web-app-with-db\n  regions:\n    - us-east-1\n    - us-west-2\n  parameters:\n    ProjectName: web-application\n    Environment: staging\n\ntests:\n  vpc-infrastructure:\n    template: templates/vpc.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n      AvailabilityZones: $[taskcat_genaz_3]\n\n  database:\n    template: templates/rds.yaml\n    parameters:\n      DatabaseName: webapp\n      DatabaseUsername: admin\n      DatabasePassword: $[taskcat_genpass_16S]\n      DatabaseInstanceClass: db.t3.micro\n\n  web-application:\n    template: templates/web-app.yaml\n    parameters:\n      InstanceType: t3.medium\n      MinSize: 2\n      MaxSize: 6\n      KeyName: $[taskcat_getkeypair]\n      S3Bucket: $[taskcat_autobucket]\n</code></pre>"},{"location":"examples/#serverless-application","title":"Serverless Application","text":"<pre><code># .taskcat.yml\nproject:\n  name: serverless-api\n  regions:\n    - us-east-1\n    - us-west-2\n  lambda_source_path: src/functions\n  lambda_zip_path: dist/functions\n  package_lambda: true\n\ntests:\n  api-gateway:\n    template: templates/api-gateway.yaml\n    parameters:\n      ApiName: $[taskcat_project_name]-api\n      StageName: $[taskcat_test_name]\n\n  lambda-functions:\n    template: templates/lambda.yaml\n    parameters:\n      FunctionName: $[taskcat_project_name]-function\n      Runtime: python3.9\n      MemorySize: 256\n      Timeout: 30\n      S3Bucket: $[taskcat_autobucket]\n\n  dynamodb-table:\n    template: templates/dynamodb.yaml\n    parameters:\n      TableName: $[taskcat_project_name]-table\n      BillingMode: PAY_PER_REQUEST\n</code></pre>"},{"location":"examples/#advanced-examples","title":"Advanced Examples","text":""},{"location":"examples/#multi-environment-enterprise-application","title":"Multi-Environment Enterprise Application","text":"<pre><code># .taskcat.yml\nproject:\n  name: enterprise-app\n  owner: platform-team@company.com\n  s3_regional_buckets: true\n  package_lambda: true\n\ngeneral:\n  parameters:\n    ProjectName: enterprise-application\n    Owner: platform-team\n  tags:\n    CostCenter: \"1001\"\n    Department: Engineering\n\ntests:\n  development:\n    template: templates/main.yaml\n    regions:\n      - us-east-1\n    parameters:\n      Environment: dev\n      InstanceType: t3.micro\n      DatabaseInstanceClass: db.t3.micro\n      MinSize: 1\n      MaxSize: 2\n      EnableMonitoring: false\n      BackupRetentionPeriod: 1\n\n  staging:\n    template: templates/main.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n    parameters:\n      Environment: staging\n      InstanceType: t3.medium\n      DatabaseInstanceClass: db.t3.small\n      MinSize: 2\n      MaxSize: 4\n      EnableMonitoring: true\n      BackupRetentionPeriod: 7\n      DatabasePassword: $[taskcat_genpass_20S]\n\n  production:\n    template: templates/main.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n      DatabaseInstanceClass: db.r5.large\n      MinSize: 3\n      MaxSize: 10\n      EnableMonitoring: true\n      EnableEncryption: true\n      MultiAZ: true\n      BackupRetentionPeriod: 30\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      SSLCertificateArn: $[taskcat_ssm_/ssl/certificate/arn]\n    auth:\n      us-east-1: production-profile\n      us-west-2: production-profile\n      eu-west-1: europe-profile\n</code></pre>"},{"location":"examples/#cross-account-deployment","title":"Cross-Account Deployment","text":"<pre><code># .taskcat.yml\nproject:\n  name: cross-account-app\n\ntests:\n  shared-services-account:\n    template: templates/shared-services.yaml\n    regions:\n      - us-east-1\n    auth:\n      default: shared-services-profile\n    parameters:\n      Environment: shared\n      VpcCidr: 10.0.0.0/16\n\n  development-account:\n    template: templates/application.yaml\n    regions:\n      - us-east-1\n    auth:\n      default: dev-account-profile\n    parameters:\n      Environment: dev\n      SharedServicesVpcId: $[taskcat_ssm_/shared/vpc/id]\n      InstanceType: t3.micro\n\n  production-account:\n    template: templates/application.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n    auth:\n      default: prod-account-profile\n    parameters:\n      Environment: prod\n      SharedServicesVpcId: $[taskcat_ssm_/shared/vpc/id]\n      InstanceType: m5.large\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n</code></pre>"},{"location":"examples/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code># .taskcat.yml\nproject:\n  name: microservices-platform\n  regions:\n    - us-east-1\n    - us-west-2\n  lambda_source_path: services\n  package_lambda: true\n\ngeneral:\n  parameters:\n    Platform: microservices\n    Environment: production\n  tags:\n    Architecture: microservices\n    ManagedBy: taskcat\n\ntests:\n  infrastructure:\n    template: templates/infrastructure.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n      AvailabilityZones: $[taskcat_genaz_3]\n      ClusterName: $[taskcat_project_name]-cluster\n\n  user-service:\n    template: templates/microservice.yaml\n    parameters:\n      ServiceName: user-service\n      ContainerImage: user-service:latest\n      ContainerPort: 8080\n      DesiredCount: 3\n      DatabaseName: users\n      DatabasePassword: $[taskcat_genpass_20S]\n\n  order-service:\n    template: templates/microservice.yaml\n    parameters:\n      ServiceName: order-service\n      ContainerImage: order-service:latest\n      ContainerPort: 8081\n      DesiredCount: 2\n      DatabaseName: orders\n      DatabasePassword: $[taskcat_genpass_20S]\n\n  notification-service:\n    template: templates/lambda-service.yaml\n    parameters:\n      ServiceName: notification-service\n      Runtime: python3.9\n      MemorySize: 512\n      Timeout: 60\n      QueueName: $[taskcat_project_name]-notifications\n\n  api-gateway:\n    template: templates/api-gateway.yaml\n    parameters:\n      ApiName: $[taskcat_project_name]-api\n      StageName: v1\n      UserServiceEndpoint: $[taskcat_getval_UserServiceEndpoint]\n      OrderServiceEndpoint: $[taskcat_getval_OrderServiceEndpoint]\n</code></pre>"},{"location":"examples/#data-pipeline","title":"Data Pipeline","text":"<pre><code># .taskcat.yml\nproject:\n  name: data-pipeline\n  regions:\n    - us-east-1\n  parameters:\n    DataBucket: $[taskcat_autobucket]\n    Environment: production\n\ntests:\n  data-ingestion:\n    template: templates/data-ingestion.yaml\n    parameters:\n      KinesisStreamName: $[taskcat_project_name]-stream\n      KinesisShardCount: 2\n      FirehoseDeliveryStreamName: $[taskcat_project_name]-firehose\n      S3Bucket: $[taskcat_getval_DataBucket]\n\n  data-processing:\n    template: templates/data-processing.yaml\n    parameters:\n      GlueJobName: $[taskcat_project_name]-etl\n      GlueJobScript: s3://$[taskcat_getval_DataBucket]/scripts/etl.py\n      DatabaseName: $[taskcat_project_name]_db\n      TableName: processed_data\n\n  data-analytics:\n    template: templates/data-analytics.yaml\n    parameters:\n      RedshiftClusterIdentifier: $[taskcat_project_name]-cluster\n      RedshiftDatabaseName: analytics\n      RedshiftMasterUsername: admin\n      RedshiftMasterPassword: $[taskcat_genpass_20S]\n      RedshiftNodeType: dc2.large\n      RedshiftNumberOfNodes: 2\n</code></pre>"},{"location":"examples/#specialized-examples","title":"Specialized Examples","text":""},{"location":"examples/#security-focused-deployment","title":"Security-Focused Deployment","text":"<pre><code># .taskcat.yml\nproject:\n  name: secure-application\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  security-baseline:\n    template: templates/security-baseline.yaml\n    parameters:\n      EnableCloudTrail: true\n      EnableGuardDuty: true\n      EnableSecurityHub: true\n      EnableConfig: true\n      CloudTrailS3Bucket: $[taskcat_autobucket]\n\n  encrypted-application:\n    template: templates/encrypted-app.yaml\n    parameters:\n      KMSKeyAlias: $[taskcat_project_name]-key\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      SSLCertificateArn: $[taskcat_ssm_/ssl/certificate/arn]\n      EnableEncryptionAtRest: true\n      EnableEncryptionInTransit: true\n      InstanceType: m5.large\n\n  compliance-monitoring:\n    template: templates/compliance.yaml\n    parameters:\n      ComplianceFramework: SOC2\n      LogRetentionPeriod: 2557  # 7 years in days\n      EnableLogEncryption: true\n      MonitoringS3Bucket: $[taskcat_autobucket]\n</code></pre>"},{"location":"examples/#disaster-recovery-setup","title":"Disaster Recovery Setup","text":"<pre><code># .taskcat.yml\nproject:\n  name: disaster-recovery\n\ntests:\n  primary-region:\n    template: templates/primary-infrastructure.yaml\n    regions:\n      - us-east-1\n    parameters:\n      Environment: production\n      IsPrimaryRegion: true\n      DatabaseInstanceClass: db.r5.xlarge\n      MultiAZ: true\n      BackupRetentionPeriod: 35\n      CrossRegionBackupEnabled: true\n      ReplicationTargetRegion: us-west-2\n\n  disaster-recovery-region:\n    template: templates/dr-infrastructure.yaml\n    regions:\n      - us-west-2\n    parameters:\n      Environment: production\n      IsDRRegion: true\n      DatabaseInstanceClass: db.r5.large\n      ReadReplicaSourceRegion: us-east-1\n      AutomatedBackupRetentionPeriod: 35\n\n  failover-automation:\n    template: templates/failover-automation.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n    parameters:\n      PrimaryRegion: us-east-1\n      DRRegion: us-west-2\n      Route53HealthCheckUrl: https://api.example.com/health\n      FailoverThreshold: 3\n</code></pre>"},{"location":"examples/#testing-patterns","title":"Testing Patterns","text":""},{"location":"examples/#blue-green-deployment-testing","title":"Blue-Green Deployment Testing","text":"<pre><code># .taskcat.yml\nproject:\n  name: blue-green-deployment\n\ntests:\n  blue-environment:\n    template: templates/application.yaml\n    parameters:\n      Environment: blue\n      Version: v1.0.0\n      TrafficWeight: 100\n      InstanceType: m5.large\n\n  green-environment:\n    template: templates/application.yaml\n    parameters:\n      Environment: green\n      Version: v1.1.0\n      TrafficWeight: 0\n      InstanceType: m5.large\n\n  traffic-shifting:\n    template: templates/traffic-manager.yaml\n    parameters:\n      BlueEnvironmentArn: $[taskcat_getval_BlueEnvironmentArn]\n      GreenEnvironmentArn: $[taskcat_getval_GreenEnvironmentArn]\n      InitialTrafficPercentage: 10\n</code></pre>"},{"location":"examples/#ab-testing-infrastructure","title":"A/B Testing Infrastructure","text":"<pre><code># .taskcat.yml\nproject:\n  name: ab-testing-platform\n\ntests:\n  variant-a:\n    template: templates/application-variant.yaml\n    parameters:\n      VariantName: A\n      FeatureFlags: feature-a-enabled\n      InstanceType: m5.large\n      TrafficPercentage: 50\n\n  variant-b:\n    template: templates/application-variant.yaml\n    parameters:\n      VariantName: B\n      FeatureFlags: feature-b-enabled\n      InstanceType: m5.large\n      TrafficPercentage: 50\n\n  analytics-infrastructure:\n    template: templates/analytics.yaml\n    parameters:\n      KinesisStreamName: $[taskcat_project_name]-events\n      ElasticsearchDomain: $[taskcat_project_name]-analytics\n      KibanaDashboardName: ab-testing-dashboard\n</code></pre>"},{"location":"examples/#best-practices-examples","title":"Best Practices Examples","text":""},{"location":"examples/#parameterized-and-reusable","title":"Parameterized and Reusable","text":"<pre><code># .taskcat.yml - Good example of reusable configuration\nproject:\n  name: reusable-infrastructure\n  parameters:\n    # Common parameters\n    ProjectName: $[taskcat_project_name]\n    Owner: platform-team\n\ngeneral:\n  parameters:\n    # Global defaults\n    Environment: test\n    EnableMonitoring: true\n  tags:\n    ManagedBy: taskcat\n    Project: $[taskcat_project_name]\n\ntests:\n  # Small deployment for development\n  small:\n    template: templates/scalable-app.yaml\n    parameters:\n      Size: small\n      InstanceType: t3.micro\n      MinSize: 1\n      MaxSize: 2\n      DatabaseInstanceClass: db.t3.micro\n\n  # Medium deployment for staging\n  medium:\n    template: templates/scalable-app.yaml\n    parameters:\n      Size: medium\n      InstanceType: t3.medium\n      MinSize: 2\n      MaxSize: 4\n      DatabaseInstanceClass: db.t3.small\n\n  # Large deployment for production\n  large:\n    template: templates/scalable-app.yaml\n    parameters:\n      Size: large\n      InstanceType: m5.large\n      MinSize: 3\n      MaxSize: 10\n      DatabaseInstanceClass: db.r5.large\n      EnableEncryption: true\n      MultiAZ: true\n</code></pre>"},{"location":"examples/#security-best-practices","title":"Security Best Practices","text":"<pre><code># .taskcat.yml - Security-focused configuration\nproject:\n  name: secure-by-design\n\ntests:\n  security-compliant:\n    template: templates/secure-application.yaml\n    parameters:\n      # Use Secrets Manager for sensitive data\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      ApiKey: $[taskcat_secretsmanager_prod/api/key]\n\n      # Use SSM for configuration\n      DatabaseEndpoint: $[taskcat_ssm_/app/database/endpoint]\n      CacheEndpoint: $[taskcat_ssm_/app/cache/endpoint]\n\n      # Generate unique, secure values\n      EncryptionKey: $[taskcat_genuuid]\n      S3Bucket: $[taskcat_autobucket]\n\n      # Security settings\n      EnableEncryption: true\n      EnableLogging: true\n      EnableMonitoring: true\n      RestrictPublicAccess: true\n</code></pre>"},{"location":"examples/#integration-examples","title":"Integration Examples","text":""},{"location":"examples/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":"<pre><code># .taskcat.yml for CI/CD\nproject:\n  name: cicd-integration\n\ntests:\n  pull-request:\n    template: templates/app.yaml\n    regions:\n      - us-east-1\n    parameters:\n      Environment: pr-$[taskcat_git_branch]\n      InstanceType: t3.micro\n\n  staging-deployment:\n    template: templates/app.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n    parameters:\n      Environment: staging\n      InstanceType: t3.medium\n      GitCommit: $[taskcat_git_branch]\n\n  production-deployment:\n    template: templates/app.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n    parameters:\n      Environment: production\n      InstanceType: m5.large\n      GitCommit: $[taskcat_git_branch]\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n</code></pre> <p>These examples demonstrate the flexibility and power of taskcat for testing CloudFormation templates across various scenarios, from simple single-resource tests to complex multi-tier applications and enterprise deployments.</p>"},{"location":"examples/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Guide - Detailed configuration options</li> <li>Dynamic Values - Runtime-evaluated parameters</li> <li>Parameter Overrides - Advanced parameter techniques</li> <li>Schema Reference - Complete configuration reference</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>Get taskcat installed and running on your system quickly and easily.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing taskcat, ensure you have:</p> <ul> <li>Python 3.8+ - taskcat requires Python 3.8 or higher</li> <li>AWS CLI - Configured with appropriate credentials  </li> <li>Git - For cloning repositories and version control</li> <li>AWS Permissions - See Required Permissions</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#pypi-recommended","title":"PyPI (Recommended)","text":"<p>Install taskcat from the Python Package Index:</p> <pre><code>pip install taskcat\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>Install the latest development version:</p> <pre><code>pip install git+https://github.com/aws-ia/taskcat.git\n</code></pre>"},{"location":"installation/#docker","title":"Docker","text":"<p>Use the official Docker image:</p> <pre><code># Pull the image\ndocker pull public.ecr.aws/aws-ia/taskcat:latest\n\n# Run taskcat in a container\ndocker run -it --rm \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws \\\n  public.ecr.aws/aws-ia/taskcat:latest --help\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>Verify your installation:</p> <pre><code># Check version\ntaskcat --version\n\n# Display help\ntaskcat --help\n\n# Test basic functionality\ntaskcat lint --help\n</code></pre>"},{"location":"installation/#aws-configuration","title":"AWS Configuration","text":""},{"location":"installation/#configure-credentials","title":"Configure Credentials","text":"<p>taskcat uses AWS credentials from your environment. Choose one method:</p>"},{"location":"installation/#aws-cli-configuration","title":"AWS CLI Configuration","text":"<pre><code>aws configure\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<pre><code>export AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_DEFAULT_REGION=us-east-1\n</code></pre>"},{"location":"installation/#iam-roles-recommended","title":"IAM Roles (Recommended)","text":"<p>For EC2 instances or Lambda functions, taskcat automatically uses attached IAM roles.</p>"},{"location":"installation/#required-permissions","title":"Required Permissions","text":"<p>taskcat requires these AWS permissions:</p> <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudformation:*\",\n        \"s3:*\",\n        \"iam:ListRoles\",\n        \"iam:PassRole\",\n        \"ec2:Describe*\",\n        \"logs:*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre> <p>Security Note</p> <p>These are broad permissions for testing. In production, use more restrictive policies based on your specific templates.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<p>Python version error: <pre><code># Check Python version\npython --version\n# or\npython3 --version\n</code></pre></p> <p>Permission denied: <pre><code># Install with user flag\npip install --user taskcat\n</code></pre></p> <p>AWS credentials not found: <pre><code># Verify AWS configuration\naws sts get-caller-identity\n</code></pre></p>"},{"location":"installation/#getting-help","title":"Getting Help","text":"<ul> <li>Check the Troubleshooting Guide</li> <li>Visit our GitHub Issues</li> <li>Join the community discussions</li> </ul>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>Once installed, proceed to:</p> <ol> <li>Quick Start - Run your first test</li> <li>Configuration - Learn configuration options</li> <li>Dynamic Values - Master runtime parameters</li> </ol>"},{"location":"parameter-overrides/","title":"Parameter Overrides","text":"<p>Learn how to override CloudFormation parameters at different levels for flexible and reusable test configurations.</p>"},{"location":"parameter-overrides/#overview","title":"Overview","text":"<p>Parameter overrides allow you to:</p> <ul> <li>Reuse templates across different environments</li> <li>Customize deployments without modifying templates</li> <li>Manage configurations hierarchically</li> <li>Test variations of the same template</li> </ul>"},{"location":"parameter-overrides/#override-hierarchy","title":"Override Hierarchy","text":"<p>Parameters are resolved in this order (highest to lowest priority):</p> <ol> <li>Test-level parameters - Specific to individual tests</li> <li>Project-level parameters - Applied to all project tests</li> <li>Global parameters - Applied to all tests</li> <li>Template defaults - Default values in CloudFormation template</li> </ol> <pre><code>general:\n  parameters:\n    Environment: test        # Lowest priority\n\nproject:\n  parameters:\n    Environment: staging     # Overrides global\n\ntests:\n  production:\n    parameters:\n      Environment: prod      # Highest priority\n</code></pre>"},{"location":"parameter-overrides/#basic-parameter-overrides","title":"Basic Parameter Overrides","text":""},{"location":"parameter-overrides/#template-with-parameters","title":"Template with Parameters","text":"<pre><code># template.yaml\nAWSTemplateFormatVersion: '2010-09-09'\nParameters:\n  InstanceType:\n    Type: String\n    Default: t3.micro\n  Environment:\n    Type: String\n    Default: dev\n  DatabasePassword:\n    Type: String\n    NoEcho: true\n</code></pre>"},{"location":"parameter-overrides/#configuration-with-overrides","title":"Configuration with Overrides","text":"<pre><code># .taskcat.yml\nproject:\n  name: parameter-override-example\n  parameters:\n    Environment: staging    # Override template default\n\ntests:\n  development:\n    template: template.yaml\n    parameters:\n      InstanceType: t3.micro\n      Environment: dev      # Override project setting\n\n  production:\n    template: template.yaml\n    parameters:\n      InstanceType: m5.large\n      Environment: prod     # Override project setting\n      DatabasePassword: $[taskcat_genpass_20S]\n</code></pre>"},{"location":"parameter-overrides/#global-parameter-overrides","title":"Global Parameter Overrides","text":"<p>Set parameters that apply to all tests:</p> <pre><code>general:\n  parameters:\n    # Common parameters for all tests\n    ProjectName: my-application\n    Owner: platform-team\n    CostCenter: \"1001\"\n\n  tags:\n    # Common tags for all stacks\n    Project: my-application\n    ManagedBy: taskcat\n</code></pre>"},{"location":"parameter-overrides/#project-parameter-overrides","title":"Project Parameter Overrides","text":"<p>Set parameters that apply to all tests in a project:</p> <pre><code>project:\n  name: web-application\n  parameters:\n    # Project-wide parameters\n    ApplicationName: web-app\n    Environment: staging\n    VpcCidr: 10.0.0.0/16\n\ntests:\n  vpc-test:\n    template: templates/vpc.yaml\n    # Inherits all project parameters\n\n  app-test:\n    template: templates/app.yaml\n    parameters:\n      Environment: production  # Overrides project Environment\n</code></pre>"},{"location":"parameter-overrides/#test-specific-overrides","title":"Test-Specific Overrides","text":"<p>Override parameters for individual tests:</p> <pre><code>tests:\n  small-deployment:\n    template: templates/app.yaml\n    parameters:\n      InstanceType: t3.micro\n      MinSize: 1\n      MaxSize: 2\n\n  large-deployment:\n    template: templates/app.yaml\n    parameters:\n      InstanceType: m5.xlarge\n      MinSize: 3\n      MaxSize: 10\n\n  secure-deployment:\n    template: templates/app.yaml\n    parameters:\n      InstanceType: m5.large\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      EnableEncryption: true\n</code></pre>"},{"location":"parameter-overrides/#environment-based-overrides","title":"Environment-Based Overrides","text":"<p>Create environment-specific configurations:</p> <pre><code>project:\n  name: multi-environment-app\n\ntests:\n  development:\n    template: templates/app.yaml\n    parameters:\n      Environment: dev\n      InstanceType: t3.micro\n      DatabaseInstanceClass: db.t3.micro\n      BackupRetentionPeriod: 1\n      MultiAZ: false\n\n  staging:\n    template: templates/app.yaml\n    parameters:\n      Environment: staging\n      InstanceType: t3.medium\n      DatabaseInstanceClass: db.t3.small\n      BackupRetentionPeriod: 7\n      MultiAZ: false\n\n  production:\n    template: templates/app.yaml\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n      DatabaseInstanceClass: db.r5.large\n      BackupRetentionPeriod: 30\n      MultiAZ: true\n      EnableEncryption: true\n      EnableMonitoring: true\n</code></pre>"},{"location":"parameter-overrides/#region-specific-overrides","title":"Region-Specific Overrides","text":"<p>Different parameters for different regions:</p> <pre><code>tests:\n  multi-region-app:\n    template: templates/app.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n    parameters:\n      # Base parameters for all regions\n      InstanceType: m5.large\n      Environment: prod\n\n  us-east-1-specific:\n    template: templates/app.yaml\n    regions:\n      - us-east-1\n    parameters:\n      # US East specific configuration\n      InstanceType: m5.xlarge\n      EnableCloudFront: true\n      PrimaryRegion: true\n\n  europe-specific:\n    template: templates/app.yaml\n    regions:\n      - eu-west-1\n    parameters:\n      # Europe specific configuration\n      InstanceType: m5.large\n      DataResidency: EU\n      ComplianceMode: GDPR\n</code></pre>"},{"location":"parameter-overrides/#dynamic-parameter-overrides","title":"Dynamic Parameter Overrides","text":"<p>Combine static and dynamic parameters:</p> <pre><code>project:\n  parameters:\n    # Static project parameters\n    ProjectName: my-app\n    Owner: development-team\n\ntests:\n  dynamic-test:\n    template: templates/app.yaml\n    parameters:\n      # Static overrides\n      Environment: production\n      InstanceType: m5.large\n\n      # Dynamic values\n      S3Bucket: $[taskcat_autobucket]\n      DatabasePassword: $[taskcat_genpass_20S]\n      UniqueId: $[taskcat_genuuid]\n      CurrentRegion: $[taskcat_current_region]\n\n      # Context-aware values\n      StackName: $[taskcat_project_name]-$[taskcat_test_name]\n      LogGroup: /aws/lambda/$[taskcat_project_name]\n</code></pre>"},{"location":"parameter-overrides/#complex-parameter-scenarios","title":"Complex Parameter Scenarios","text":""},{"location":"parameter-overrides/#conditional-parameters","title":"Conditional Parameters","text":"<pre><code>tests:\n  conditional-test:\n    template: templates/conditional.yaml\n    parameters:\n      CreateDatabase: true\n      DatabaseInstanceClass: db.t3.micro\n      DatabasePassword: $[taskcat_genpass_16S]\n\n  no-database-test:\n    template: templates/conditional.yaml\n    parameters:\n      CreateDatabase: false\n      # Database parameters not needed\n</code></pre>"},{"location":"parameter-overrides/#nested-stack-parameters","title":"Nested Stack Parameters","text":"<pre><code>tests:\n  nested-stack-test:\n    template: templates/parent.yaml\n    parameters:\n      # Parent stack parameters\n      Environment: production\n\n      # Child stack parameters (passed through)\n      VpcTemplateUrl: https://s3.amazonaws.com/templates/vpc.yaml\n      VpcInstanceType: t3.medium\n\n      AppTemplateUrl: https://s3.amazonaws.com/templates/app.yaml\n      AppInstanceType: m5.large\n      AppDatabasePassword: $[taskcat_genpass_20S]\n</code></pre>"},{"location":"parameter-overrides/#cross-stack-references","title":"Cross-Stack References","text":"<pre><code>tests:\n  vpc-stack:\n    template: templates/vpc.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n      Environment: production\n\n  app-stack:\n    template: templates/app.yaml\n    parameters:\n      # Reference outputs from vpc-stack\n      VpcId: $[taskcat_getval_VpcId]\n      PrivateSubnets: $[taskcat_getval_PrivateSubnets]\n      Environment: production\n      InstanceType: m5.large\n</code></pre>"},{"location":"parameter-overrides/#parameter-file-integration","title":"Parameter File Integration","text":"<p>Use external parameter files:</p>"},{"location":"parameter-overrides/#parameter-file","title":"Parameter File","text":"<pre><code>// parameters/production.json\n[\n  {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"m5.large\"\n  },\n  {\n    \"ParameterKey\": \"Environment\",\n    \"ParameterValue\": \"production\"\n  },\n  {\n    \"ParameterKey\": \"DatabaseInstanceClass\",\n    \"ParameterValue\": \"db.r5.large\"\n  }\n]\n</code></pre>"},{"location":"parameter-overrides/#configuration-reference","title":"Configuration Reference","text":"<pre><code>tests:\n  production-from-file:\n    template: templates/app.yaml\n    parameter_input: parameters/production.json\n    parameters:\n      # Additional parameters or overrides\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n</code></pre>"},{"location":"parameter-overrides/#validation-and-testing","title":"Validation and Testing","text":""},{"location":"parameter-overrides/#parameter-validation","title":"Parameter Validation","text":"<pre><code># Validate parameters before testing\ntaskcat lint\n\n# Test with specific parameters\ntaskcat test run --parameters InstanceType=t3.micro,Environment=test\n</code></pre>"},{"location":"parameter-overrides/#parameter-debugging","title":"Parameter Debugging","text":"<pre><code>tests:\n  debug-parameters:\n    template: templates/debug.yaml\n    parameters:\n      # Use outputs to verify parameter values\n      DebugInstanceType: t3.micro\n      DebugEnvironment: $[taskcat_test_name]\n      DebugRegion: $[taskcat_current_region]\n      DebugProject: $[taskcat_project_name]\n</code></pre>"},{"location":"parameter-overrides/#best-practices","title":"Best Practices","text":""},{"location":"parameter-overrides/#1-use-hierarchical-configuration","title":"1. Use Hierarchical Configuration","text":"<pre><code># \u2705 Good: Logical hierarchy\ngeneral:\n  parameters:\n    Owner: platform-team        # Global default\n\nproject:\n  parameters:\n    Environment: staging        # Project default\n\ntests:\n  production:\n    parameters:\n      Environment: prod         # Test-specific override\n</code></pre>"},{"location":"parameter-overrides/#2-group-related-parameters","title":"2. Group Related Parameters","text":"<pre><code># \u2705 Good: Grouped by function\ntests:\n  web-app:\n    parameters:\n      # Instance configuration\n      InstanceType: m5.large\n      MinSize: 2\n      MaxSize: 10\n\n      # Database configuration\n      DatabaseInstanceClass: db.r5.large\n      DatabasePassword: $[taskcat_genpass_20S]\n      MultiAZ: true\n\n      # Security configuration\n      EnableEncryption: true\n      SSLCertificateArn: $[taskcat_ssm_/ssl/cert/arn]\n</code></pre>"},{"location":"parameter-overrides/#3-use-meaningful-parameter-names","title":"3. Use Meaningful Parameter Names","text":"<pre><code># \u2705 Good: Descriptive names\nparameters:\n  WebServerInstanceType: m5.large\n  DatabaseMasterPassword: $[taskcat_genpass_20S]\n  ApplicationLoadBalancerScheme: internet-facing\n\n# \u274c Avoid: Generic names\nparameters:\n  Type1: m5.large\n  Password: $[taskcat_genpass_20S]\n  Scheme: internet-facing\n</code></pre>"},{"location":"parameter-overrides/#4-document-parameter-purpose","title":"4. Document Parameter Purpose","text":"<pre><code>tests:\n  documented-test:\n    template: templates/app.yaml\n    parameters:\n      # Production-grade instance for high availability\n      InstanceType: m5.large\n\n      # Secure password for RDS master user\n      DatabasePassword: $[taskcat_genpass_20S]\n\n      # Enable encryption for compliance requirements\n      EnableEncryption: true\n</code></pre>"},{"location":"parameter-overrides/#common-patterns","title":"Common Patterns","text":""},{"location":"parameter-overrides/#multi-tier-application","title":"Multi-Tier Application","text":"<pre><code>project:\n  name: three-tier-app\n  parameters:\n    ProjectName: three-tier-app\n    Environment: production\n\ntests:\n  web-tier:\n    template: templates/web-tier.yaml\n    parameters:\n      InstanceType: m5.large\n      MinSize: 2\n      MaxSize: 10\n\n  app-tier:\n    template: templates/app-tier.yaml\n    parameters:\n      InstanceType: m5.xlarge\n      MinSize: 3\n      MaxSize: 15\n\n  data-tier:\n    template: templates/data-tier.yaml\n    parameters:\n      DatabaseInstanceClass: db.r5.2xlarge\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      MultiAZ: true\n</code></pre>"},{"location":"parameter-overrides/#blue-green-deployment","title":"Blue-Green Deployment","text":"<pre><code>tests:\n  blue-environment:\n    template: templates/app.yaml\n    parameters:\n      Environment: blue\n      InstanceType: m5.large\n      LoadBalancerWeight: 100\n\n  green-environment:\n    template: templates/app.yaml\n    parameters:\n      Environment: green\n      InstanceType: m5.large\n      LoadBalancerWeight: 0\n</code></pre>"},{"location":"parameter-overrides/#troubleshooting","title":"Troubleshooting","text":""},{"location":"parameter-overrides/#common-issues","title":"Common Issues","text":"<p>Parameter not found: - Verify parameter exists in template - Check parameter name spelling - Ensure parameter is not marked as <code>NoEcho</code></p> <p>Type mismatch: - Verify parameter type in template - Check value format (string, number, boolean) - Validate array/list formatting</p> <p>Override not working: - Check parameter hierarchy - Verify configuration syntax - Test with <code>taskcat lint</code></p> <p>For more help, see the Troubleshooting Guide.</p>"},{"location":"parameter-overrides/#next-steps","title":"Next Steps","text":"<ul> <li>Dynamic Values - Runtime-evaluated parameters</li> <li>Configuration Guide - Complete configuration options</li> <li>Schema Reference - Full parameter reference</li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":"<p>Get up and running with taskcat in under 5 minutes. This guide walks you through creating and running your first test.</p>"},{"location":"quickstart/#step-1-create-a-cloudformation-template","title":"Step 1: Create a CloudFormation Template","text":"<p>Create a simple template to test:</p> <pre><code># template.yaml\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Simple S3 bucket for taskcat testing'\n\nParameters:\n  BucketName:\n    Type: String\n    Description: Name for the S3 bucket\n    Default: my-test-bucket\n\nResources:\n  TestBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub \"${BucketName}-${AWS::AccountId}-${AWS::Region}\"\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n\nOutputs:\n  BucketName:\n    Description: Name of the created S3 bucket\n    Value: !Ref TestBucket\n  BucketArn:\n    Description: ARN of the created S3 bucket\n    Value: !GetAtt TestBucket.Arn\n</code></pre>"},{"location":"quickstart/#step-2-create-taskcat-configuration","title":"Step 2: Create taskcat Configuration","text":"<p>Create a <code>.taskcat.yml</code> configuration file:</p> <pre><code># .taskcat.yml\nproject:\n  name: my-first-test\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  basic-test:\n    template: template.yaml\n    parameters:\n      BucketName: $[taskcat_random-string]\n</code></pre>"},{"location":"quickstart/#step-3-run-your-first-test","title":"Step 3: Run Your First Test","text":"<p>Execute the test:</p> <pre><code>taskcat test run\n</code></pre> <p>taskcat will:</p> <ol> <li>\ud83d\ude80 Deploy your template in specified regions</li> <li>\u2705 Validate the deployment succeeds  </li> <li>\ud83d\udcca Generate a detailed report</li> <li>\ud83e\uddf9 Clean up all test resources</li> </ol>"},{"location":"quickstart/#step-4-view-results","title":"Step 4: View Results","text":"<p>Check the results:</p> <pre><code># List output files\nls taskcat_outputs/\n\n# Open the HTML report\nopen taskcat_outputs/index.html\n</code></pre> <p>The report includes: - Deployment status for each region - CloudFormation events and logs - Resource details and outputs - Performance metrics</p>"},{"location":"quickstart/#what-just-happened","title":"What Just Happened?","text":"<p>taskcat performed these actions:</p> <ol> <li>Template Processing - Replaced <code>$[taskcat_random-string]</code> with a unique value</li> <li>Multi-Region Deployment - Created CloudFormation stacks in us-east-1 and us-west-2</li> <li>Validation - Verified successful deployment and resource creation</li> <li>Reporting - Generated comprehensive HTML and JSON reports</li> <li>Cleanup - Automatically deleted all test resources</li> </ol>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've run your first test, explore:</p>"},{"location":"quickstart/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>tests:\n  production-test:\n    template: template.yaml\n    parameters:\n      BucketName: $[taskcat_project_name]-prod\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n\n  development-test:\n    template: template.yaml\n    parameters:\n      BucketName: $[taskcat_project_name]-dev\n    regions:\n      - us-east-1\n</code></pre>"},{"location":"quickstart/#multiple-templates","title":"Multiple Templates","text":"<pre><code>tests:\n  vpc-test:\n    template: templates/vpc.yaml\n\n  app-test:\n    template: templates/application.yaml\n    parameters:\n      InstanceType: t3.micro\n</code></pre>"},{"location":"quickstart/#dynamic-parameters","title":"Dynamic Parameters","text":"<pre><code>tests:\n  secure-test:\n    template: template.yaml\n    parameters:\n      BucketName: $[taskcat_autobucket]\n      DatabasePassword: $[taskcat_genpass_16S]\n      AvailabilityZones: $[taskcat_genaz_2]\n      CurrentRegion: $[taskcat_current_region]\n</code></pre>"},{"location":"quickstart/#common-commands","title":"Common Commands","text":"<pre><code># Test specific configuration\ntaskcat test run --config-file custom.yml\n\n# Test specific regions\ntaskcat test run --regions us-east-1,us-west-2\n\n# Keep resources after testing (for debugging)\ntaskcat test run --no-delete\n\n# Lint configuration before testing\ntaskcat lint\n\n# List available tests\ntaskcat test list\n</code></pre>"},{"location":"quickstart/#troubleshooting","title":"Troubleshooting","text":"<p>Test fails with permission errors: - Verify AWS credentials: <code>aws sts get-caller-identity</code> - Check IAM permissions for CloudFormation and S3</p> <p>Template validation errors: - Run <code>taskcat lint</code> to check configuration - Validate CloudFormation template syntax</p> <p>Resources not cleaned up: - Check CloudFormation console for failed deletions - Manually delete stuck stacks if needed</p>"},{"location":"quickstart/#learn-more","title":"Learn More","text":"<ul> <li>Configuration Guide - Advanced configuration options</li> <li>Dynamic Values - Runtime-evaluated parameters  </li> <li>Examples - Real-world usage scenarios</li> <li>Schema Reference - Complete configuration reference</li> </ul> <p>Congratulations! You've successfully run your first taskcat test. \ud83c\udf89</p>"},{"location":"schema/","title":"Schema Reference","text":"<p>The taskcat configuration schema defines the structure and validation rules for <code>.taskcat.yml</code> files. This reference provides a comprehensive overview of all available configuration options.</p>"},{"location":"schema/#overview","title":"Overview","text":"<p>The taskcat configuration file uses YAML format and supports three main sections:</p> <ul> <li><code>general</code> - Global configuration settings</li> <li><code>project</code> - Project-specific configuration  </li> <li><code>tests</code> - Individual test definitions</li> </ul>"},{"location":"schema/#configuration-structure","title":"Configuration Structure","text":"<pre><code># Basic structure\ngeneral:\n  # Global settings applied to all tests\n\nproject:\n  # Project-specific settings\n\ntests:\n  test-name:\n    # Individual test configuration\n</code></pre>"},{"location":"schema/#general-section","title":"General Section","text":"<p>Global configuration settings that apply to all tests unless overridden.</p>"},{"location":"schema/#properties","title":"Properties","text":"Property Type Description Example <code>artifact_regions</code> <code>array[string]</code> AWS regions where artifacts are copied <code>[\"us-east-1\", \"us-west-2\"]</code> <code>auth</code> <code>object</code> AWS authentication profiles by region <code>{\"default\": \"my-profile\"}</code> <code>parameters</code> <code>object</code> Global CloudFormation parameters <code>{\"InstanceType\": \"t3.micro\"}</code> <code>regions</code> <code>array[string]</code> Default AWS regions for testing <code>[\"us-east-1\", \"us-west-2\"]</code> <code>s3_bucket</code> <code>string</code> S3 bucket for artifacts (auto-generated if omitted) <code>\"my-taskcat-bucket\"</code> <code>s3_regional_buckets</code> <code>boolean</code> Enable regional auto-buckets <code>true</code> <code>tags</code> <code>object</code> CloudFormation stack tags <code>{\"Environment\": \"test\"}</code> <code>prehooks</code> <code>array[object]</code> Hooks executed before tests See Hooks <code>posthooks</code> <code>array[object]</code> Hooks executed after tests See Hooks"},{"location":"schema/#example","title":"Example","text":"<pre><code>general:\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n  parameters:\n    Environment: test\n    Owner: taskcat-team\n  tags:\n    Project: taskcat\n    CostCenter: \"1001\"\n  s3_regional_buckets: true\n</code></pre>"},{"location":"schema/#project-section","title":"Project Section","text":"<p>Project-specific configuration that applies to all tests within the project.</p>"},{"location":"schema/#properties_1","title":"Properties","text":"Property Type Description Default <code>name</code> <code>string</code> Project name (lowercase, hyphens only) - <code>owner</code> <code>string</code> Project owner email - <code>regions</code> <code>array[string]</code> Project default regions - <code>s3_bucket</code> <code>string</code> Project S3 bucket name Auto-generated <code>s3_object_acl</code> <code>string</code> S3 object ACL <code>\"private\"</code> <code>template</code> <code>string</code> Default template path - <code>parameters</code> <code>object</code> Project default parameters <code>{}</code> <code>auth</code> <code>object</code> Project authentication settings - <code>lambda_source_path</code> <code>string</code> Lambda source directory <code>\"lambda_functions/source\"</code> <code>lambda_zip_path</code> <code>string</code> Lambda zip output directory <code>\"lambda_functions/packages\"</code> <code>package_lambda</code> <code>boolean</code> Enable Lambda packaging <code>true</code> <code>build_submodules</code> <code>boolean</code> Build Lambda zips for submodules <code>true</code> <code>shorten_stack_name</code> <code>boolean</code> Use shortened stack names <code>false</code> <code>role_name</code> <code>string</code> IAM role for CloudFormation - <code>org_id</code> <code>string</code> AWS Organization ID - <code>az_blacklist</code> <code>array[string]</code> Excluded Availability Zone IDs <code>[]</code>"},{"location":"schema/#example_1","title":"Example","text":"<pre><code>project:\n  name: my-cloudformation-project\n  owner: developer@example.com\n  regions:\n    - us-east-1\n    - us-west-2\n  parameters:\n    ProjectName: my-project\n    Environment: production\n  lambda_source_path: functions/source\n  lambda_zip_path: functions/packages\n  package_lambda: true\n  shorten_stack_name: true\n</code></pre>"},{"location":"schema/#tests-section","title":"Tests Section","text":"<p>Individual test configurations. Each test can override project and global settings.</p>"},{"location":"schema/#properties_2","title":"Properties","text":"Property Type Description Required <code>template</code> <code>string</code> CloudFormation template path \u2705 <code>parameters</code> <code>object</code> Test-specific parameters - <code>regions</code> <code>array[string]</code> Test-specific regions - <code>auth</code> <code>object</code> Test-specific authentication - <code>artifact_regions</code> <code>array[string]</code> Test-specific artifact regions - <code>az_blacklist</code> <code>array[string]</code> Test-specific AZ exclusions -"},{"location":"schema/#example_2","title":"Example","text":"<pre><code>tests:\n  basic-test:\n    template: templates/basic.yaml\n    parameters:\n      InstanceType: t3.micro\n      KeyName: my-key-pair\n    regions:\n      - us-east-1\n      - us-west-2\n\n  advanced-test:\n    template: templates/advanced.yaml\n    parameters:\n      InstanceType: m5.large\n      DatabasePassword: $[taskcat_genpass_16S]\n      S3Bucket: $[taskcat_autobucket]\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n    auth:\n      us-east-1: production-profile\n      eu-west-1: europe-profile\n</code></pre>"},{"location":"schema/#parameter-types","title":"Parameter Types","text":"<p>CloudFormation parameters support multiple data types:</p>"},{"location":"schema/#string-parameters","title":"String Parameters","text":"<pre><code>parameters:\n  InstanceType: t3.micro\n  KeyName: my-key-pair\n</code></pre>"},{"location":"schema/#numeric-parameters","title":"Numeric Parameters","text":"<pre><code>parameters:\n  Port: 8080\n  MaxSize: 10\n</code></pre>"},{"location":"schema/#boolean-parameters","title":"Boolean Parameters","text":"<pre><code>parameters:\n  EnableLogging: true\n  CreateDatabase: false\n</code></pre>"},{"location":"schema/#array-parameters","title":"Array Parameters","text":"<pre><code>parameters:\n  SecurityGroups:\n    - sg-12345678\n    - sg-87654321\n  AvailabilityZones:\n    - us-east-1a\n    - us-east-1b\n</code></pre>"},{"location":"schema/#hooks","title":"Hooks","text":"<p>Hooks allow you to execute custom scripts before (<code>prehooks</code>) or after (<code>posthooks</code>) test execution.</p>"},{"location":"schema/#hook-structure","title":"Hook Structure","text":"<pre><code>prehooks:\n  - type: script\n    config:\n      command: ./scripts/setup.sh\n\nposthooks:\n  - type: script\n    config:\n      command: ./scripts/cleanup.sh\n</code></pre>"},{"location":"schema/#hook-types","title":"Hook Types","text":"Type Description Configuration <code>script</code> Execute shell script <code>command</code>: Script path or command"},{"location":"schema/#aws-regions","title":"AWS Regions","text":"<p>Valid AWS region formats follow the pattern: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code></p>"},{"location":"schema/#examples","title":"Examples","text":"<ul> <li><code>us-east-1</code> - US East (N. Virginia)</li> <li><code>us-west-2</code> - US West (Oregon)</li> <li><code>eu-west-1</code> - Europe (Ireland)</li> <li><code>ap-southeast-1</code> - Asia Pacific (Singapore)</li> </ul>"},{"location":"schema/#availability-zone-ids","title":"Availability Zone IDs","text":"<p>When using <code>az_blacklist</code>, specify Availability Zone IDs (not names):</p>"},{"location":"schema/#examples_1","title":"Examples","text":"<ul> <li><code>use1-az1</code> - US East 1 AZ 1</li> <li><code>usw2-az2</code> - US West 2 AZ 2</li> <li><code>euw1-az3</code> - EU West 1 AZ 3</li> </ul>"},{"location":"schema/#s3-object-acls","title":"S3 Object ACLs","text":"<p>Valid S3 object ACL values:</p> <ul> <li><code>private</code> (default)</li> <li><code>public-read</code></li> <li><code>public-read-write</code></li> <li><code>authenticated-read</code></li> <li><code>aws-exec-read</code></li> <li><code>bucket-owner-read</code></li> <li><code>bucket-owner-full-control</code></li> </ul>"},{"location":"schema/#complete-example","title":"Complete Example","text":"<pre><code># Complete taskcat configuration example\ngeneral:\n  regions:\n    - us-east-1\n    - us-west-2\n  parameters:\n    Environment: test\n  tags:\n    Project: taskcat-example\n    Owner: development-team\n\nproject:\n  name: example-project\n  owner: developer@example.com\n  s3_regional_buckets: true\n  package_lambda: true\n  lambda_source_path: functions/source\n  lambda_zip_path: functions/packages\n\ntests:\n  vpc-test:\n    template: templates/vpc.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n      AvailabilityZones: $[taskcat_genaz_2]\n    regions:\n      - us-east-1\n      - us-west-2\n\n  application-test:\n    template: templates/application.yaml\n    parameters:\n      InstanceType: t3.medium\n      DatabasePassword: $[taskcat_genpass_20S]\n      S3Bucket: $[taskcat_autobucket]\n      KeyName: $[taskcat_getkeypair]\n    regions:\n      - us-east-1\n    auth:\n      us-east-1: production-profile\n</code></pre>"},{"location":"schema/#validation","title":"Validation","text":"<p>The schema includes built-in validation for:</p> <ul> <li>Required fields - Ensures essential properties are present</li> <li>Data types - Validates correct data types for each property</li> <li>Format validation - Checks AWS region formats, naming patterns</li> <li>Enum validation - Validates against allowed values (e.g., S3 ACLs)</li> <li>Pattern matching - Ensures strings match required patterns</li> </ul>"},{"location":"schema/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive test names - Make test purposes clear</li> <li>Leverage inheritance - Define common settings in <code>general</code> or <code>project</code></li> <li>Use Dynamic Values - Employ <code>$[taskcat_*]</code> functions for flexibility</li> <li>Regional considerations - Test in multiple regions for global deployments</li> <li>Parameter validation - Ensure all required parameters are provided</li> <li>Resource cleanup - Use appropriate hooks for setup and teardown</li> </ol>"},{"location":"schema/#see-also","title":"See Also","text":"<ul> <li>Dynamic Values Reference - Complete guide to <code>$[taskcat_*]</code> functions</li> <li>Configuration Guide - Detailed configuration examples</li> <li>Parameter Overrides - Advanced parameter techniques</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions for taskcat configuration and execution problems.</p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#python-version-compatibility","title":"Python Version Compatibility","text":"<p>Problem: <code>taskcat requires Python 3.8 or higher</code></p> <p>Solution: <pre><code># Check Python version\npython --version\npython3 --version\n\n# Install Python 3.8+ if needed\n# macOS with Homebrew\nbrew install python@3.9\n\n# Ubuntu/Debian\nsudo apt update\nsudo apt install python3.9\n\n# Update pip and reinstall\npip3 install --upgrade pip\npip3 install taskcat\n</code></pre></p>"},{"location":"troubleshooting/#permission-denied-errors","title":"Permission Denied Errors","text":"<p>Problem: <code>Permission denied</code> during installation</p> <p>Solution: <pre><code># Install with user flag\npip install --user taskcat\n\n# Or use virtual environment\npython -m venv taskcat-env\nsource taskcat-env/bin/activate  # Linux/macOS\n# taskcat-env\\Scripts\\activate   # Windows\npip install taskcat\n</code></pre></p>"},{"location":"troubleshooting/#package-not-found","title":"Package Not Found","text":"<p>Problem: <code>No module named 'taskcat'</code></p> <p>Solution: <pre><code># Verify installation\npip list | grep taskcat\n\n# Reinstall if missing\npip uninstall taskcat\npip install taskcat\n\n# Check PATH\necho $PATH\nwhich taskcat\n</code></pre></p>"},{"location":"troubleshooting/#aws-configuration-issues","title":"AWS Configuration Issues","text":""},{"location":"troubleshooting/#credentials-not-found","title":"Credentials Not Found","text":"<p>Problem: <code>Unable to locate credentials</code></p> <p>Solution: <pre><code># Check AWS configuration\naws configure list\naws sts get-caller-identity\n\n# Configure credentials\naws configure\n\n# Or set environment variables\nexport AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_DEFAULT_REGION=us-east-1\n</code></pre></p>"},{"location":"troubleshooting/#insufficient-permissions","title":"Insufficient Permissions","text":"<p>Problem: <code>Access Denied</code> or <code>User is not authorized</code></p> <p>Solution: <pre><code>{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"cloudformation:*\",\n        \"s3:*\",\n        \"iam:ListRoles\",\n        \"iam:PassRole\",\n        \"ec2:Describe*\",\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"troubleshooting/#region-not-available","title":"Region Not Available","text":"<p>Problem: <code>Region not supported</code> or <code>Service not available</code></p> <p>Solution: <pre><code># Check available regions\ntests:\n  region-test:\n    template: template.yaml\n    regions:\n      - us-east-1      # Always available\n      - us-west-2      # Good alternative\n    # Remove unsupported regions\n</code></pre></p>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#yaml-syntax-errors","title":"YAML Syntax Errors","text":"<p>Problem: <code>YAML parsing error</code> or <code>Invalid configuration</code></p> <p>Solution: <pre><code># Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('.taskcat.yml'))\"\n\n# Use proper indentation (spaces, not tabs)\n# Check for special characters\n# Validate with taskcat lint\ntaskcat lint\n</code></pre></p>"},{"location":"troubleshooting/#template-not-found","title":"Template Not Found","text":"<p>Problem: <code>Template file not found</code></p> <p>Solution: <pre><code># Use correct relative paths\ntests:\n  my-test:\n    template: templates/app.yaml  # Relative to .taskcat.yml\n    # Not: /full/path/to/template.yaml\n</code></pre></p> <pre><code># Verify file exists\nls -la templates/\nls -la templates/app.yaml\n</code></pre>"},{"location":"troubleshooting/#parameter-validation-errors","title":"Parameter Validation Errors","text":"<p>Problem: <code>Parameter validation failed</code></p> <p>Solution: <pre><code># Check parameter types and constraints\nparameters:\n  InstanceType: t3.micro        # String\n  Port: 8080                    # Number\n  EnableLogging: true           # Boolean\n  SecurityGroups:               # Array\n    - sg-12345678\n    - sg-87654321\n</code></pre></p>"},{"location":"troubleshooting/#dynamic-values-issues","title":"Dynamic Values Issues","text":""},{"location":"troubleshooting/#dynamic-value-not-replaced","title":"Dynamic Value Not Replaced","text":"<p>Problem: <code>$[taskcat_genpass_16S]</code> appears in CloudFormation</p> <p>Solution: <pre><code># Check syntax - must be exact\nparameters:\n  Password: $[taskcat_genpass_16S]  # \u2705 Correct\n  # Password: $[taskcat_genpass_16s]  # \u274c Wrong case\n  # Password: ${taskcat_genpass_16S}  # \u274c Wrong brackets\n</code></pre></p>"},{"location":"troubleshooting/#aws-service-integration-fails","title":"AWS Service Integration Fails","text":"<p>Problem: <code>$[taskcat_ssm_/path]</code> returns error</p> <p>Solution: <pre><code># Verify parameter exists\naws ssm get-parameter --name /path/to/parameter\n\n# Check permissions\naws iam get-user\naws iam list-attached-user-policies --user-name your-username\n\n# Verify region\naws ssm get-parameter --name /path/to/parameter --region us-east-1\n</code></pre></p>"},{"location":"troubleshooting/#availability-zone-issues","title":"Availability Zone Issues","text":"<p>Problem: <code>Not enough availability zones</code></p> <p>Solution: <pre><code># Use fewer AZs or check region support\nparameters:\n  AvailabilityZones: $[taskcat_genaz_2]  # Instead of 3+\n\n# Or exclude problematic AZs\nproject:\n  az_blacklist:\n    - use1-az3  # Exclude specific AZ\n</code></pre></p>"},{"location":"troubleshooting/#cloudformation-issues","title":"CloudFormation Issues","text":""},{"location":"troubleshooting/#stack-creation-fails","title":"Stack Creation Fails","text":"<p>Problem: Stack fails to create resources</p> <p>Solution: <pre><code># Check CloudFormation events\naws cloudformation describe-stack-events --stack-name stack-name\n\n# Validate template\naws cloudformation validate-template --template-body file://template.yaml\n\n# Test with minimal parameters\ntaskcat test run --no-delete  # Keep resources for debugging\n</code></pre></p>"},{"location":"troubleshooting/#resource-limits-exceeded","title":"Resource Limits Exceeded","text":"<p>Problem: <code>LimitExceeded</code> errors</p> <p>Solution: <pre><code># Check service limits\naws service-quotas list-service-quotas --service-code ec2\n\n# Use different regions\n# Request limit increases\n# Use smaller instance types for testing\n</code></pre></p>"},{"location":"troubleshooting/#dependency-issues","title":"Dependency Issues","text":"<p>Problem: Resources created in wrong order</p> <p>Solution: <pre><code># Add explicit dependencies in template\nResources:\n  MyInstance:\n    Type: AWS::EC2::Instance\n    DependsOn: MySecurityGroup\n    Properties:\n      SecurityGroupIds:\n        - !Ref MySecurityGroup\n</code></pre></p>"},{"location":"troubleshooting/#test-execution-issues","title":"Test Execution Issues","text":""},{"location":"troubleshooting/#tests-hang-or-timeout","title":"Tests Hang or Timeout","text":"<p>Problem: Tests never complete</p> <p>Solution: <pre><code># Check CloudFormation console for stuck stacks\n# Increase timeout (if available)\n# Cancel and retry\ntaskcat test run --no-delete  # Debug mode\n\n# Clean up manually if needed\naws cloudformation delete-stack --stack-name stuck-stack\n</code></pre></p>"},{"location":"troubleshooting/#cleanup-failures","title":"Cleanup Failures","text":"<p>Problem: Resources not deleted after test</p> <p>Solution: <pre><code># Check for deletion protection\naws cloudformation describe-stacks --stack-name stack-name\n\n# Manual cleanup\naws cloudformation delete-stack --stack-name stack-name\n\n# Force delete if needed (be careful!)\naws s3 rm s3://bucket-name --recursive\naws s3 rb s3://bucket-name\n</code></pre></p>"},{"location":"troubleshooting/#multiple-region-failures","title":"Multiple Region Failures","text":"<p>Problem: Some regions fail, others succeed</p> <p>Solution: <pre><code># Test regions individually\ntests:\n  us-east-1-test:\n    template: template.yaml\n    regions:\n      - us-east-1\n\n  us-west-2-test:\n    template: template.yaml\n    regions:\n      - us-west-2\n\n# Check region-specific issues\n# Verify service availability\n# Check quotas per region\n</code></pre></p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-test-execution","title":"Slow Test Execution","text":"<p>Problem: Tests take too long</p> <p>Solution: <pre><code># Reduce regions for testing\nregions:\n  - us-east-1  # Single region for development\n\n# Use smaller resources\nparameters:\n  InstanceType: t3.nano  # Smallest for testing\n\n# Parallel execution (if supported)\n# Use simpler templates for initial testing\n</code></pre></p>"},{"location":"troubleshooting/#s3-upload-issues","title":"S3 Upload Issues","text":"<p>Problem: Template upload fails</p> <p>Solution: <pre><code># Check S3 permissions\naws s3 ls s3://your-bucket/\n\n# Verify bucket exists and is accessible\naws s3 mb s3://your-taskcat-bucket\n\n# Check file sizes (CloudFormation limits)\nls -lh templates/\n</code></pre></p>"},{"location":"troubleshooting/#debugging-techniques","title":"Debugging Techniques","text":""},{"location":"troubleshooting/#enable-verbose-logging","title":"Enable Verbose Logging","text":"<pre><code># Run with debug output\ntaskcat test run --debug\n\n# Check log files\nls -la taskcat_outputs/\ncat taskcat_outputs/taskcat.log\n</code></pre>"},{"location":"troubleshooting/#validate-before-testing","title":"Validate Before Testing","text":"<pre><code># Lint configuration\ntaskcat lint\n\n# Validate templates\naws cloudformation validate-template --template-body file://template.yaml\n\n# Test parameters\ntaskcat test run --no-delete\n</code></pre>"},{"location":"troubleshooting/#incremental-testing","title":"Incremental Testing","text":"<pre><code># Start simple\ntests:\n  minimal:\n    template: minimal-template.yaml\n    regions:\n      - us-east-1\n    parameters:\n      InstanceType: t3.nano\n\n# Add complexity gradually\ntests:\n  basic:\n    template: basic-template.yaml\n    # Add more parameters\n\n  advanced:\n    template: full-template.yaml\n    # Full configuration\n</code></pre>"},{"location":"troubleshooting/#common-error-messages","title":"Common Error Messages","text":""},{"location":"troubleshooting/#template-format-error","title":"<code>Template format error</code>","text":"<p>Cause: Invalid CloudFormation template syntax</p> <p>Solution: - Validate YAML/JSON syntax - Check CloudFormation template structure - Verify resource types and properties</p>"},{"location":"troubleshooting/#parameter-validation-failed","title":"<code>Parameter validation failed</code>","text":"<p>Cause: Parameter doesn't match template constraints</p> <p>Solution: - Check parameter types in template - Verify allowed values - Ensure required parameters are provided</p>"},{"location":"troubleshooting/#stack-already-exists","title":"<code>Stack already exists</code>","text":"<p>Cause: Previous test didn't clean up</p> <p>Solution: <pre><code># Delete existing stack\naws cloudformation delete-stack --stack-name existing-stack\n\n# Wait for deletion\naws cloudformation wait stack-delete-complete --stack-name existing-stack\n</code></pre></p>"},{"location":"troubleshooting/#bucket-already-exists","title":"<code>Bucket already exists</code>","text":"<p>Cause: S3 bucket name conflict</p> <p>Solution: <pre><code># Use dynamic bucket names\nparameters:\n  BucketName: $[taskcat_autobucket]  # Always unique\n  # Not: BucketName: my-static-bucket-name\n</code></pre></p>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#check-documentation","title":"Check Documentation","text":"<ul> <li>Configuration Guide</li> <li>Dynamic Values</li> <li>Schema Reference</li> </ul>"},{"location":"troubleshooting/#community-resources","title":"Community Resources","text":"<ul> <li>GitHub Issues</li> <li>AWS re:Post</li> <li>Stack Overflow</li> </ul>"},{"location":"troubleshooting/#debug-information-to-collect","title":"Debug Information to Collect","text":"<p>When reporting issues, include:</p> <pre><code># System information\ntaskcat --version\npython --version\naws --version\n\n# Configuration\ncat .taskcat.yml\n\n# Error logs\ncat taskcat_outputs/taskcat.log\n\n# CloudFormation events\naws cloudformation describe-stack-events --stack-name failing-stack\n</code></pre>"},{"location":"troubleshooting/#create-minimal-reproduction","title":"Create Minimal Reproduction","text":"<pre><code># Minimal .taskcat.yml that reproduces the issue\nproject:\n  name: debug-issue\n  regions:\n    - us-east-1\n\ntests:\n  reproduce-issue:\n    template: minimal-template.yaml\n    parameters:\n      TestParameter: test-value\n</code></pre> <p>This troubleshooting guide covers the most common issues encountered when using taskcat. For additional help, consult the community resources or create a detailed issue report with the debugging information outlined above.</p>"},{"location":"administrative/CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"administrative/CODE_OF_CONDUCT/#1-purpose","title":"1. Purpose","text":"<p>A primary goal of taskcat is to be inclusive to the largest number of contributors, with the most varied and diverse backgrounds possible. As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion (or lack thereof).</p> <p>This code of conduct outlines our expectations for all those who participate in our community, as well as the consequences for unacceptable behavior.</p> <p>We invite all those who participate in taskcat to help us create safe and positive experiences for everyone.</p>"},{"location":"administrative/CODE_OF_CONDUCT/#2-open-source-citizenship","title":"2. Open Source Citizenship","text":"<p>A supplemental goal of this Code of Conduct is to increase open source citizenship by encouraging participants to recognize and strengthen the relationships between our actions and their effects on our community.</p> <p>Communities mirror the societies in which they exist and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.</p> <p>If you see someone who is making an extra effort to ensure our community is welcoming, friendly, and encourages all participants to contribute to the fullest extent, we want to know.</p>"},{"location":"administrative/CODE_OF_CONDUCT/#3-expected-behavior","title":"3. Expected Behavior","text":"<p>The following behaviors are expected and requested of all community members:</p> <ul> <li>Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this community.</li> <li>Exercise consideration and respect in your speech and actions.</li> <li>Attempt collaboration before conflict.</li> <li>Refrain from demeaning, discriminatory, or harassing behavior and speech.</li> <li>Be mindful of your surroundings and of your fellow participants. Alert community leaders if you notice a dangerous situation, someone in distress, or violations of this Code of Conduct, even if they seem inconsequential.</li> <li>Remember that community event venues may be shared with members of the public; please be respectful to all patrons of these locations.</li> </ul>"},{"location":"administrative/CODE_OF_CONDUCT/#4-unacceptable-behavior","title":"4. Unacceptable Behavior","text":"<p>The following behaviors are considered harassment and are unacceptable within our community:</p> <ul> <li>Violence, threats of violence or violent language directed against another person.</li> <li>Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language.</li> <li>Posting or displaying sexually explicit or violent material.</li> <li>Posting or threatening to post other people\u2019s personally identifying information (\"doxing\").</li> <li>Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability.</li> <li>Inappropriate photography or recording.</li> <li>Inappropriate physical contact. You should have someone\u2019s consent before touching them.</li> <li>Unwelcome sexual attention. This includes, sexualized comments or jokes; inappropriate touching, groping, and unwelcomed sexual advances.</li> <li>Deliberate intimidation, stalking or following (online or in person).</li> <li>Advocating for, or encouraging, any of the above behavior.</li> <li>Sustained disruption of community events, including talks and presentations.</li> </ul>"},{"location":"administrative/CODE_OF_CONDUCT/#5-consequences-of-unacceptable-behavior","title":"5. Consequences of Unacceptable Behavior","text":"<p>Unacceptable behavior from any community member, including sponsors and those with decision-making authority, will not be tolerated.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately.</p> <p>If a community member engages in unacceptable behavior, the community organizers may take any action they deem appropriate, up to and including a temporary ban or permanent expulsion from the community without warning (and without refund in the case of a paid event).</p>"},{"location":"administrative/CODE_OF_CONDUCT/#6-reporting-guidelines","title":"6. Reporting Guidelines","text":"<p>If you are subject to or witness unacceptable behavior, or have any other concerns, please notify a community organizer as soon as possible. quickstart@amazon.com.</p> <p>Link to reporting guidelines: codeofconduct@amazon.com</p> <p>Additionally, community organizers are available to help community members engage with local law enforcement or to otherwise help those experiencing unacceptable behavior feel safe. In the context of in-person events, organizers will also provide escorts as desired by the person experiencing distress.</p>"},{"location":"administrative/CODE_OF_CONDUCT/#7-addressing-grievances","title":"7. Addressing Grievances","text":"<p>If you feel you have been falsely or unfairly accused of violating this Code of Conduct, you should notify AWS Quickstart with a concise description of your grievance. Your grievance will be handled in accordance with our existing governing policies.</p> <p>Policy</p>"},{"location":"administrative/CODE_OF_CONDUCT/#8-scope","title":"8. Scope","text":"<p>We expect all community participants (contributors, paid or otherwise; sponsors; and other guests) to abide by this Code of Conduct in all community venues\u2013online and in-person\u2013as well as in all one-on-one communications pertaining to community business.</p> <p>This code of conduct and its related procedures also applies to unacceptable behavior occurring outside the scope of community activities when such behavior has the potential to adversely affect the safety and well-being of community members.</p>"},{"location":"administrative/CODE_OF_CONDUCT/#9-contact-info","title":"9. Contact info","text":"<p>quickstart@amazon.com</p>"},{"location":"administrative/CODE_OF_CONDUCT/#10-license-and-attribution","title":"10. License and attribution","text":"<p>This Code of Conduct is distributed under a Creative Commons Attribution-ShareAlike license.</p> <p>Portions of text derived from the Django Code of Conduct and the Geek Feminism Anti-Harassment Policy.</p> <p>Retrieved on November 22, 2016 from http://citizencodeofconduct.org/</p>"},{"location":"examples/","title":"Examples","text":"<p>Explore real-world taskcat configurations and learn from practical implementations. These examples demonstrate best practices, advanced features, and common use cases.</p>"},{"location":"examples/#quick-reference","title":"Quick Reference","text":"\ud83d\ude80 Basic Usage <p>Simple configurations to get you started with taskcat testing.</p> View Examples \u26a1 Advanced Scenarios <p>Complex multi-tier applications and enterprise-grade configurations.</p> Explore Advanced"},{"location":"examples/#featured-examples","title":"Featured Examples","text":""},{"location":"examples/#multi-region-web-application","title":"Multi-Region Web Application","text":"<pre><code>project:\n  name: web-application\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\nglobal:\n  parameters:\n    ProjectName: $[taskcat_project_name]\n    Environment: production\n\ntests:\n  vpc-infrastructure:\n    template: templates/vpc.yaml\n    parameters:\n      VpcName: $[taskcat_project_name]-vpc-$[taskcat_current_region]\n      AvailabilityZones: $[taskcat_genaz_3]\n\n  web-tier:\n    template: templates/web-tier.yaml\n    parameters:\n      ApplicationName: $[taskcat_project_name]-web\n      InstanceType: t3.medium\n      S3Bucket: $[taskcat_autobucket]\n      SSLCertificate: $[taskcat_ssm_/ssl/certificate/arn]\n</code></pre>"},{"location":"examples/#serverless-application","title":"Serverless Application","text":"<pre><code>project:\n  name: serverless-api\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  api-gateway:\n    template: templates/api-gateway.yaml\n    parameters:\n      ApiName: $[taskcat_project_name]-api-$[taskcat_current_region]\n      StageName: $[taskcat_test_name]\n\n  lambda-functions:\n    template: templates/lambda.yaml\n    parameters:\n      FunctionName: $[taskcat_project_name]-function\n      Runtime: python3.9\n      S3Bucket: $[taskcat_autobucket]\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n</code></pre>"},{"location":"examples/#database-cluster","title":"Database Cluster","text":"<pre><code>project:\n  name: database-cluster\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  aurora-cluster:\n    template: templates/aurora.yaml\n    parameters:\n      ClusterIdentifier: $[taskcat_project_name]-cluster-$[taskcat_genuuid]\n      MasterUsername: admin\n      MasterUserPassword: $[taskcat_genpass_32S]\n      DatabaseName: $[taskcat_project_name]\n      BackupRetentionPeriod: 7\n      PreferredBackupWindow: \"03:00-04:00\"\n      PreferredMaintenanceWindow: \"sun:04:00-sun:05:00\"\n</code></pre>"},{"location":"examples/#browse-all-examples","title":"Browse All Examples","text":"<ul> <li>Basic Usage - Simple, straightforward examples</li> <li>Advanced Scenarios - Complex, production-ready configurations</li> </ul>"},{"location":"examples/#contributing-examples","title":"Contributing Examples","text":"<p>Have a great taskcat configuration to share? We'd love to include it! Examples should:</p> <ul> <li>\u2705 Follow taskcat best practices</li> <li>\u2705 Include clear documentation</li> <li>\u2705 Demonstrate real-world use cases</li> <li>\u2705 Use Dynamic Values appropriately</li> <li>\u2705 Be production-ready</li> </ul> <p>Submit your examples via GitHub Issues or Pull Requests.</p>"},{"location":"examples/advanced/","title":"Advanced Examples","text":"<p>This page covers more complex taskcat configurations and use cases.</p>"},{"location":"examples/advanced/#multi-test-configuration","title":"Multi-Test Configuration","text":"<pre><code># .taskcat.yml\nproject:\n  name: enterprise-app\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\nglobal:\n  parameters:\n    Environment: testing\n    Owner: devops-team\n\ntests:\n  infrastructure:\n    template: templates/infrastructure.yaml\n    parameters:\n      VpcCidr: 10.0.0.0/16\n      AvailabilityZones: $[taskcat_genaz_3]\n\n  application:\n    template: templates/application.yaml\n    parameters:\n      InstanceType: t3.medium\n      DatabasePassword: $[taskcat_genpass_16S]\n\n  monitoring:\n    template: templates/monitoring.yaml\n    regions:\n      - us-east-1  # Only deploy monitoring in primary region\n</code></pre>"},{"location":"examples/advanced/#using-aws-service-integration","title":"Using AWS Service Integration","text":"<pre><code>tests:\n  app-with-secrets:\n    template: templates/app.yaml\n    parameters:\n      # Get AMI ID from SSM Parameter Store\n      LatestAMI: $[taskcat_ssm_/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]\n\n      # Get database credentials from Secrets Manager\n      DatabaseCredentials: $[taskcat_secretsmanager_prod/database/master]\n\n      # Use current region for region-specific resources\n      DeploymentRegion: $[taskcat_current_region]\n\n      # Generate unique identifiers\n      UniqueId: $[taskcat_genuuid]\n</code></pre>"},{"location":"examples/advanced/#parameter-validation","title":"Parameter Validation","text":"<pre><code>tests:\n  parameter-validation:\n    template: templates/app.yaml\n    parameters:\n      # Password with confirmation\n      AdminPassword: $[taskcat_genpass_12S]\n      ConfirmPassword: $[taskcat_getval_AdminPassword]\n\n      # Consistent naming\n      ProjectName: $[taskcat_project_name]\n      TestName: $[taskcat_test_name]\n</code></pre>"},{"location":"examples/advanced/#custom-authentication","title":"Custom Authentication","text":"<pre><code>project:\n  name: multi-account-test\n  auth:\n    us-east-1: production-profile\n    us-west-2: staging-profile\n    eu-west-1: development-profile\n    default: default-profile\n</code></pre>"},{"location":"examples/basic/","title":"Basic Usage Examples","text":"<p>This page provides simple, practical examples to help you get started with taskcat.</p>"},{"location":"examples/basic/#simple-s3-bucket-test","title":"Simple S3 Bucket Test","text":"<pre><code># .taskcat.yml\nproject:\n  name: simple-s3-test\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  s3-bucket:\n    template: templates/s3-bucket.yaml\n    parameters:\n      BucketName: $[taskcat_autobucket]\n</code></pre> <pre><code># templates/s3-bucket.yaml\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Simple S3 bucket\n\nParameters:\n  BucketName:\n    Type: String\n    Description: Name of the S3 bucket\n\nResources:\n  TestBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Ref BucketName\n\nOutputs:\n  BucketName:\n    Value: !Ref TestBucket\n    Description: Name of the created bucket\n</code></pre>"},{"location":"examples/basic/#multi-az-vpc-test","title":"Multi-AZ VPC Test","text":"<pre><code># .taskcat.yml\nproject:\n  name: vpc-test\n  regions:\n    - us-east-1\n    - eu-west-1\n\ntests:\n  vpc-multi-az:\n    template: templates/vpc.yaml\n    parameters:\n      AvailabilityZones: $[taskcat_genaz_2]\n      VpcCidr: 10.0.0.0/16\n</code></pre>"},{"location":"examples/basic/#running-the-tests","title":"Running the Tests","text":"<pre><code># Run all tests\ntaskcat test run\n\n# Run specific test\ntaskcat test run --test-names s3-bucket\n\n# Run with custom output directory\ntaskcat test run --output-directory ./my-results\n</code></pre>"},{"location":"getting-started/","title":"Getting Started with taskcat","text":"<p>Welcome to taskcat! This section will get you up and running with AWS CloudFormation template testing in minutes.</p>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":"\ud83d\udce6 Installation <p>Multiple installation methods including pip, Docker, and from source.</p> Install taskcat \ud83d\ude80 Quick Start <p>Run your first test in under 5 minutes with our step-by-step guide.</p> Quick Start \u2699\ufe0f Configuration <p>Master taskcat configuration for advanced testing scenarios.</p> Configure"},{"location":"getting-started/#learning-path","title":"Learning Path","text":"<p>Follow this recommended path to master taskcat:</p>"},{"location":"getting-started/#1-installation-5-minutes","title":"1. Installation (5 minutes)","text":"<p>Get taskcat installed on your system with your preferred method.</p>"},{"location":"getting-started/#2-quick-start-10-minutes","title":"2. Quick Start (10 minutes)","text":"<p>Create and run your first test to understand the basics.</p>"},{"location":"getting-started/#3-configuration-20-minutes","title":"3. Configuration (20 minutes)","text":"<p>Learn about advanced configuration options and best practices.</p>"},{"location":"getting-started/#4-dynamic-values-15-minutes","title":"4. Dynamic Values (15 minutes)","text":"<p>Master runtime-evaluated parameters for flexible testing.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>AWS Account with appropriate permissions</li> <li>Python 3.8+ installed on your system</li> <li>AWS CLI configured with credentials</li> <li>Basic CloudFormation knowledge</li> </ul>"},{"location":"getting-started/#quick-installation","title":"Quick Installation","text":"<pre><code># Install taskcat via pip\npip install taskcat\n\n# Verify installation\ntaskcat --version\n\n# Get help\ntaskcat --help\n</code></pre>"},{"location":"getting-started/#your-first-test","title":"Your First Test","text":"<pre><code># .taskcat.yml\nproject:\n  name: my-first-test\n  regions:\n    - us-east-1\n\ntests:\n  basic:\n    template: template.yaml\n    parameters:\n      BucketName: $[taskcat_autobucket]\n</code></pre> <pre><code># Run the test\ntaskcat test run\n</code></pre>"},{"location":"getting-started/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcda Documentation - Comprehensive guides</li> <li>\ud83d\udcac Community - Get help from other users</li> <li>\ud83d\udc1b Issues - Report bugs or request features</li> </ul> <p>Ready to begin? Start with Installation!</p>"},{"location":"getting-started/configuration/","title":"Configuration Guide","text":"<p>Learn how to configure taskcat for your specific testing needs with comprehensive configuration options.</p>"},{"location":"getting-started/configuration/#configuration-file-structure","title":"Configuration File Structure","text":"<p>taskcat uses YAML configuration files (<code>.taskcat.yml</code>) with this structure:</p> <pre><code>project:\n  name: string                    # Project name\n  regions: [list]                 # AWS regions to test\n  s3_bucket: string              # Optional: Custom S3 bucket\n  s3_key_prefix: string          # Optional: S3 key prefix\n\ntests:\n  test-name:                     # Test identifier\n    template: string             # Path to CloudFormation template\n    parameters: {}               # Parameter overrides\n    regions: [list]              # Optional: Test-specific regions\n\nglobal:\n  parameters: {}                 # Global parameter overrides\n</code></pre>"},{"location":"getting-started/configuration/#project-configuration","title":"Project Configuration","text":""},{"location":"getting-started/configuration/#basic-project-settings","title":"Basic Project Settings","text":"<pre><code>project:\n  name: my-cloudformation-project\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n</code></pre>"},{"location":"getting-started/configuration/#advanced-project-settings","title":"Advanced Project Settings","text":"<pre><code>project:\n  name: enterprise-infrastructure\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n    - ap-southeast-1\n  s3_bucket: my-custom-taskcat-bucket\n  s3_key_prefix: testing/templates/\n  tags:\n    Environment: Testing\n    Project: taskcat\n    Owner: DevOps-Team\n</code></pre>"},{"location":"getting-started/configuration/#test-configuration","title":"Test Configuration","text":""},{"location":"getting-started/configuration/#single-test","title":"Single Test","text":"<pre><code>tests:\n  basic-test:\n    template: templates/main.yaml\n    parameters:\n      InstanceType: t3.micro\n      Environment: test\n</code></pre>"},{"location":"getting-started/configuration/#multiple-tests","title":"Multiple Tests","text":"<pre><code>tests:\n  small-deployment:\n    template: templates/small.yaml\n    parameters:\n      InstanceType: t3.micro\n\n  large-deployment:\n    template: templates/large.yaml\n    parameters:\n      InstanceType: m5.xlarge\n\n  multi-az-test:\n    template: templates/multi-az.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n    parameters:\n      AvailabilityZones: $[taskcat_genaz_3]\n</code></pre>"},{"location":"getting-started/configuration/#parameter-management","title":"Parameter Management","text":""},{"location":"getting-started/configuration/#global-parameters","title":"Global Parameters","text":"<p>Parameters that apply to all tests:</p> <pre><code>global:\n  parameters:\n    KeyPairName: my-keypair\n    VpcCidr: 10.0.0.0/16\n    Environment: testing\n\ntests:\n  test1:\n    template: templates/app.yaml\n    # Inherits global parameters\n  test2:\n    template: templates/db.yaml\n    # Also inherits global parameters\n</code></pre>"},{"location":"getting-started/configuration/#test-specific-parameters","title":"Test-Specific Parameters","text":"<p>Override global parameters for specific tests:</p> <pre><code>global:\n  parameters:\n    Environment: testing\n    InstanceType: t3.micro\n\ntests:\n  production-test:\n    template: templates/app.yaml\n    parameters:\n      Environment: production    # Overrides global\n      InstanceType: m5.large    # Overrides global\n</code></pre>"},{"location":"getting-started/configuration/#pseudo-parameters","title":"Pseudo-Parameters","text":"<p>Use dynamic parameters for flexible testing:</p> <pre><code>tests:\n  dynamic-test:\n    template: templates/app.yaml\n    parameters:\n      # Generate random values\n      DatabasePassword: $[taskcat_genpass_16S]\n      S3Bucket: $[taskcat_autobucket]\n\n      # Use current context\n      Region: $[taskcat_current_region]\n      ProjectName: $[taskcat_project_name]\n\n      # Generate availability zones\n      AvailabilityZones: $[taskcat_genaz_2]\n\n      # Reference other parameters\n      PasswordConfirm: $[taskcat_getval_DatabasePassword]\n</code></pre>"},{"location":"getting-started/configuration/#region-configuration","title":"Region Configuration","text":""},{"location":"getting-started/configuration/#project-level-regions","title":"Project-Level Regions","text":"<p>All tests use these regions by default:</p> <pre><code>project:\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n</code></pre>"},{"location":"getting-started/configuration/#test-specific-regions","title":"Test-Specific Regions","text":"<p>Override regions for specific tests:</p> <pre><code>project:\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  global-test:\n    template: templates/global.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n      - eu-west-1\n      - ap-southeast-1\n\n  us-only-test:\n    template: templates/us-specific.yaml\n    regions:\n      - us-east-1\n      - us-west-2\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#custom-s3-configuration","title":"Custom S3 Configuration","text":"<pre><code>project:\n  name: my-project\n  s3_bucket: my-custom-bucket-${AWS::Region}\n  s3_key_prefix: taskcat-tests/\n  s3_object_acl: private\n</code></pre>"},{"location":"getting-started/configuration/#authentication-configuration","title":"Authentication Configuration","text":"<pre><code>project:\n  auth:\n    us-east-1: profile1\n    us-west-2: profile2\n    default: default-profile\n</code></pre>"},{"location":"getting-started/configuration/#template-processing","title":"Template Processing","text":"<pre><code>project:\n  template:\n    transforms:\n      - AWS::Serverless-2016-10-31\n    capabilities:\n      - CAPABILITY_IAM\n      - CAPABILITY_NAMED_IAM\n</code></pre>"},{"location":"getting-started/configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"getting-started/configuration/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code>project:\n  name: microservices-platform\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\nglobal:\n  parameters:\n    Environment: testing\n    VpcCidr: 10.0.0.0/16\n\ntests:\n  vpc-infrastructure:\n    template: templates/vpc.yaml\n\n  application-tier:\n    template: templates/app-tier.yaml\n    parameters:\n      InstanceType: t3.medium\n\n  database-tier:\n    template: templates/db-tier.yaml\n    parameters:\n      DBInstanceClass: db.t3.micro\n\n  monitoring:\n    template: templates/monitoring.yaml\n    regions:\n      - us-east-1  # Only deploy monitoring in primary region\n</code></pre>"},{"location":"getting-started/configuration/#multi-environment-testing","title":"Multi-Environment Testing","text":"<pre><code>project:\n  name: multi-env-app\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  development:\n    template: templates/app.yaml\n    parameters:\n      Environment: dev\n      InstanceType: t3.micro\n\n  staging:\n    template: templates/app.yaml\n    parameters:\n      Environment: staging\n      InstanceType: t3.small\n\n  production:\n    template: templates/app.yaml\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n</code></pre>"},{"location":"getting-started/configuration/#best-practices","title":"Best Practices","text":""},{"location":"getting-started/configuration/#1-use-meaningful-names","title":"1. Use Meaningful Names","text":"<pre><code>tests:\n  vpc-with-public-subnets:     # \u2705 Descriptive\n    template: templates/vpc.yaml\n\n  test1:                       # \u274c Not descriptive\n    template: templates/vpc.yaml\n</code></pre>"},{"location":"getting-started/configuration/#2-organize-parameters","title":"2. Organize Parameters","text":"<pre><code>global:\n  parameters:\n    # Common across all tests\n    Environment: testing\n    Owner: devops-team\n\ntests:\n  web-tier:\n    parameters:\n      # Specific to this test\n      InstanceType: t3.medium\n      MinSize: 2\n      MaxSize: 10\n</code></pre>"},{"location":"getting-started/configuration/#3-use-pseudo-parameters","title":"3. Use Pseudo-Parameters","text":"<pre><code>parameters:\n  # \u2705 Dynamic and flexible\n  DatabasePassword: $[taskcat_genpass_16S]\n  S3Bucket: $[taskcat_autobucket]\n\n  # \u274c Static and potentially conflicting\n  DatabasePassword: hardcoded-password\n  S3Bucket: my-static-bucket-name\n</code></pre>"},{"location":"getting-started/configuration/#validation","title":"Validation","text":"<p>Validate your configuration:</p> <pre><code># Check configuration syntax\ntaskcat test run --dry-run\n\n# Lint CloudFormation templates\ntaskcat lint\n\n# Generate configuration schema\ntaskcat schema\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Dynamic Values Guide</li> <li>Parameter Overrides</li> <li>Advanced Examples</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Get taskcat installed and running on your system with our comprehensive installation guide.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing taskcat, ensure you have:</p> <ul> <li>Python 3.8+: taskcat requires Python 3.8 or higher</li> <li>AWS CLI: Configured with appropriate credentials</li> <li>Git: For cloning repositories and version control</li> <li>Sufficient AWS Permissions: See Required Permissions</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-pypi-recommended","title":"Method 1: PyPI (Recommended)","text":"<p>The easiest way to install taskcat is via PyPI:</p> <pre><code>pip install taskcat\n</code></pre> <p>For the latest development version:</p> <pre><code>pip install --upgrade taskcat\n</code></pre>"},{"location":"getting-started/installation/#method-2-from-source","title":"Method 2: From Source","text":"<p>For development or the latest features:</p> <pre><code>git clone https://github.com/aws-ia/taskcat.git\ncd taskcat\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#method-3-docker","title":"Method 3: Docker","text":"<p>Use our pre-built Docker images:</p> <pre><code>docker pull public.ecr.aws/aws-ia/taskcat:latest\ndocker run -it --rm -v $(pwd):/workspace taskcat --help\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>Verify your installation:</p> <pre><code>taskcat --version\ntaskcat --help\n</code></pre>"},{"location":"getting-started/installation/#aws-configuration","title":"AWS Configuration","text":""},{"location":"getting-started/installation/#configure-aws-credentials","title":"Configure AWS Credentials","text":"<p>taskcat uses AWS credentials from your environment. Configure using:</p>"},{"location":"getting-started/installation/#aws-cli","title":"AWS CLI","text":"<pre><code>aws configure\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<pre><code>export AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_DEFAULT_REGION=us-east-1\n</code></pre>"},{"location":"getting-started/installation/#iam-roles-recommended-for-ec2lambda","title":"IAM Roles (Recommended for EC2/Lambda)","text":"<p>taskcat automatically uses IAM roles when running on AWS services.</p>"},{"location":"getting-started/installation/#required-permissions","title":"Required Permissions","text":"<p>taskcat requires the following AWS permissions:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:*\",\n                \"s3:*\",\n                \"iam:*\",\n                \"ec2:Describe*\",\n                \"ssm:GetParameter*\",\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, continue to the Quick Start Guide to run your first test.</p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Python version too old: <pre><code>python3 --version  # Should be 3.8+\n</code></pre></p> <p>Permission denied: <pre><code>pip install --user taskcat\n</code></pre></p> <p>AWS credentials not found: <pre><code>aws configure list\n</code></pre></p> <p>For more help, see our Troubleshooting Guide.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with taskcat in just a few minutes! This guide will walk you through creating and running your first taskcat test.</p>"},{"location":"getting-started/quickstart/#step-1-create-a-simple-template","title":"Step 1: Create a Simple Template","text":"<p>First, let's create a basic CloudFormation template to test:</p> <pre><code># templates/simple-s3.yaml\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Simple S3 bucket for taskcat testing'\n\nParameters:\n  BucketName:\n    Type: String\n    Description: Name for the S3 bucket\n    Default: my-test-bucket\n\nResources:\n  TestBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub \"${BucketName}-${AWS::Region}-${AWS::AccountId}\"\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: true\n        BlockPublicPolicy: true\n        IgnorePublicAcls: true\n        RestrictPublicBuckets: true\n\nOutputs:\n  BucketName:\n    Description: Name of the created bucket\n    Value: !Ref TestBucket\n    Export:\n      Name: !Sub \"${AWS::StackName}-BucketName\"\n</code></pre>"},{"location":"getting-started/quickstart/#step-2-create-taskcat-configuration","title":"Step 2: Create taskcat Configuration","text":"<p>Create a taskcat configuration file:</p> <pre><code># .taskcat.yml\nproject:\n  name: my-first-taskcat-test\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  simple-test:\n    template: templates/simple-s3.yaml\n    parameters:\n      BucketName: $[taskcat_random-string]\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-run-your-first-test","title":"Step 3: Run Your First Test","text":"<p>Execute the test:</p> <pre><code>taskcat test run\n</code></pre> <p>taskcat will: 1. \ud83d\ude80 Deploy your template in specified regions 2. \u2705 Validate the deployment 3. \ud83d\udcca Generate a detailed report 4. \ud83e\uddf9 Clean up resources</p>"},{"location":"getting-started/quickstart/#step-4-view-results","title":"Step 4: View Results","text":"<p>Check the results in the <code>taskcat_outputs</code> directory:</p> <pre><code>ls taskcat_outputs/\n# index.html - Main report\n# logs/ - Detailed logs\n# templates/ - Processed templates\n</code></pre> <p>Open <code>taskcat_outputs/index.html</code> in your browser to see the visual report.</p>"},{"location":"getting-started/quickstart/#what-just-happened","title":"What Just Happened?","text":"<p>taskcat performed these actions:</p> <ol> <li>Template Processing: Replaced pseudo-parameters with actual values</li> <li>Multi-Region Deployment: Created CloudFormation stacks in us-east-1 and us-west-2</li> <li>Validation: Verified successful deployment and resource creation</li> <li>Reporting: Generated comprehensive HTML and JSON reports</li> <li>Cleanup: Automatically deleted test resources</li> </ol>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<p>Now that you've run your first test, explore:</p> <ul> <li>Configuration Guide - Advanced configuration options</li> <li>Dynamic Values - Runtime-evaluated parameters and AWS environment integration</li> <li>Examples - Real-world usage scenarios</li> </ul>"},{"location":"getting-started/quickstart/#common-next-actions","title":"Common Next Actions","text":""},{"location":"getting-started/quickstart/#test-multiple-templates","title":"Test Multiple Templates","text":"<pre><code>tests:\n  test1:\n    template: templates/vpc.yaml\n  test2:\n    template: templates/ec2.yaml\n    parameters:\n      InstanceType: t3.micro\n</code></pre>"},{"location":"getting-started/quickstart/#add-parameter-overrides","title":"Add Parameter Overrides","text":"<pre><code>tests:\n  production-test:\n    template: templates/app.yaml\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n</code></pre>"},{"location":"getting-started/quickstart/#customize-regions","title":"Customize Regions","text":"<pre><code>project:\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n    - ap-southeast-1\n</code></pre> <p>Congratulations! You've successfully run your first taskcat test. \ud83c\udf89</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>taskcat<ul> <li>_amiupdater</li> <li>_cfn<ul> <li>_log_stack_events</li> <li>stack</li> <li>stack_url_helper</li> <li>template</li> <li>threaded</li> </ul> </li> <li>_cfn_lint</li> <li>_cli</li> <li>_cli_core</li> <li>_cli_modules<ul> <li>config</li> <li>delete</li> <li>deploy</li> <li>generate_config</li> <li>generate_iam_policy</li> <li>lint</li> <li>list</li> <li>package</li> <li>package_single</li> <li>test</li> <li>update_ami</li> <li>upload</li> </ul> </li> <li>_client_factory</li> <li>_common_utils</li> <li>_config</li> <li>_dataclasses</li> <li>_generate_reports</li> <li>_lambda_build</li> <li>_legacy_config</li> <li>_logger</li> <li>_name_generator</li> <li>_s3_stage</li> <li>_s3_sync</li> <li>_template_params</li> <li>_tui</li> <li>exceptions</li> <li>iam_policy<ul> <li>policy</li> <li>tools</li> </ul> </li> <li>local_zones</li> <li>project_config<ul> <li>config</li> <li>tools</li> </ul> </li> <li>regions_to_partitions</li> <li>testing<ul> <li>_abstract_test</li> <li>_cfn_test</li> <li>_hooks</li> <li>_lint_test</li> <li>_unit_test</li> <li>base_test</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/taskcat/","title":"Index","text":""},{"location":"reference/taskcat/#taskcat","title":"<code>taskcat</code>","text":"<p>taskcat python module</p>"},{"location":"reference/taskcat/#taskcat.Template","title":"<code>Template(template_path, project_root='', url='', s3_key_prefix='', template_cache=tcat_template_cache)</code>","text":"Source code in <code>taskcat/_cfn/template.py</code> <pre><code>def __init__(\n    self,\n    template_path: Union[str, Path],\n    project_root: Union[str, Path] = \"\",\n    url: str = \"\",\n    s3_key_prefix: str = \"\",\n    template_cache: TemplateCache = tcat_template_cache,\n):\n    self.template_cache = template_cache\n    self.template_path: Path = Path(template_path).expanduser().resolve()\n    self.template = self.template_cache.get(str(self.template_path))\n    with open(template_path, \"r\", encoding=\"utf-8\") as file_handle:\n        self.raw_template = file_handle.read()\n    project_root = (\n        project_root if project_root else self.template_path.parent.parent\n    )\n    self.project_root = Path(project_root).expanduser().resolve()\n    self.url = url\n    self._s3_key_prefix = s3_key_prefix\n    self.children: List[Template] = []\n    self._find_children()\n</code></pre>"},{"location":"reference/taskcat/#taskcat.Template.write","title":"<code>write()</code>","text":"<p>writes raw_template back to file, and reloads decoded template, useful if the template has been modified</p> Source code in <code>taskcat/_cfn/template.py</code> <pre><code>def write(self):\n    \"\"\"writes raw_template back to file, and reloads decoded template, useful if\n    the template has been modified\"\"\"\n    with open(str(self.template_path), \"w\", encoding=\"utf-8\") as file_handle:\n        file_handle.write(self.raw_template)\n    self.template = cfnlint.decode.cfn_yaml.load(self.template_path)\n    self._find_children()\n</code></pre>"},{"location":"reference/taskcat/#taskcat.main","title":"<code>main(cli_core_class=CliCore, exit_func=exit_with_code)</code>","text":"<p>Main entry point for the TaskCat CLI application.</p> <p>This function orchestrates the entire CLI workflow including: - Signal handling setup for graceful interruption - Logging configuration - Command-line argument parsing - CLI module initialization and execution - Error handling and reporting</p> <p>Parameters:</p> Name Type Description Default <code>cli_core_class</code> <code>class</code> <p>CLI core class to use for parsing and execution.                             Defaults to CliCore. Used for dependency injection                             in testing.</p> <code>CliCore</code> <code>exit_func</code> <code>callable</code> <p>Function to call for program exit.                            Defaults to exit_with_code. Used for testing.</p> <code>exit_with_code</code> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>For known TaskCat-specific errors</p> <code>Exception</code> <p>For unexpected errors during execution</p> Source code in <code>taskcat/_cli.py</code> <pre><code>def main(cli_core_class=CliCore, exit_func=exit_with_code):\n    \"\"\"\n    Main entry point for the TaskCat CLI application.\n\n    This function orchestrates the entire CLI workflow including:\n    - Signal handling setup for graceful interruption\n    - Logging configuration\n    - Command-line argument parsing\n    - CLI module initialization and execution\n    - Error handling and reporting\n\n    Args:\n        cli_core_class (class, optional): CLI core class to use for parsing and execution.\n                                        Defaults to CliCore. Used for dependency injection\n                                        in testing.\n        exit_func (callable, optional): Function to call for program exit. \n                                      Defaults to exit_with_code. Used for testing.\n\n    Raises:\n        TaskCatException: For known TaskCat-specific errors\n        Exception: For unexpected errors during execution\n    \"\"\"\n    # Set up signal handler for graceful interruption (Ctrl+C)\n    signal.signal(signal.SIGINT, _sigint_handler)\n\n    # Configure logging based on command-line arguments\n    log_level = _setup_logging(sys.argv)\n\n    # Get command-line arguments, default to help if none provided\n    args = sys.argv[1:]\n    if not args:\n        args.append(\"-h\")\n\n    try:\n        # Display welcome banner and version information\n        _welcome()\n\n        # Get the currently installed version of TaskCat\n        version = get_installed_version()\n\n        # Initialize the CLI core with modules and configuration\n        cli = cli_core_class(NAME, _cli_modules, DESCRIPTION, version, GLOBAL_ARGS.ARGS)\n\n        # Parse the command-line arguments\n        cli.parse(args)\n\n        # Extract and set the AWS profile if specified\n        _default_profile = cli.parsed_args.__dict__.get(\"_profile\")\n        if _default_profile:\n            GLOBAL_ARGS.profile = _default_profile\n\n        # Execute the parsed command\n        cli.run()\n\n    except TaskCatException as e:\n        # Handle known TaskCat exceptions with appropriate logging\n        LOG.error(str(e), exc_info=_print_tracebacks(log_level))\n        exit_func(1)\n    except Exception as e:  # pylint: disable=broad-except\n        # Handle unexpected exceptions with full error details\n        LOG.error(\n            \"%s %s\", e.__class__.__name__, str(e), exc_info=_print_tracebacks(log_level)\n        )\n        exit_func(1)\n</code></pre>"},{"location":"reference/taskcat/_amiupdater/","title":"amiupdater","text":""},{"location":"reference/taskcat/_amiupdater/#taskcat._amiupdater","title":"<code>taskcat._amiupdater</code>","text":""},{"location":"reference/taskcat/_amiupdater/#taskcat._amiupdater.AMIUpdaterFatalException","title":"<code>AMIUpdaterFatalException(message=None)</code>","text":"<p>               Bases: <code>TaskCatException</code></p> <p>Raised when AMIUpdater experiences a fatal error</p> Source code in <code>taskcat/_amiupdater.py</code> <pre><code>def __init__(self, message=None):\n    # pylint: disable=super-with-arguments\n    super(AMIUpdaterFatalException, self).__init__(message)\n    self.message = message\n</code></pre>"},{"location":"reference/taskcat/_amiupdater/#taskcat._amiupdater.build_codenames","title":"<code>build_codenames(tobj, config)</code>","text":"<p>Builds regional codename objects</p> Source code in <code>taskcat/_amiupdater.py</code> <pre><code>def build_codenames(tobj: Template, config: Config) -&gt; List[RegionalCodename]:\n    \"\"\"Builds regional codename objects\"\"\"\n\n    built_cn = []\n    filters = deep_get(tobj.underlying.template, tobj.metadata_path, {})\n    mappings = deep_get(tobj.underlying.template, tobj.mapping_path, {})\n\n    for cname, cfilters in filters.items():\n        config.update_filter({cname: cfilters})\n\n    for region, cndata in mappings.items():\n        _missing_filters: Set[str] = set()\n        if region == \"AMI\":\n            continue\n        if not REGION_REGEX.search(region):\n            LOG.error(f\"[{region}] is not a valid region. Please check your template!\")\n            raise AMIUpdaterFatalException\n        for cnname in cndata.keys():\n            _filters = _construct_filters(cnname, config)\n            if not _filters:\n                if cnname not in _missing_filters:\n                    _missing_filters.add(cnname)\n                    LOG.warning(\n                        f\"No query parameters were found for: {cnname.upper()}.\",\n                        \"(Results for this codename are not possible.\",\n                    )\n                continue\n            region_cn = RegionalCodename(region=region, cn=cnname, filters=_filters)\n            built_cn.append(region_cn)\n    return built_cn\n</code></pre>"},{"location":"reference/taskcat/_amiupdater/#taskcat._amiupdater.query_codenames","title":"<code>query_codenames(codename_list, region_dict)</code>","text":"<p>Fetches AMI IDs from AWS</p> Source code in <code>taskcat/_amiupdater.py</code> <pre><code>def query_codenames(\n    codename_list: Set[RegionalCodename], region_dict: Dict[str, RegionObj]\n):\n    \"\"\"Fetches AMI IDs from AWS\"\"\"\n\n    if len(codename_list) == 0:\n        raise AMIUpdaterFatalException(\n            \"No AMI filters were found. Nothing to fetch from the EC2 API.\"\n        )\n\n    for region in list(region_dict.keys()):\n        _ = region_dict[region].client(\"ec2\")\n\n    pool = ThreadPool(len(region_dict))\n    _p = partial(_per_codename_amifetch, region_dict)\n    response = pool.map(_p, codename_list)\n    return response\n</code></pre>"},{"location":"reference/taskcat/_cfn_lint/","title":"cfn lint","text":""},{"location":"reference/taskcat/_cfn_lint/#taskcat._cfn_lint","title":"<code>taskcat._cfn_lint</code>","text":""},{"location":"reference/taskcat/_cfn_lint/#taskcat._cfn_lint.Lint","title":"<code>Lint(config, templates, strict=False)</code>","text":"<p>Lints templates using cfn_python_lint. Uses config to define regions and templates to test. Recurses into child templates, excluding submodules.</p> <p>:param config: path to taskcat ci config file</p> Source code in <code>taskcat/_cfn_lint.py</code> <pre><code>def __init__(self, config: Config, templates: Templates, strict: bool = False):\n    \"\"\"\n    Lints templates using cfn_python_lint. Uses config to define regions and\n    templates to test. Recurses into child templates, excluding submodules.\n\n    :param config: path to taskcat ci config file\n    \"\"\"\n    self._config: Config = config\n    self._templates: Templates = templates\n    self._cfnlint_config = None\n    try:\n        self._cfnlint_config = CfnLintConfig([])\n    except ValidationError as e:\n        LOG.error(\"Error parsing cfn-lint config file: %s\", str(e))\n        raise\n\n    # There is a change in the way that the cfn lint config class functions between the 0.x and 1.x versions.\n    # In 1.x, the append_rules property getter includes the default rule set along with the loaded configuration\n    # https://github.com/aws-cloudformation/cfn-lint/blob/23ee527fadb43e4fd54238eeea5bc3a169175c91/src/cfnlint/config.py#L773\n    # In 0.x, it only returned the loaded configuration.\n    # https://github.com/aws-cloudformation/cfn-lint/blob/f006cb5d8c7056923f3f21b31c14edfeed3804b5/src/cfnlint/config.py#L730\n    #\n    # This causes issues for us as the get_rules method combines the supplied value with the default rule list,\n    # resulting in a duplicate rule error. get_rules has always behaved this way though, so not sure if we have just missed something\n    # in the intended approach to calling this.\n    if cfnlint.version.__version__.startswith(\"0.\"):\n        append_rules = self._cfnlint_config.append_rules\n    else:\n        append_rules = self._cfnlint_config.append_rules\n        append_rules.remove(cfnlint.config._DEFAULT_RULESDIR)\n\n    self._rules = cfnlint.core.get_rules(\n        append_rules,\n        self._cfnlint_config.ignore_checks,\n        self._cfnlint_config.include_checks,\n        self._cfnlint_config.configure_rules,\n        self._cfnlint_config.include_experimental,\n        self._cfnlint_config.mandatory_checks,\n    )\n    if self._cfnlint_config.override_spec:\n        cfnlint.helpers.override_specs(self._cfnlint_config.override_spec)\n    self.lints = self._lint()\n    self.strict: bool = strict\n</code></pre>"},{"location":"reference/taskcat/_cfn_lint/#taskcat._cfn_lint.Lint.output_results","title":"<code>output_results()</code>","text":"<p>Prints lint results to terminal using taskcat console formatting</p> <p>:return:</p> Source code in <code>taskcat/_cfn_lint.py</code> <pre><code>def output_results(self):  # noqa: C901\n    \"\"\"\n    Prints lint results to terminal using taskcat console formatting\n\n    :return:\n    \"\"\"\n    passed = set()\n    issue = {\"warning\": {}, \"error\": {}}\n    lints = self.lints[0]\n    for test in lints:  # pylint: disable=consider-using-dict-items\n        for result in lints[test][\"results\"]:\n            if not lints[test][\"results\"][result]:\n                passed.add(result)\n            else:\n                if self._is_error(lints[test][\"results\"][result]):\n                    if result in issue[\"error\"]:\n                        continue\n                    issue[\"error\"][result] = lints[test][\"results\"][result]\n                else:\n                    if result in issue[\"warning\"]:\n                        continue\n                    issue[\"warning\"][result] = lints[test][\"results\"][result]\n    for filename in passed:\n        LOG.info(f\"Linting passed for file: {filename}\")\n    for filename, result_data in issue[\"warning\"].items():\n        LOG.warning(\"---\")\n        LOG.warning(f\"Linting detected issues in: {filename}\")\n        for result_message in result_data:\n            self._format_message(result_message, result_data)\n    for filename, result_data in issue[\"error\"].items():\n        LOG.error(\"---\")\n        LOG.error(f\"Linting detected issues in: {filename}\")\n        for result_message in result_data:\n            self._format_message(result_message, result_data)\n</code></pre>"},{"location":"reference/taskcat/_cli/","title":"cli","text":""},{"location":"reference/taskcat/_cli/#taskcat._cli","title":"<code>taskcat._cli</code>","text":"<p>TaskCat CLI Entry Point Module</p> <p>This module provides the main command-line interface for TaskCat, an AWS CloudFormation template testing tool. It handles CLI argument parsing, logging setup, version checking, and error handling for the entire application.</p> <p>The module serves as the primary entry point when TaskCat is invoked from the command line, coordinating between various CLI modules and providing a consistent user experience.</p>"},{"location":"reference/taskcat/_cli/#taskcat._cli.check_for_update","title":"<code>check_for_update()</code>","text":"<p>Check for available TaskCat updates and notify the user.</p> <p>Compares the currently installed version with the latest version available on PyPI. Only checks for stable releases (non-dev versions) and handles various error conditions gracefully.</p> <p>The function will: - Skip update checks for development versions - Display current version information - Show upgrade instructions if a newer version is available - Handle network errors and API failures gracefully</p> Source code in <code>taskcat/_cli.py</code> <pre><code>def check_for_update():\n    \"\"\"\n    Check for available TaskCat updates and notify the user.\n\n    Compares the currently installed version with the latest version available\n    on PyPI. Only checks for stable releases (non-dev versions) and handles\n    various error conditions gracefully.\n\n    The function will:\n    - Skip update checks for development versions\n    - Display current version information\n    - Show upgrade instructions if a newer version is available\n    - Handle network errors and API failures gracefully\n    \"\"\"\n    version = get_installed_version()\n\n    # Skip update check for local development installations\n    if version != \"[local source] no pip module installed\":\n        # Only check for updates on stable releases (not dev versions)\n        if \"dev\" not in version:\n            try:\n                # Fetch latest version from PyPI\n                current_version = get_pip_version(f\"https://pypi.org/pypi/{NAME}/json\")\n\n                if version in current_version:\n                    # Current version is up to date\n                    LOG.info(\"version %s\" % version, extra={\"nametag\": \"\"})\n                else:\n                    # Newer version available, show upgrade message\n                    _print_upgrade_msg(current_version, version)\n\n            except Exception:  # pylint: disable=broad-except\n                # Handle network errors, API failures, etc.\n                LOG.debug(\"Unexpected error\", exc_info=True)\n                LOG.warning(\"Unable to get version info!!, continuing\")\n    else:\n        # Running from local source (development mode)\n        LOG.info(\"Using local source (development mode)\\n\")\n</code></pre>"},{"location":"reference/taskcat/_cli/#taskcat._cli.get_installed_version","title":"<code>get_installed_version()</code>","text":"<p>Get the currently installed version of TaskCat.</p> <p>Uses importlib.metadata to retrieve version information from the installed package metadata.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The installed version string, or a special message for  development installations</p> Source code in <code>taskcat/_cli.py</code> <pre><code>def get_installed_version():\n    \"\"\"\n    Get the currently installed version of TaskCat.\n\n    Uses importlib.metadata to retrieve version information from the\n    installed package metadata.\n\n    Returns:\n        str: The installed version string, or a special message for\n             development installations\n    \"\"\"\n    return importlib.metadata.version(__package__ or __name__)\n</code></pre>"},{"location":"reference/taskcat/_cli/#taskcat._cli.get_pip_version","title":"<code>get_pip_version(url)</code>","text":"<p>Retrieve the current version of a package from PyPI.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The PyPI JSON API URL for the package</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The latest version string from PyPI</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If the HTTP request fails</p> <code>KeyError</code> <p>If the expected JSON structure is not found</p> <code>ValueError</code> <p>If the JSON response is malformed</p> Source code in <code>taskcat/_cli.py</code> <pre><code>def get_pip_version(url):\n    \"\"\"\n    Retrieve the current version of a package from PyPI.\n\n    Args:\n        url (str): The PyPI JSON API URL for the package\n\n    Returns:\n        str: The latest version string from PyPI\n\n    Raises:\n        requests.RequestException: If the HTTP request fails\n        KeyError: If the expected JSON structure is not found\n        ValueError: If the JSON response is malformed\n    \"\"\"\n    response = requests.get(url, timeout=5.0)\n    return response.json()[\"info\"][\"version\"]\n</code></pre>"},{"location":"reference/taskcat/_cli/#taskcat._cli.main","title":"<code>main(cli_core_class=CliCore, exit_func=exit_with_code)</code>","text":"<p>Main entry point for the TaskCat CLI application.</p> <p>This function orchestrates the entire CLI workflow including: - Signal handling setup for graceful interruption - Logging configuration - Command-line argument parsing - CLI module initialization and execution - Error handling and reporting</p> <p>Parameters:</p> Name Type Description Default <code>cli_core_class</code> <code>class</code> <p>CLI core class to use for parsing and execution.                             Defaults to CliCore. Used for dependency injection                             in testing.</p> <code>CliCore</code> <code>exit_func</code> <code>callable</code> <p>Function to call for program exit.                            Defaults to exit_with_code. Used for testing.</p> <code>exit_with_code</code> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>For known TaskCat-specific errors</p> <code>Exception</code> <p>For unexpected errors during execution</p> Source code in <code>taskcat/_cli.py</code> <pre><code>def main(cli_core_class=CliCore, exit_func=exit_with_code):\n    \"\"\"\n    Main entry point for the TaskCat CLI application.\n\n    This function orchestrates the entire CLI workflow including:\n    - Signal handling setup for graceful interruption\n    - Logging configuration\n    - Command-line argument parsing\n    - CLI module initialization and execution\n    - Error handling and reporting\n\n    Args:\n        cli_core_class (class, optional): CLI core class to use for parsing and execution.\n                                        Defaults to CliCore. Used for dependency injection\n                                        in testing.\n        exit_func (callable, optional): Function to call for program exit. \n                                      Defaults to exit_with_code. Used for testing.\n\n    Raises:\n        TaskCatException: For known TaskCat-specific errors\n        Exception: For unexpected errors during execution\n    \"\"\"\n    # Set up signal handler for graceful interruption (Ctrl+C)\n    signal.signal(signal.SIGINT, _sigint_handler)\n\n    # Configure logging based on command-line arguments\n    log_level = _setup_logging(sys.argv)\n\n    # Get command-line arguments, default to help if none provided\n    args = sys.argv[1:]\n    if not args:\n        args.append(\"-h\")\n\n    try:\n        # Display welcome banner and version information\n        _welcome()\n\n        # Get the currently installed version of TaskCat\n        version = get_installed_version()\n\n        # Initialize the CLI core with modules and configuration\n        cli = cli_core_class(NAME, _cli_modules, DESCRIPTION, version, GLOBAL_ARGS.ARGS)\n\n        # Parse the command-line arguments\n        cli.parse(args)\n\n        # Extract and set the AWS profile if specified\n        _default_profile = cli.parsed_args.__dict__.get(\"_profile\")\n        if _default_profile:\n            GLOBAL_ARGS.profile = _default_profile\n\n        # Execute the parsed command\n        cli.run()\n\n    except TaskCatException as e:\n        # Handle known TaskCat exceptions with appropriate logging\n        LOG.error(str(e), exc_info=_print_tracebacks(log_level))\n        exit_func(1)\n    except Exception as e:  # pylint: disable=broad-except\n        # Handle unexpected exceptions with full error details\n        LOG.error(\n            \"%s %s\", e.__class__.__name__, str(e), exc_info=_print_tracebacks(log_level)\n        )\n        exit_func(1)\n</code></pre>"},{"location":"reference/taskcat/_cli_core/","title":"cli core","text":""},{"location":"reference/taskcat/_cli_core/#taskcat._cli_core","title":"<code>taskcat._cli_core</code>","text":""},{"location":"reference/taskcat/_client_factory/","title":"client factory","text":""},{"location":"reference/taskcat/_client_factory/#taskcat._client_factory","title":"<code>taskcat._client_factory</code>","text":""},{"location":"reference/taskcat/_common_utils/","title":"common utils","text":""},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils","title":"<code>taskcat._common_utils</code>","text":"<p>TaskCat Common Utilities Module</p> <p>This module provides a collection of utility functions and classes used throughout the TaskCat application. It includes functions for:</p> <ul> <li>AWS resource manipulation (S3, CloudFormation, SSM, Secrets Manager)</li> <li>String and data structure processing</li> <li>File system operations</li> <li>URL parsing and construction</li> <li>Configuration management</li> <li>Git submodule handling</li> </ul> <p>These utilities support the core TaskCat functionality by providing reusable components for common operations across different modules.</p>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.CommonTools","title":"<code>CommonTools(stack_name)</code>","text":"<p>Collection of common utility methods for TaskCat operations.</p> <p>This class provides static utility methods that are used across different TaskCat modules for common operations like regex matching and string processing.</p> <p>Attributes:</p> Name Type Description <code>stack_name</code> <code>str</code> <p>The CloudFormation stack name associated with this instance</p> <p>Initialize CommonTools with a stack name.</p> <p>Parameters:</p> Name Type Description Default <code>stack_name</code> <code>str</code> <p>The CloudFormation stack name to associate with this instance</p> required Source code in <code>taskcat/_common_utils.py</code> <pre><code>def __init__(self, stack_name):\n    \"\"\"\n    Initialize CommonTools with a stack name.\n\n    Args:\n        stack_name (str): The CloudFormation stack name to associate with this instance\n    \"\"\"\n    self.stack_name = stack_name\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.CommonTools.regxfind","title":"<code>regxfind(re_object, data_line)</code>  <code>staticmethod</code>","text":"<p>Find and return the first regex match in a string.</p> <p>This method searches for a pattern in the provided string and returns the matching substring. If no match is found, it returns 'Not-found'.</p> <p>Parameters:</p> Name Type Description Default <code>re_object</code> <code>Pattern</code> <p>Compiled regular expression object</p> required <code>data_line</code> <code>str</code> <p>String to search for the pattern</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The matching string if found, otherwise 'Not-found'</p> Example <p>import re pattern = re.compile(r'sg-[a-f0-9]+') result = CommonTools.regxfind(pattern, 'SecurityGroup: sg-12345abc') print(result) 'sg-12345abc'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>@staticmethod\ndef regxfind(re_object, data_line):\n    \"\"\"\n    Find and return the first regex match in a string.\n\n    This method searches for a pattern in the provided string and returns\n    the matching substring. If no match is found, it returns 'Not-found'.\n\n    Args:\n        re_object (re.Pattern): Compiled regular expression object\n        data_line (str): String to search for the pattern\n\n    Returns:\n        str: The matching string if found, otherwise 'Not-found'\n\n    Example:\n        &gt;&gt;&gt; import re\n        &gt;&gt;&gt; pattern = re.compile(r'sg-[a-f0-9]+')\n        &gt;&gt;&gt; result = CommonTools.regxfind(pattern, 'SecurityGroup: sg-12345abc')\n        &gt;&gt;&gt; print(result)\n        'sg-12345abc'\n    \"\"\"\n    security_group = re_object.search(data_line)\n    if security_group:\n        return str(security_group.group())\n    return str(\"Not-found\")\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.deep_get","title":"<code>deep_get(dictionary, keys, default=None)</code>","text":"<p>Get a value from a nested dictionary using a path-like key string.</p> <p>This function allows accessing nested dictionary values using a slash-separated path string, similar to file system paths.</p> <p>Parameters:</p> Name Type Description Default <code>dictionary</code> <code>dict</code> <p>The dictionary to search in</p> required <code>keys</code> <code>str</code> <p>Slash-separated path to the desired value (e.g., 'level1/level2/key')</p> required <code>default</code> <p>Default value to return if the path is not found</p> <code>None</code> <p>Returns:</p> Type Description <p>The value at the specified path, or the default value if not found</p> Example <p>data = {'config': {'database': {'host': 'localhost', 'port': 5432}}} deep_get(data, 'config/database/host') 'localhost' deep_get(data, 'config/cache/ttl', 300) 300</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def deep_get(dictionary, keys, default=None):\n    \"\"\"\n    Get a value from a nested dictionary using a path-like key string.\n\n    This function allows accessing nested dictionary values using a slash-separated\n    path string, similar to file system paths.\n\n    Args:\n        dictionary (dict): The dictionary to search in\n        keys (str): Slash-separated path to the desired value (e.g., 'level1/level2/key')\n        default: Default value to return if the path is not found\n\n    Returns:\n        The value at the specified path, or the default value if not found\n\n    Example:\n        &gt;&gt;&gt; data = {'config': {'database': {'host': 'localhost', 'port': 5432}}}\n        &gt;&gt;&gt; deep_get(data, 'config/database/host')\n        'localhost'\n        &gt;&gt;&gt; deep_get(data, 'config/cache/ttl', 300)\n        300\n    \"\"\"\n    return reduce(\n        lambda d, key: d.get(key, default) if isinstance(d, dict) else default,\n        keys.split(\"/\"),\n        dictionary,\n    )\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.determine_profile_for_region","title":"<code>determine_profile_for_region(auth_dict, region)</code>","text":"<p>Determine the appropriate AWS profile to use for a specific region.</p> <p>This function looks up the AWS profile configuration for a given region, falling back to the default profile if no region-specific profile is configured.</p> <p>Parameters:</p> Name Type Description Default <code>auth_dict</code> <code>dict</code> <p>Dictionary mapping regions to AWS profile names</p> required <code>region</code> <code>str</code> <p>AWS region code to look up</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>AWS profile name to use for the specified region</p> Example <p>auth_config = { ...     'us-east-1': 'prod-profile', ...     'us-west-2': 'dev-profile', ...     'default': 'default-profile' ... } determine_profile_for_region(auth_config, 'us-east-1') 'prod-profile' determine_profile_for_region(auth_config, 'eu-west-1') 'default-profile'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def determine_profile_for_region(auth_dict, region):\n    \"\"\"\n    Determine the appropriate AWS profile to use for a specific region.\n\n    This function looks up the AWS profile configuration for a given region,\n    falling back to the default profile if no region-specific profile is configured.\n\n    Args:\n        auth_dict (dict): Dictionary mapping regions to AWS profile names\n        region (str): AWS region code to look up\n\n    Returns:\n        str: AWS profile name to use for the specified region\n\n    Example:\n        &gt;&gt;&gt; auth_config = {\n        ...     'us-east-1': 'prod-profile',\n        ...     'us-west-2': 'dev-profile',\n        ...     'default': 'default-profile'\n        ... }\n        &gt;&gt;&gt; determine_profile_for_region(auth_config, 'us-east-1')\n        'prod-profile'\n        &gt;&gt;&gt; determine_profile_for_region(auth_config, 'eu-west-1')\n        'default-profile'\n    \"\"\"\n    profile = auth_dict.get(region, auth_dict.get(\"default\", \"default\"))\n    return profile\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.exit_with_code","title":"<code>exit_with_code(code, msg='')</code>","text":"<p>Exit the application with a specific exit code and optional message.</p> <p>This function provides a centralized way to exit the application with proper logging and exit code handling.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>int</code> <p>Exit code to return to the operating system</p> required <code>msg</code> <code>str</code> <p>Error message to log before exiting. Defaults to empty string.</p> <code>''</code> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def exit_with_code(code, msg=\"\"):\n    \"\"\"\n    Exit the application with a specific exit code and optional message.\n\n    This function provides a centralized way to exit the application with\n    proper logging and exit code handling.\n\n    Args:\n        code (int): Exit code to return to the operating system\n        msg (str, optional): Error message to log before exiting. Defaults to empty string.\n    \"\"\"\n    if msg:\n        LOG.error(msg)\n    sys.exit(code)\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.fetch_secretsmanager_parameter_value","title":"<code>fetch_secretsmanager_parameter_value(boto_client, secret_arn)</code>","text":"<p>Fetch a secret value from AWS Secrets Manager.</p> <p>Parameters:</p> Name Type Description Default <code>boto_client</code> <p>Boto3 client factory function</p> required <code>secret_arn</code> <code>str</code> <p>The ARN or name of the secret in Secrets Manager</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The secret value from Secrets Manager</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If the secret cannot be retrieved or doesn't exist</p> Example <p>secret = fetch_secretsmanager_parameter_value( ...     boto_client,  ...     'arn:aws:secretsmanager:us-east-1:123456789012MySecret-AbCdEf' ... ) print(secret) '{\"username\": \"admin\", \"password\": \"secret123\"}'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def fetch_secretsmanager_parameter_value(boto_client, secret_arn):\n    \"\"\"\n    Fetch a secret value from AWS Secrets Manager.\n\n    Args:\n        boto_client: Boto3 client factory function\n        secret_arn (str): The ARN or name of the secret in Secrets Manager\n\n    Returns:\n        str: The secret value from Secrets Manager\n\n    Raises:\n        TaskCatException: If the secret cannot be retrieved or doesn't exist\n\n    Example:\n        &gt;&gt;&gt; secret = fetch_secretsmanager_parameter_value(\n        ...     boto_client, \n        ...     'arn:aws:secretsmanager:us-east-1:123456789012:secret:MySecret-AbCdEf'\n        ... )\n        &gt;&gt;&gt; print(secret)\n        '{\"username\": \"admin\", \"password\": \"secret123\"}'\n    \"\"\"\n    secrets_manager = boto_client(\"secretsmanager\")\n    try:\n        response = secrets_manager.get_secret_value(SecretId=secret_arn)[\"SecretString\"]\n    except Exception as e:\n        # pylint: disable=raise-missing-from\n        raise TaskCatException(\n            f\"Failed to retrieve secret from ARN '{secret_arn}': {str(e)}\"\n        )\n    return response\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.fetch_ssm_parameter_value","title":"<code>fetch_ssm_parameter_value(boto_client, parameter_path)</code>","text":"<p>Fetch a parameter value from AWS Systems Manager Parameter Store.</p> <p>Parameters:</p> Name Type Description Default <code>boto_client</code> <p>Boto3 client factory function</p> required <code>parameter_path</code> <code>str</code> <p>The parameter path/name in SSM Parameter Store</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The parameter value from SSM</p> <p>Raises:</p> Type Description <code>ClientError</code> <p>If the parameter doesn't exist or access is denied</p> Example <p>value = fetch_ssm_parameter_value(boto_client, '/myapp/database/password') print(value) 'secret-password-value'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def fetch_ssm_parameter_value(boto_client, parameter_path):\n    \"\"\"\n    Fetch a parameter value from AWS Systems Manager Parameter Store.\n\n    Args:\n        boto_client: Boto3 client factory function\n        parameter_path (str): The parameter path/name in SSM Parameter Store\n\n    Returns:\n        str: The parameter value from SSM\n\n    Raises:\n        ClientError: If the parameter doesn't exist or access is denied\n\n    Example:\n        &gt;&gt;&gt; value = fetch_ssm_parameter_value(boto_client, '/myapp/database/password')\n        &gt;&gt;&gt; print(value)\n        'secret-password-value'\n    \"\"\"\n    ssm = boto_client(\"ssm\")\n    response = ssm.get_parameter(Name=parameter_path)\n    return response[\"Parameter\"][\"Value\"]\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.get_s3_domain","title":"<code>get_s3_domain(region)</code>","text":"<p>Get the appropriate S3 domain suffix for a given AWS region.</p> <p>Different AWS partitions use different domain suffixes for S3 endpoints. This function maps regions to their correct domain based on the partition.</p> <p>Parameters:</p> Name Type Description Default <code>region</code> <code>str</code> <p>AWS region code (e.g., 'us-east-1', 'cn-north-1')</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The S3 domain suffix for the region's partition</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If the region is not found in the partition mapping</p> Example <p>get_s3_domain('us-east-1') 'amazonaws.com' get_s3_domain('cn-north-1') 'amazonaws.com.cn'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def get_s3_domain(region):\n    \"\"\"\n    Get the appropriate S3 domain suffix for a given AWS region.\n\n    Different AWS partitions use different domain suffixes for S3 endpoints.\n    This function maps regions to their correct domain based on the partition.\n\n    Args:\n        region (str): AWS region code (e.g., 'us-east-1', 'cn-north-1')\n\n    Returns:\n        str: The S3 domain suffix for the region's partition\n\n    Raises:\n        TaskCatException: If the region is not found in the partition mapping\n\n    Example:\n        &gt;&gt;&gt; get_s3_domain('us-east-1')\n        'amazonaws.com'\n        &gt;&gt;&gt; get_s3_domain('cn-north-1')\n        'amazonaws.com.cn'\n    \"\"\"\n    try:\n        return S3_PARTITION_MAP[REGIONS[region]]\n    except KeyError:\n        # pylint: disable=raise-missing-from\n        raise TaskCatException(\n            f\"Cannot find the S3 hostname for region '{region}'. \"\n            f\"This region may not be supported or the region code may be invalid.\"\n        )\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.make_dir","title":"<code>make_dir(path, ignore_exists=True)</code>","text":"<p>Create a directory and any necessary parent directories.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the directory to create</p> required <code>ignore_exists</code> <code>bool</code> <p>If True, don't raise an error if directory                           already exists. Defaults to True.</p> <code>True</code> <p>Raises:</p> Type Description <code>OSError</code> <p>If directory creation fails or if ignore_exists is False and     directory already exists</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def make_dir(path, ignore_exists=True):\n    \"\"\"\n    Create a directory and any necessary parent directories.\n\n    Args:\n        path (str): Path to the directory to create\n        ignore_exists (bool, optional): If True, don't raise an error if directory\n                                      already exists. Defaults to True.\n\n    Raises:\n        OSError: If directory creation fails or if ignore_exists is False and\n                directory already exists\n    \"\"\"\n    path = os.path.abspath(path)\n\n    # Skip creation if directory exists and ignore_exists is True\n    if ignore_exists and os.path.isdir(path):\n        return\n\n    # Create directory and any necessary parent directories\n    os.makedirs(path)\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.merge_dicts","title":"<code>merge_dicts(list_of_dicts)</code>","text":"<p>Merge multiple dictionaries into a single dictionary.</p> <p>Later dictionaries in the list will override values from earlier ones if there are key conflicts.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_dicts</code> <code>list</code> <p>List of dictionaries to merge</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Merged dictionary containing all key-value pairs</p> Example <p>dicts = [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}] merge_dicts(dicts)</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def merge_dicts(list_of_dicts):\n    \"\"\"\n    Merge multiple dictionaries into a single dictionary.\n\n    Later dictionaries in the list will override values from earlier ones\n    if there are key conflicts.\n\n    Args:\n        list_of_dicts (list): List of dictionaries to merge\n\n    Returns:\n        dict: Merged dictionary containing all key-value pairs\n\n    Example:\n        &gt;&gt;&gt; dicts = [{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]\n        &gt;&gt;&gt; merge_dicts(dicts)\n        {'a': 1, 'b': 3, 'c': 4}\n    \"\"\"\n    merged_dict = {}\n    for single_dict in list_of_dicts:\n        merged_dict = {**merged_dict, **single_dict}\n    return merged_dict\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.merge_nested_dict","title":"<code>merge_nested_dict(old, new)</code>","text":"<p>Recursively merge nested dictionaries.</p> <p>This function performs a deep merge of two dictionaries, where nested dictionaries are merged recursively rather than being replaced entirely.</p> <p>Parameters:</p> Name Type Description Default <code>old</code> <code>dict</code> <p>The base dictionary to merge into (modified in-place)</p> required <code>new</code> <code>dict</code> <p>The dictionary to merge from</p> required Note <p>This function modifies the 'old' dictionary in-place.</p> Example <p>old = {'a': {'x': 1, 'y': 2}, 'b': 3} new = {'a': {'y': 20, 'z': 30}, 'c': 4} merge_nested_dict(old, new) print(old) {'a': {'x': 1, 'y': 20, 'z': 30}, 'b': 3, 'c': 4}</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def merge_nested_dict(old, new):\n    \"\"\"\n    Recursively merge nested dictionaries.\n\n    This function performs a deep merge of two dictionaries, where nested\n    dictionaries are merged recursively rather than being replaced entirely.\n\n    Args:\n        old (dict): The base dictionary to merge into (modified in-place)\n        new (dict): The dictionary to merge from\n\n    Note:\n        This function modifies the 'old' dictionary in-place.\n\n    Example:\n        &gt;&gt;&gt; old = {'a': {'x': 1, 'y': 2}, 'b': 3}\n        &gt;&gt;&gt; new = {'a': {'y': 20, 'z': 30}, 'c': 4}\n        &gt;&gt;&gt; merge_nested_dict(old, new)\n        &gt;&gt;&gt; print(old)\n        {'a': {'x': 1, 'y': 20, 'z': 30}, 'b': 3, 'c': 4}\n    \"\"\"\n    for k, v in new.items():\n        # If both values are dictionaries, merge recursively\n        if isinstance(old.get(k), dict) and isinstance(v, collections.abc.Mapping):\n            merge_nested_dict(old[k], v)\n        else:\n            # Otherwise, replace the value\n            old[k] = v\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.name_from_stack_id","title":"<code>name_from_stack_id(stack_id)</code>","text":"<p>Extract the stack name from a CloudFormation stack ID.</p> <p>CloudFormation stack IDs follow the format: arn:aws:cloudformation:region:account-id:stack/stack-name/unique-id</p> <p>Parameters:</p> Name Type Description Default <code>stack_id</code> <code>str</code> <p>The CloudFormation stack ID/ARN</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The CloudFormation stack name</p> Example <p>stack_id = \"arn:aws:cloudformation:us-east-1:123456789012:stack/my-stack/abc123\" name_from_stack_id(stack_id) 'my-stack'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def name_from_stack_id(stack_id):\n    \"\"\"\n    Extract the stack name from a CloudFormation stack ID.\n\n    CloudFormation stack IDs follow the format:\n    arn:aws:cloudformation:region:account-id:stack/stack-name/unique-id\n\n    Args:\n        stack_id (str): The CloudFormation stack ID/ARN\n\n    Returns:\n        str: The CloudFormation stack name\n\n    Example:\n        &gt;&gt;&gt; stack_id = \"arn:aws:cloudformation:us-east-1:123456789012:stack/my-stack/abc123\"\n        &gt;&gt;&gt; name_from_stack_id(stack_id)\n        'my-stack'\n    \"\"\"\n    return stack_id.split(\":\")[5].split(\"/\")[1]\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.neglect_submodule_templates","title":"<code>neglect_submodule_templates(project_root, template_list)</code>","text":"<p>Filter out CloudFormation templates that are located within Git submodules.</p> <p>This function examines the project's .gitmodules file to identify submodule paths and removes any templates that are located within those submodules. This prevents TaskCat from processing templates that are part of external repositories included as submodules.</p> <p>Parameters:</p> Name Type Description Default <code>project_root</code> <code>Path</code> <p>Path to the project root directory</p> required <code>template_list</code> <code>list</code> <p>List of template objects to filter</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Filtered list of template objects excluding those in submodules</p> Note <p>If no .gitmodules file is found, the original template list is returned unchanged.</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def neglect_submodule_templates(project_root, template_list):\n    \"\"\"\n    Filter out CloudFormation templates that are located within Git submodules.\n\n    This function examines the project's .gitmodules file to identify submodule\n    paths and removes any templates that are located within those submodules.\n    This prevents TaskCat from processing templates that are part of external\n    repositories included as submodules.\n\n    Args:\n        project_root (Path): Path to the project root directory\n        template_list (list): List of template objects to filter\n\n    Returns:\n        list: Filtered list of template objects excluding those in submodules\n\n    Note:\n        If no .gitmodules file is found, the original template list is returned unchanged.\n    \"\"\"\n    template_dict = {}\n\n    # Create a dictionary mapping template paths to template objects\n    # Include both main templates and their descendants\n    for template in template_list:\n        template_dict[template.template_path] = template\n        for template_descendent in template.descendents:\n            template_dict[template_descendent.template_path] = template_descendent\n\n    # Get submodule path prefixes from .gitmodules\n    submodule_path_prefixes = []\n    try:\n        gitmodule_config = ConfigFile.from_path(Path(project_root / \".gitmodules\"))\n    except FileNotFoundError:\n        # No .gitmodules file found, return original list\n        return template_list\n\n    # Parse submodule paths from the configuration\n    for submodule_path, _, _ in parse_submodules(gitmodule_config):\n        submodule_path_prefixes.append(\n            Path(project_root / submodule_path.decode(\"utf-8\"))\n        )\n\n    # Filter out templates that are within submodule directories\n    finalized_templates = []\n    for template_obj in list(template_dict.values()):\n        gitmodule_template = False\n\n        # Check if this template is within any submodule path\n        for gm_path in submodule_path_prefixes:\n            if gm_path in template_obj.template_path.parents:\n                gitmodule_template = True\n                break\n\n        # Only include templates that are not in submodules\n        if not gitmodule_template:\n            finalized_templates.append(template_obj)\n\n    return finalized_templates\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.ordered_dump","title":"<code>ordered_dump(data, stream=None, dumper=yaml.Dumper, **kwds)</code>","text":"<p>Dump YAML while preserving the order of OrderedDict objects.</p> <p>Standard YAML dumping doesn't preserve the order of OrderedDict objects. This function creates a custom dumper that maintains the order.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>The data structure to dump to YAML</p> required <code>stream</code> <p>Output stream (file-like object) or None for string output</p> <code>None</code> <code>dumper</code> <p>YAML dumper class to extend. Defaults to yaml.Dumper</p> <code>Dumper</code> <code>**kwds</code> <p>Additional keyword arguments passed to yaml.dump</p> <code>{}</code> <p>Returns:</p> Type Description <p>str or None: YAML string if stream is None, otherwise None</p> Example <p>from collections import OrderedDict data = OrderedDict([('first', 1), ('second', 2)]) yaml_str = ordered_dump(data) print(yaml_str) first: 1 second: 2</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def ordered_dump(data, stream=None, dumper=yaml.Dumper, **kwds):\n    \"\"\"\n    Dump YAML while preserving the order of OrderedDict objects.\n\n    Standard YAML dumping doesn't preserve the order of OrderedDict objects.\n    This function creates a custom dumper that maintains the order.\n\n    Args:\n        data: The data structure to dump to YAML\n        stream: Output stream (file-like object) or None for string output\n        dumper: YAML dumper class to extend. Defaults to yaml.Dumper\n        **kwds: Additional keyword arguments passed to yaml.dump\n\n    Returns:\n        str or None: YAML string if stream is None, otherwise None\n\n    Example:\n        &gt;&gt;&gt; from collections import OrderedDict\n        &gt;&gt;&gt; data = OrderedDict([('first', 1), ('second', 2)])\n        &gt;&gt;&gt; yaml_str = ordered_dump(data)\n        &gt;&gt;&gt; print(yaml_str)\n        first: 1\n        second: 2\n    \"\"\"\n    class OrderedDumper(dumper):  # pylint: disable=too-many-ancestors\n        \"\"\"Custom YAML dumper that preserves OrderedDict order.\"\"\"\n        pass\n\n    def _dict_representer(dumper, data):\n        \"\"\"Represent OrderedDict as a regular mapping while preserving order.\"\"\"\n        return dumper.represent_mapping(\n            yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG, data.items()\n        )\n\n    # Register the custom representer for OrderedDict\n    OrderedDumper.add_representer(OrderedDict, _dict_representer)\n    return yaml.dump(data, stream, OrderedDumper, **kwds)\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.param_list_to_dict","title":"<code>param_list_to_dict(original_keys)</code>","text":"<p>Convert a CloudFormation parameter list to a parameter index dictionary.</p> <p>CloudFormation parameters are often provided as a list of dictionaries with 'ParameterKey' and 'ParameterValue' keys. This function creates an index mapping parameter names to their positions in the list.</p> <p>Parameters:</p> Name Type Description Default <code>original_keys</code> <code>list</code> <p>List of parameter dictionaries, each containing                 'ParameterKey' and 'ParameterValue' keys</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>Dictionary mapping parameter names to their list indices</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If the input is not a list, if any parameter is not a dict,              or if required keys are missing</p> Example <p>params = [ ...     {'ParameterKey': 'VpcId', 'ParameterValue': 'vpc-12345'}, ...     {'ParameterKey': 'SubnetId', 'ParameterValue': 'subnet-67890'} ... ] param_list_to_dict(params)</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def param_list_to_dict(original_keys):\n    \"\"\"\n    Convert a CloudFormation parameter list to a parameter index dictionary.\n\n    CloudFormation parameters are often provided as a list of dictionaries with\n    'ParameterKey' and 'ParameterValue' keys. This function creates an index\n    mapping parameter names to their positions in the list.\n\n    Args:\n        original_keys (list): List of parameter dictionaries, each containing\n                            'ParameterKey' and 'ParameterValue' keys\n\n    Returns:\n        dict: Dictionary mapping parameter names to their list indices\n\n    Raises:\n        TaskCatException: If the input is not a list, if any parameter is not a dict,\n                         or if required keys are missing\n\n    Example:\n        &gt;&gt;&gt; params = [\n        ...     {'ParameterKey': 'VpcId', 'ParameterValue': 'vpc-12345'},\n        ...     {'ParameterKey': 'SubnetId', 'ParameterValue': 'subnet-67890'}\n        ... ]\n        &gt;&gt;&gt; param_list_to_dict(params)\n        {'VpcId': 0, 'SubnetId': 1}\n    \"\"\"\n    # Setup a list index dictionary for Parameter =&gt; Index mapping\n    param_index = {}\n\n    # Validate input is a list\n    if not isinstance(original_keys, list):\n        # pylint: disable=raise-missing-from\n        raise TaskCatException(\n            'Invalid parameter file: outermost JSON element must be a list (\"[]\")'\n        )\n\n    # Process each parameter in the list\n    for idx, param_dict in enumerate(original_keys):\n        # Validate each parameter is a dictionary\n        if not isinstance(param_dict, dict):\n            # pylint: disable=raise-missing-from\n            raise TaskCatException(\n                f'Invalid parameter {param_dict}: parameters must be of type dict (\"{{}}\")'\n            )\n\n        # Validate required keys are present\n        if \"ParameterKey\" not in param_dict or \"ParameterValue\" not in param_dict:\n            # pylint: disable=raise-missing-from\n            raise TaskCatException(\n                f\"Invalid parameter {param_dict}: all items must \"\n                f\"have both 'ParameterKey' and 'ParameterValue' keys\"\n            )\n\n        # Add parameter to index mapping\n        key = param_dict[\"ParameterKey\"]\n        param_index[key] = idx\n\n    return param_index\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.pascal_to_snake","title":"<code>pascal_to_snake(pascal)</code>","text":"<p>Convert PascalCase string to snake_case.</p> <p>Parameters:</p> Name Type Description Default <code>pascal</code> <code>str</code> <p>String in PascalCase format</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>String converted to snake_case</p> Example <p>pascal_to_snake('MyVariableName') 'my_variable_name' pascal_to_snake('HTTPSConnection') 'https_connection'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def pascal_to_snake(pascal):\n    \"\"\"\n    Convert PascalCase string to snake_case.\n\n    Args:\n        pascal (str): String in PascalCase format\n\n    Returns:\n        str: String converted to snake_case\n\n    Example:\n        &gt;&gt;&gt; pascal_to_snake('MyVariableName')\n        'my_variable_name'\n        &gt;&gt;&gt; pascal_to_snake('HTTPSConnection')\n        'https_connection'\n    \"\"\"\n    # First pass: handle sequences like 'HTTPSConnection' -&gt; 'HTTPS_Connection'\n    sub = FIRST_CAP_RE.sub(r\"\\1_\\2\", pascal)\n    # Second pass: handle remaining cases and convert to lowercase\n    return ALL_CAP_RE.sub(r\"\\1_\\2\", sub).lower()\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.region_from_stack_id","title":"<code>region_from_stack_id(stack_id)</code>","text":"<p>Extract the AWS region from a CloudFormation stack ID.</p> <p>CloudFormation stack IDs follow the format: arn:aws:cloudformation:region:account-id:stack/stack-name/unique-id</p> <p>Parameters:</p> Name Type Description Default <code>stack_id</code> <code>str</code> <p>The CloudFormation stack ID/ARN</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The AWS region code (e.g., 'us-east-1', 'eu-west-1')</p> Example <p>stack_id = \"arn:aws:cloudformation:us-east-1:123456789012:stack/my-stack/abc123\" region_from_stack_id(stack_id) 'us-east-1'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def region_from_stack_id(stack_id):\n    \"\"\"\n    Extract the AWS region from a CloudFormation stack ID.\n\n    CloudFormation stack IDs follow the format:\n    arn:aws:cloudformation:region:account-id:stack/stack-name/unique-id\n\n    Args:\n        stack_id (str): The CloudFormation stack ID/ARN\n\n    Returns:\n        str: The AWS region code (e.g., 'us-east-1', 'eu-west-1')\n\n    Example:\n        &gt;&gt;&gt; stack_id = \"arn:aws:cloudformation:us-east-1:123456789012:stack/my-stack/abc123\"\n        &gt;&gt;&gt; region_from_stack_id(stack_id)\n        'us-east-1'\n    \"\"\"\n    return stack_id.split(\":\")[3]\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.s3_bucket_name_from_url","title":"<code>s3_bucket_name_from_url(url)</code>","text":"<p>Extract the S3 bucket name from an S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>S3 URL in format https://bucket-name.s3.region.amazonaws.com/key</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The S3 bucket name</p> Example <p>s3_bucket_name_from_url('https://my-bucket.s3.us-east-1.amazonaws.com/file.txt') 'my-bucket'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def s3_bucket_name_from_url(url):\n    \"\"\"\n    Extract the S3 bucket name from an S3 URL.\n\n    Args:\n        url (str): S3 URL in format https://bucket-name.s3.region.amazonaws.com/key\n\n    Returns:\n        str: The S3 bucket name\n\n    Example:\n        &gt;&gt;&gt; s3_bucket_name_from_url('https://my-bucket.s3.us-east-1.amazonaws.com/file.txt')\n        'my-bucket'\n    \"\"\"\n    return url.split(\"//\")[1].split(\".\")[0]\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.s3_key_from_url","title":"<code>s3_key_from_url(url)</code>","text":"<p>Extract the S3 object key from an S3 URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>S3 URL in format https://bucket-name.s3.region.amazonaws.com/key</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The S3 object key/path</p> Example <p>s3_key_from_url('https://my-bucket.s3.us-east-1.amazonaws.com/path/to/file.txt') 'path/to/file.txt'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def s3_key_from_url(url):\n    \"\"\"\n    Extract the S3 object key from an S3 URL.\n\n    Args:\n        url (str): S3 URL in format https://bucket-name.s3.region.amazonaws.com/key\n\n    Returns:\n        str: The S3 object key/path\n\n    Example:\n        &gt;&gt;&gt; s3_key_from_url('https://my-bucket.s3.us-east-1.amazonaws.com/path/to/file.txt')\n        'path/to/file.txt'\n    \"\"\"\n    return \"/\".join(url.split(\"//\")[1].split(\"/\")[1:])\n</code></pre>"},{"location":"reference/taskcat/_common_utils/#taskcat._common_utils.s3_url_maker","title":"<code>s3_url_maker(bucket, key, s3_client, autobucket=False)</code>","text":"<p>Generate the correct S3 URL for a given bucket and key.</p> <p>This function determines the appropriate S3 endpoint URL based on the bucket's region and AWS partition. It handles different AWS partitions (standard, China, GovCloud) and can optionally wait for bucket creation if autobucket is enabled.</p> <p>Parameters:</p> Name Type Description Default <code>bucket</code> <code>str</code> <p>The S3 bucket name</p> required <code>key</code> <code>str</code> <p>The S3 object key/path</p> required <code>s3_client</code> <p>Boto3 S3 client instance</p> required <code>autobucket</code> <code>bool</code> <p>If True, retry on NoSuchBucket errors.                        Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The complete S3 URL for the object</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If bucket region cannot be determined</p> <code>ClientError</code> <p>If bucket access is denied and region cannot be discovered</p> <code>NoSuchBucket</code> <p>If bucket doesn't exist and autobucket is False</p> Example <p>url = s3_url_maker('my-bucket', 'path/to/file.txt', s3_client) print(url) 'https://my-bucket.s3.us-west-2.amazonaws.com/path/to/file.txt'</p> Source code in <code>taskcat/_common_utils.py</code> <pre><code>def s3_url_maker(bucket, key, s3_client, autobucket=False):\n    \"\"\"\n    Generate the correct S3 URL for a given bucket and key.\n\n    This function determines the appropriate S3 endpoint URL based on the bucket's\n    region and AWS partition. It handles different AWS partitions (standard, China, GovCloud)\n    and can optionally wait for bucket creation if autobucket is enabled.\n\n    Args:\n        bucket (str): The S3 bucket name\n        key (str): The S3 object key/path\n        s3_client: Boto3 S3 client instance\n        autobucket (bool, optional): If True, retry on NoSuchBucket errors.\n                                   Defaults to False.\n\n    Returns:\n        str: The complete S3 URL for the object\n\n    Raises:\n        TaskCatException: If bucket region cannot be determined\n        ClientError: If bucket access is denied and region cannot be discovered\n        NoSuchBucket: If bucket doesn't exist and autobucket is False\n\n    Example:\n        &gt;&gt;&gt; url = s3_url_maker('my-bucket', 'path/to/file.txt', s3_client)\n        &gt;&gt;&gt; print(url)\n        'https://my-bucket.s3.us-west-2.amazonaws.com/path/to/file.txt'\n    \"\"\"\n    retries = 10\n\n    while True:\n        try:\n            try:\n                # Try to get bucket location directly\n                response = s3_client.get_bucket_location(Bucket=bucket)\n                location = response[\"LocationConstraint\"]\n            except ClientError as e:\n                # If access denied, try to discover region via HTTP headers\n                if e.response[\"Error\"][\"Code\"] != \"AccessDenied\":\n                    raise\n\n                # Make a HEAD request to discover the bucket region\n                resp = requests.get(\n                    f\"https://{bucket}.s3.amazonaws.com/{key}\", timeout=3\n                )\n                location = resp.headers.get(\"x-amz-bucket-region\")\n\n                if not location:\n                    # pylint: disable=raise-missing-from\n                    raise TaskCatException(\n                        f\"Failed to discover region for bucket {bucket}. \"\n                        f\"Ensure the bucket exists and you have appropriate permissions.\"\n                    )\n            break\n\n        except s3_client.exceptions.NoSuchBucket:\n            # Handle case where bucket doesn't exist yet (for auto-created buckets)\n            if not autobucket or retries &lt; 1:\n                raise\n            retries -= 1\n            sleep(5)  # Wait for bucket creation\n\n    # Default case for us-east-1 which returns None as LocationConstraint\n    url = f\"https://{bucket}.s3.us-east-1.amazonaws.com/{key}\"\n\n    if location:\n        # Get the appropriate domain for the bucket's region/partition\n        domain = get_s3_domain(location)\n        url = f\"https://{bucket}.s3.{location}.{domain}/{key}\"\n\n    return url\n</code></pre>"},{"location":"reference/taskcat/_config/","title":"config","text":""},{"location":"reference/taskcat/_config/#taskcat._config","title":"<code>taskcat._config</code>","text":""},{"location":"reference/taskcat/_dataclasses/","title":"dataclasses","text":""},{"location":"reference/taskcat/_dataclasses/#taskcat._dataclasses","title":"<code>taskcat._dataclasses</code>","text":""},{"location":"reference/taskcat/_dataclasses/#taskcat._dataclasses.BaseConfig","title":"<code>BaseConfig(general=GeneralConfig(), project=ProjectConfig(), tests=dict())</code>  <code>dataclass</code>","text":"<p>               Bases: <code>JsonSchemaMixin</code></p> <p>Taskcat configuration file</p>"},{"location":"reference/taskcat/_dataclasses/#taskcat._dataclasses.GeneralConfig","title":"<code>GeneralConfig(parameters=None, tags=None, auth=None, s3_bucket=None, s3_regional_buckets=None, regions=None, artifact_regions=None, prehooks=None, posthooks=None)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>JsonSchemaMixin</code></p> <p>General configuration settings.</p>"},{"location":"reference/taskcat/_dataclasses/#taskcat._dataclasses.HookData","title":"<code>HookData(type=None, config=None)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>JsonSchemaMixin</code></p> <p>Hook definition</p>"},{"location":"reference/taskcat/_dataclasses/#taskcat._dataclasses.ProjectConfig","title":"<code>ProjectConfig(name=None, auth=None, owner=None, regions=None, artifact_regions=None, az_blacklist=None, package_lambda=None, lambda_zip_path=None, lambda_source_path=None, s3_bucket=None, s3_regional_buckets=None, parameters=None, build_submodules=None, template=None, tags=None, s3_enable_sig_v2=None, s3_object_acl='private', shorten_stack_name=None, role_name=None, org_id=None, prehooks=None, posthooks=None)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>JsonSchemaMixin</code></p> <p>Project specific configuration section</p>"},{"location":"reference/taskcat/_dataclasses/#taskcat._dataclasses.TestConfig","title":"<code>TestConfig(template=None, parameters=dict(), regions=None, artifact_regions=None, tags=None, auth=None, s3_bucket=None, s3_regional_buckets=None, az_blacklist=None, role_name=None, stack_name=None, stack_name_prefix=None, stack_name_suffix=None, prehooks=None, posthooks=None)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>JsonSchemaMixin</code></p> <p>Test specific configuration section.</p>"},{"location":"reference/taskcat/_generate_reports/","title":"generate reports","text":""},{"location":"reference/taskcat/_generate_reports/#taskcat._generate_reports","title":"<code>taskcat._generate_reports</code>","text":""},{"location":"reference/taskcat/_generate_reports/#taskcat._generate_reports.ReportBuilder","title":"<code>ReportBuilder(stacks, output_file, version='0.9.0')</code>","text":"<p>This class generates the test report.</p> Source code in <code>taskcat/_generate_reports.py</code> <pre><code>def __init__(self, stacks: Stacker, output_file: Path, version: str = \"0.9.0\"):\n    self._stacks = stacks\n    self._output_file = output_file\n    self._version = version\n</code></pre>"},{"location":"reference/taskcat/_lambda_build/","title":"lambda build","text":""},{"location":"reference/taskcat/_lambda_build/#taskcat._lambda_build","title":"<code>taskcat._lambda_build</code>","text":""},{"location":"reference/taskcat/_legacy_config/","title":"legacy config","text":""},{"location":"reference/taskcat/_legacy_config/#taskcat._legacy_config","title":"<code>taskcat._legacy_config</code>","text":""},{"location":"reference/taskcat/_logger/","title":"logger","text":""},{"location":"reference/taskcat/_logger/#taskcat._logger","title":"<code>taskcat._logger</code>","text":"<p>TaskCat Logging Module</p> <p>This module provides custom logging functionality for TaskCat with colored output and specialized formatting. It includes ANSI color codes for terminal output and custom log level formatting to provide a consistent and visually appealing command-line interface.</p> <p>The logging system supports different log levels with distinct colors and provides special formatting for TaskCat-specific operations like S3 interactions.</p>"},{"location":"reference/taskcat/_logger/#taskcat._logger.AppFilter","title":"<code>AppFilter</code>","text":"<p>               Bases: <code>Filter</code></p> <p>Custom logging filter to add color formatting to log records.</p> <p>This filter processes each log record and adds a 'color_loglevel' attribute that contains the appropriately colored log level string. It allows for custom formatting on a per-record basis by checking for special attributes.</p>"},{"location":"reference/taskcat/_logger/#taskcat._logger.AppFilter.filter","title":"<code>filter(record)</code>","text":"<p>Process a log record and add color formatting.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The log record to process</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>Always returns True to allow the record to be processed</p> Source code in <code>taskcat/_logger.py</code> <pre><code>def filter(self, record):\n    \"\"\"\n    Process a log record and add color formatting.\n\n    Args:\n        record (logging.LogRecord): The log record to process\n\n    Returns:\n        bool: Always returns True to allow the record to be processed\n    \"\"\"\n    # Check if this record has a custom nametag (for special formatting)\n    if \"nametag\" in dir(record):\n        record.color_loglevel = record.nametag\n    else:\n        # Use the standard colored log level based on the record's level\n        record.color_loglevel = getattr(PrintMsg, record.levelname)\n\n    return True\n</code></pre>"},{"location":"reference/taskcat/_logger/#taskcat._logger.PrintMsg","title":"<code>PrintMsg</code>","text":"<p>ANSI color codes and formatted log level strings for terminal output.</p> <p>This class provides consistent color coding across the TaskCat CLI interface. Each log level has its own color scheme to help users quickly identify different types of messages.</p> Color Attributes <p>header: Red background for headers highlight: White background for highlighting name_color: Blue background for name tags aqua: Cyan background for debug messages green: Green background for success messages white: White background for info messages orange: Yellow background for warnings red: Red background for errors rst_color: Reset color code to return to default</p> Formatted Log Levels <p>Each log level includes color coding and consistent spacing for alignment</p>"},{"location":"reference/taskcat/_logger/#taskcat._logger.init_taskcat_cli_logger","title":"<code>init_taskcat_cli_logger(loglevel=None)</code>","text":"<p>Initialize and configure the TaskCat CLI logger with colored output.</p> <p>Sets up a logger with custom formatting that includes ANSI color codes for terminal output. The logger uses a custom filter to add color information to each log record.</p> <p>Parameters:</p> Name Type Description Default <code>loglevel</code> <code>str</code> <p>The logging level to set. Can be any standard                      logging level name (DEBUG, INFO, WARNING, ERROR, CRITICAL).                      If not provided, the logger level is not explicitly set.</p> <code>None</code> <p>Returns:</p> Type Description <p>logging.Logger: Configured logger instance ready for use</p> Example <p>logger = init_taskcat_cli_logger('INFO') logger.info(\"This will appear with colored formatting\")</p> Source code in <code>taskcat/_logger.py</code> <pre><code>def init_taskcat_cli_logger(loglevel=None):\n    \"\"\"\n    Initialize and configure the TaskCat CLI logger with colored output.\n\n    Sets up a logger with custom formatting that includes ANSI color codes\n    for terminal output. The logger uses a custom filter to add color\n    information to each log record.\n\n    Args:\n        loglevel (str, optional): The logging level to set. Can be any standard\n                                 logging level name (DEBUG, INFO, WARNING, ERROR, CRITICAL).\n                                 If not provided, the logger level is not explicitly set.\n\n    Returns:\n        logging.Logger: Configured logger instance ready for use\n\n    Example:\n        &gt;&gt;&gt; logger = init_taskcat_cli_logger('INFO')\n        &gt;&gt;&gt; logger.info(\"This will appear with colored formatting\")\n    \"\"\"\n    # Get the logger for the TaskCat package\n    log = logging.getLogger(__package__)\n\n    # Create a stream handler for console output\n    cli_handler = logging.StreamHandler()\n\n    # Set up custom formatter that uses the color_loglevel attribute\n    formatter = logging.Formatter(\"%(color_loglevel)s%(message)s\")\n    cli_handler.setFormatter(formatter)\n\n    # Add the custom filter to inject color information\n    cli_handler.addFilter(AppFilter())\n\n    # Attach the handler to the logger\n    log.addHandler(cli_handler)\n\n    # Set the log level if provided\n    if loglevel:\n        # Convert string level name to numeric level\n        loglevel = getattr(logging, loglevel.upper(), 20)  # Default to INFO (20) if invalid\n        log.setLevel(loglevel)\n\n    return log\n</code></pre>"},{"location":"reference/taskcat/_name_generator/","title":"name generator","text":""},{"location":"reference/taskcat/_name_generator/#taskcat._name_generator","title":"<code>taskcat._name_generator</code>","text":"<p>TaskCat Name Generator Module</p> <p>This module provides functionality to generate random, human-readable names for TaskCat resources such as CloudFormation stacks, S3 buckets, and other AWS resources.</p> <p>The names are generated by combining random descriptive adjectives with animal names, creating memorable and unique identifiers like \"clever-dolphin\" or \"swift-eagle\".</p> <p>The word lists are stored in external text files to allow for easy customization and expansion of the available vocabulary.</p>"},{"location":"reference/taskcat/_name_generator/#taskcat._name_generator.generate_name","title":"<code>generate_name()</code>","text":"<p>Generate a random human-readable name for TaskCat resources.</p> <p>Creates a unique name by combining a random descriptor (adjective) with a random animal name, separated by a hyphen. This provides memorable names for AWS resources that are easier to identify than random strings.</p> <p>The function reads from two dictionary files: - descriptors.txt: Contains adjectives and descriptive words - animals.txt: Contains animal names</p> <p>Returns:</p> Name Type Description <code>str</code> <p>A randomly generated name in the format \"descriptor-animal\"  (e.g., \"clever-dolphin\", \"swift-eagle\")</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If the required dictionary files cannot be found              or accessed</p> Example <p>name = generate_name() print(name) \"brave-tiger\"</p> Source code in <code>taskcat/_name_generator.py</code> <pre><code>def generate_name():\n    \"\"\"\n    Generate a random human-readable name for TaskCat resources.\n\n    Creates a unique name by combining a random descriptor (adjective) with a\n    random animal name, separated by a hyphen. This provides memorable names\n    for AWS resources that are easier to identify than random strings.\n\n    The function reads from two dictionary files:\n    - descriptors.txt: Contains adjectives and descriptive words\n    - animals.txt: Contains animal names\n\n    Returns:\n        str: A randomly generated name in the format \"descriptor-animal\"\n             (e.g., \"clever-dolphin\", \"swift-eagle\")\n\n    Raises:\n        TaskCatException: If the required dictionary files cannot be found\n                         or accessed\n\n    Example:\n        &gt;&gt;&gt; name = generate_name()\n        &gt;&gt;&gt; print(name)\n        \"brave-tiger\"\n    \"\"\"\n    # Resolve the path to the configuration directory containing dictionary files\n    path: Path = (Path(__file__).parent / \"./cfg/\").resolve()\n\n    # Verify that both required dictionary files exist\n    animals_file = path / \"animals.txt\"\n    descriptors_file = path / \"descriptors.txt\"\n\n    if not animals_file.is_file() or not descriptors_file.is_file():\n        raise TaskCatException(\n            f\"Cannot find dictionary files. Expected files: \"\n            f\"{animals_file} and {descriptors_file}\"\n        )\n\n    # Read and parse the animals dictionary\n    with open(str(animals_file), \"r\", encoding=\"utf-8\") as _f:\n        animals = _f.read().split(\"\\n\")\n\n    # Read and parse the descriptors dictionary\n    with open(str(descriptors_file), \"r\", encoding=\"utf-8\") as _f:\n        descriptors = _f.read().split(\"\\n\")\n\n    # Generate and return a random combination\n    # Note: Using random.choice is acceptable here as this is not for cryptographic purposes\n    return choice(descriptors) + \"-\" + choice(animals)  # nosec: B311\n</code></pre>"},{"location":"reference/taskcat/_s3_stage/","title":"s3 stage","text":""},{"location":"reference/taskcat/_s3_stage/#taskcat._s3_stage","title":"<code>taskcat._s3_stage</code>","text":""},{"location":"reference/taskcat/_s3_sync/","title":"s3 sync","text":""},{"location":"reference/taskcat/_s3_sync/#taskcat._s3_sync","title":"<code>taskcat._s3_sync</code>","text":""},{"location":"reference/taskcat/_s3_sync/#taskcat._s3_sync.S3Sync","title":"<code>S3Sync(s3_client, bucket, prefix, path, acl='private', dry_run=False)</code>","text":"<p>Syncronizes local project files with S3 based on checksums.</p> <p>Excludes hidden files, unpackaged lambda source and taskcat /ci/ files. Uses the Etag as an md5 which introduces the following limitations     * Uses undocumented etag algorithm for multipart uploads     * Does not work wil files uploaded in the console that use SSE encryption     * see       https://docs.aws.amazon.com/AmazonS3/latest/API/RESTCommonResponseHeaders.html       for more info Does not support buckets with versioning enabled</p> <p>Syncronizes local file system with an s3 bucket/prefix</p> Source code in <code>taskcat/_s3_sync.py</code> <pre><code>def __init__(self, s3_client, bucket, prefix, path, acl=\"private\", dry_run=False):\n    \"\"\"Syncronizes local file system with an s3 bucket/prefix\"\"\"\n    if prefix != \"\" and not prefix.endswith(\"/\"):\n        prefix = prefix + \"/\"\n    self.s3_client = s3_client\n    self.dry_run = dry_run\n    self.exclude_patterns = pathspec.PathSpec.from_lines(\n        \"gitwildmatch\",\n        self.exclude_files\n        + self.exclude_path_prefixes\n        + self.exclude_remote_path_prefixes,\n    )\n    file_list = self._get_local_file_list(path)\n    s3_file_list = self._get_s3_file_list(bucket, prefix)\n    self._sync(file_list, s3_file_list, bucket, prefix, acl=acl)\n</code></pre>"},{"location":"reference/taskcat/_template_params/","title":"template params","text":""},{"location":"reference/taskcat/_template_params/#taskcat._template_params","title":"<code>taskcat._template_params</code>","text":""},{"location":"reference/taskcat/_template_params/#taskcat._template_params.ParamGen","title":"<code>ParamGen(project_root, param_dict, bucket_name, region, boto_client, project_name, test_name, az_excludes=None)</code>","text":"Source code in <code>taskcat/_template_params.py</code> <pre><code>def __init__(\n    self,\n    project_root,\n    param_dict,\n    bucket_name,\n    region,\n    boto_client,\n    project_name,\n    test_name,\n    az_excludes=None,\n):\n    self.regxfind = CommonTools.regxfind\n    self._param_dict = param_dict\n    _missing_params = []\n    for param_name, param_value in param_dict.items():\n        if param_value is None:\n            _missing_params.append(param_name)\n    if _missing_params:\n        raise TaskCatException(\n            (\n                f\"The following parameters have no value whatsoever. \"\n                f\"The CloudFormation stack will fail to launch. \"\n                f\"Please address. str({_missing_params})\"\n            )\n        )\n    self.results = {}\n    self.mutated_params = {}\n    self.param_name = None\n    self.param_value = None\n    self.bucket_name = bucket_name\n    self._boto_client = boto_client\n    self.region = region\n    self.project_name = project_name\n    self.test_name = test_name\n    self.project_root = project_root\n    if not az_excludes:\n        self.az_excludes: Set[str] = set()\n    else:\n        self.az_excludes: Set[str] = az_excludes\n    self.transform_parameter()\n</code></pre>"},{"location":"reference/taskcat/_template_params/#taskcat._template_params.ParamGen.convert_to_str","title":"<code>convert_to_str()</code>","text":"<p>Converts a parameter value to string No parameters. Operates on (ClassInstance).param_value</p> Source code in <code>taskcat/_template_params.py</code> <pre><code>def convert_to_str(self):\n    \"\"\"\n    Converts a parameter value to string\n    No parameters. Operates on (ClassInstance).param_value\n    \"\"\"\n    if isinstance(self.param_value, (int, float, bytes)):\n        self.param_value = str(self.param_value)\n</code></pre>"},{"location":"reference/taskcat/_template_params/#taskcat._template_params.ParamGen.genpassword","title":"<code>genpassword(pass_length, pass_type=None)</code>  <code>staticmethod</code>","text":"<p>Returns a password of given length and type.</p> <p>:param pass_length: Length of the desired password :param pass_type: Type of the desired password - String only OR Alphanumeric     * A = AlphaNumeric, Example 'vGceIP8EHC' :return: Password of given length and type</p> Source code in <code>taskcat/_template_params.py</code> <pre><code>@staticmethod\ndef genpassword(pass_length, pass_type=None):\n    \"\"\"\n    Returns a password of given length and type.\n\n    :param pass_length: Length of the desired password\n    :param pass_type: Type of the desired password - String only OR Alphanumeric\n        * A = AlphaNumeric, Example 'vGceIP8EHC'\n    :return: Password of given length and type\n    \"\"\"\n\n    password = []\n    numbers = \"1234567890\"\n    lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    specialchars = \"!#$&amp;{*:[=,]-_%@+\"\n\n    # Generates password string with:\n    # lowercase,uppercase and numeric chars\n    if pass_type == \"A\":  # nosec\n\n        while len(password) &lt; pass_length:\n            password.append(random.choice(lowercase))\n            password.append(random.choice(uppercase))\n            password.append(random.choice(numbers))\n\n    # Generates password string with:\n    # lowercase,uppercase, numbers and special chars\n    elif pass_type == \"S\":\n        while len(password) &lt; pass_length:\n            password.append(random.choice(lowercase))\n            password.append(random.choice(uppercase))\n            password.append(random.choice(numbers))\n            password.append(random.choice(specialchars))\n    else:\n        # If no passtype is defined (None)\n        # Defaults to alpha-numeric\n        # Generates password string with:\n        # lowercase,uppercase, numbers and special chars\n        while len(password) &lt; pass_length:\n            password.append(random.choice(lowercase))\n            password.append(random.choice(uppercase))\n            password.append(random.choice(numbers))\n\n    if len(password) &gt; pass_length:\n        password = password[:pass_length]\n\n    return \"\".join(password)\n</code></pre>"},{"location":"reference/taskcat/_template_params/#taskcat._template_params.ParamGen.get_available_azs","title":"<code>get_available_azs(count)</code>","text":"<p>Returns a list of availability zones in a given region.</p> <p>:param count: Minimum number of availability zones needed</p> <p>:return: List of availability zones in a given region</p> Source code in <code>taskcat/_template_params.py</code> <pre><code>def get_available_azs(self, count):\n    \"\"\"\n    Returns a list of availability zones in a given region.\n\n    :param count: Minimum number of availability zones needed\n\n    :return: List of availability zones in a given region\n\n    \"\"\"\n    ec2_client = self._boto_client(\"ec2\")\n    available_azs = []\n    availability_zones = ec2_client.describe_availability_zones(\n        Filters=[{\"Name\": \"state\", \"Values\": [\"available\"]}]\n    )\n\n    for az in availability_zones[  # pylint: disable=invalid-name\n        \"AvailabilityZones\"\n    ]:\n        if az[\"ZoneId\"] in self.az_excludes:\n            continue\n        available_azs.append(az[\"ZoneName\"])\n\n    if len(available_azs) &lt; count:\n        raise TaskCatException(\n            \"!Only {0} az's are available in {1}\".format(\n                len(available_azs), self.region\n            )\n        )\n    azs = \",\".join(available_azs[:count])\n    return azs\n</code></pre>"},{"location":"reference/taskcat/_template_params/#taskcat._template_params.ParamGen.get_content","title":"<code>get_content(bucket, object_key)</code>","text":"<p>Returns the content of an object, given the bucket name and the key of the object</p> <p>:param bucket: Bucket name :param object_key: Key of the object :param object_key: Key of the object :return: Content of the object</p> Source code in <code>taskcat/_template_params.py</code> <pre><code>def get_content(self, bucket, object_key):\n    \"\"\"\n    Returns the content of an object, given the bucket name and the key of the\n    object\n\n    :param bucket: Bucket name\n    :param object_key: Key of the object\n    :param object_key: Key of the object\n    :return: Content of the object\n\n    \"\"\"\n    s3_client = self._boto_client(\"s3\")\n    try:\n        dict_object = s3_client.get_object(Bucket=bucket, Key=object_key)\n    except Exception:\n        LOG.error(\n            \"Attempted to fetch Bucket: {}, Key: {}\".format(bucket, object_key)\n        )\n        raise\n    content = dict_object[\"Body\"].read().decode(\"utf-8\").strip()\n    return content\n</code></pre>"},{"location":"reference/taskcat/_template_params/#taskcat._template_params.ParamGen.get_single_az","title":"<code>get_single_az(az_id)</code>","text":"<p>Get a single valid AZ for the region. The number passed indicates the ordinal representing the AZ returned. For instance, in the 'us-east-1' region, providing '1' as the ID would return 'us-east-1a', providing '2' would return 'us-east-1b', etc. In this way it's possible to get availability zones that are guaranteed to be different without knowing their names. :param az_id: 0-based ordinal of the AZ to get :return: The requested availability zone of the specified region.</p> Source code in <code>taskcat/_template_params.py</code> <pre><code>def get_single_az(self, az_id):\n    \"\"\"\n    Get a single valid AZ for the region.\n    The number passed indicates the ordinal representing the AZ returned.\n    For instance, in the 'us-east-1' region, providing '1' as the ID would\n    return 'us-east-1a', providing '2' would return 'us-east-1b', etc.\n    In this way it's possible to get availability zones that are\n    guaranteed to be different without knowing their names.\n    :param az_id: 0-based ordinal of the AZ to get\n    :return: The requested availability zone of the specified region.\n    \"\"\"\n\n    regional_azs = self.get_available_azs(az_id)\n    return regional_azs.split(\",\")[-1]  # pylint: disable=use-maxsplit-arg\n</code></pre>"},{"location":"reference/taskcat/_tui/","title":"tui","text":""},{"location":"reference/taskcat/_tui/#taskcat._tui","title":"<code>taskcat._tui</code>","text":""},{"location":"reference/taskcat/exceptions/","title":"Exceptions","text":""},{"location":"reference/taskcat/exceptions/#taskcat.exceptions","title":"<code>taskcat.exceptions</code>","text":"<p>TaskCat Exception Classes</p> <p>This module defines custom exception classes used throughout the TaskCat application. These exceptions provide specific error handling for various failure scenarios that can occur during CloudFormation template testing and deployment operations.</p> <p>The exception hierarchy allows for granular error handling and provides meaningful error messages to help users diagnose and resolve issues.</p>"},{"location":"reference/taskcat/exceptions/#taskcat.exceptions.InvalidActionError","title":"<code>InvalidActionError(expression, message=None)</code>","text":"<p>               Bases: <code>TaskCatException</code></p> <p>Exception raised when an invalid action or command is supplied to TaskCat.</p> <p>This exception is typically raised during command-line argument parsing or when validating user input that specifies what action TaskCat should perform.</p> <p>Attributes:</p> Name Type Description <code>expression</code> <code>str</code> <p>The invalid input expression that caused the error</p> <code>message</code> <code>str</code> <p>Human-readable error message</p> <p>Initialize the InvalidActionError exception.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>str</code> <p>The invalid input expression that triggered the error</p> required <code>message</code> <code>str</code> <p>Custom error message. If not provided, a default                    message will be generated using the expression.</p> <code>None</code> Source code in <code>taskcat/exceptions.py</code> <pre><code>def __init__(self, expression, message=None):\n    \"\"\"\n    Initialize the InvalidActionError exception.\n\n    Args:\n        expression (str): The invalid input expression that triggered the error\n        message (str, optional): Custom error message. If not provided, a default\n                               message will be generated using the expression.\n    \"\"\"\n    self.expression = expression\n\n    # Generate default message if none provided\n    if message is None:\n        message = f\"Invalid action or expression: '{expression}'\"\n\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/taskcat/exceptions/#taskcat.exceptions.TaskCatException","title":"<code>TaskCatException(message='TaskCat encountered a fatal error')</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for all TaskCat-specific errors.</p> <p>This is the parent class for all custom exceptions in TaskCat. It should be raised when TaskCat experiences a fatal error that prevents normal operation.</p> <p>This exception is typically caught at the CLI level to provide user-friendly error messages and appropriate exit codes.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>Human-readable error message describing the issue</p> <p>Initialize the TaskCat exception.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Descriptive error message. Defaults to generic message.</p> <code>'TaskCat encountered a fatal error'</code> Source code in <code>taskcat/exceptions.py</code> <pre><code>def __init__(self, message=\"TaskCat encountered a fatal error\"):\n    \"\"\"\n    Initialize the TaskCat exception.\n\n    Args:\n        message (str): Descriptive error message. Defaults to generic message.\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"reference/taskcat/local_zones/","title":"Local zones","text":""},{"location":"reference/taskcat/local_zones/#taskcat.local_zones","title":"<code>taskcat.local_zones</code>","text":""},{"location":"reference/taskcat/regions_to_partitions/","title":"Regions to partitions","text":""},{"location":"reference/taskcat/regions_to_partitions/#taskcat.regions_to_partitions","title":"<code>taskcat.regions_to_partitions</code>","text":""},{"location":"reference/taskcat/_cfn/","title":"Index","text":""},{"location":"reference/taskcat/_cfn/#taskcat._cfn","title":"<code>taskcat._cfn</code>","text":""},{"location":"reference/taskcat/_cfn/_log_stack_events/","title":"log stack events","text":""},{"location":"reference/taskcat/_cfn/_log_stack_events/#taskcat._cfn._log_stack_events","title":"<code>taskcat._cfn._log_stack_events</code>","text":""},{"location":"reference/taskcat/_cfn/stack/","title":"Stack","text":""},{"location":"reference/taskcat/_cfn/stack/#taskcat._cfn.stack","title":"<code>taskcat._cfn.stack</code>","text":""},{"location":"reference/taskcat/_cfn/stack_url_helper/","title":"Stack url helper","text":""},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper","title":"<code>taskcat._cfn.stack_url_helper</code>","text":"<p>Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper","title":"<code>StackURLHelper(template_mappings=None, template_parameters=None, parameter_values=None)</code>","text":"Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def __init__(\n    self,\n    template_mappings=None,\n    template_parameters=None,\n    parameter_values=None,\n):\n    if template_mappings:\n        self.mappings = template_mappings\n    else:\n        self.mappings = {}\n\n    if template_parameters:\n        self.template_parameters = template_parameters\n    else:\n        self.template_parameters = {}\n\n    if parameter_values:\n        self.parameter_values = parameter_values\n    else:\n        self.parameter_values = {}\n\n    default_parameters: dict = {}\n    for parameter in self.template_parameters:\n        properties = self.template_parameters.get(parameter)\n        if \"Default\" in properties.keys():\n            default_parameters[parameter] = properties[\"Default\"]\n\n    self.SUBSTITUTION.update(default_parameters)\n    self.SUBSTITUTION.update(self.parameter_values)\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.evaluate_expression_controller","title":"<code>evaluate_expression_controller(expression)</code>","text":"<p>Figure out what type of expression and pass off to handler</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def evaluate_expression_controller(self, expression):\n    \"\"\"Figure out what type of expression and pass off to handler\"\"\"\n    results = []\n\n    if \"Fn::If\" in expression:\n        results = self.evaluate_fn_if(expression)\n\n    elif \"Fn::Sub\" in expression:\n        results = self.evaluate_fn_sub(expression)\n\n    elif \"Fn::Join\" in expression:\n        results = self.evaluate_fn_join(expression)\n\n    elif \"Ref\" in expression:\n        results = self.evaluate_fn_ref(expression)\n\n    elif \"Fn::FindInMap\" in expression:\n        results = self.evaluate_fn_findinmap(expression)\n\n    elif \"Fn::GetAtt\" in expression:\n        results = self.evaluate_fn_getatt(expression)\n\n    elif \"Fn::Split\" in expression:\n        results = self.evaluate_fn_split(expression)\n\n    else:\n        # This is a NON expression repl { and } with ( and ) to break recursion\n        results.append(\"(\" + expression + \")\")\n\n    return results\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.evaluate_fn_if","title":"<code>evaluate_fn_if(expression)</code>  <code>staticmethod</code>","text":"<p>Return both possible parts of the expression</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>@staticmethod\ndef evaluate_fn_if(expression):\n    \"\"\"Return both possible parts of the expression\"\"\"\n    results = []\n    value_true = expression.split(\",\")[1].strip()\n    value_false = expression.split(\",\")[2].strip().strip(\"]\")\n    # if we don't have '' this can break things\n    results.append(\"'\" + value_true.strip(\"'\") + \"'\")\n    results.append(\"'\" + value_false.strip(\"'\") + \"'\")\n    return results\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.evaluate_fn_join","title":"<code>evaluate_fn_join(expression)</code>  <code>staticmethod</code>","text":"<p>Return the joined stuff</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>@staticmethod\ndef evaluate_fn_join(expression):\n    \"\"\"Return the joined stuff\"\"\"\n    results = []\n    new_values_list = []\n\n    temp = expression.split(\"[\")[1]\n    delimiter = temp.split(\",\")[0].strip(\"'\")\n\n    values = expression.split(\"[\")[2]\n    values = values.split(\"]]\")[0]\n\n    values_list = values.split(\", \")\n    for value in values_list:\n        new_values_list.append(value.strip(\"'\"))\n\n    result = delimiter.join(new_values_list)\n    results.append(result)\n\n    return results\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.evaluate_fn_ref","title":"<code>evaluate_fn_ref(expression)</code>","text":"<p>Since this is runtime data the best we can do is the name in place</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def evaluate_fn_ref(self, expression):\n    \"\"\"Since this is runtime data the best we can do is the name in place\"\"\"\n    # TODO: Allow user to inject RunTime values for these\n    results = []\n\n    temp = expression.split(\": \")[1]\n    # pylint: disable=consider-iterating-dictionary\n    if temp.strip(\"'\") in self.SUBSTITUTION.keys():\n        temp = self.SUBSTITUTION[temp.strip(\"'\")]\n        temp = \"'\" + temp + \"'\"\n\n    results.append(temp)\n\n    return results\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.evaluate_fn_sub","title":"<code>evaluate_fn_sub(expression)</code>","text":"<p>Return expression with values replaced</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def evaluate_fn_sub(self, expression):\n    \"\"\"Return expression with values replaced\"\"\"\n    results = []\n\n    # Builtins - Fudge some defaults here since we don't have runtime info\n    # ${AWS::Region} ${AWS::AccountId}\n    expression = self.rewrite_sub_vars_with_values(expression, self.SUBSTITUTION)\n\n    # Handle Sub of form [ StringToSub, { \"key\" : \"value\", \"key\": \"value\" }]\n    if \"[\" in expression:\n        temp_expression = expression.split(\"[\")[1].split(\",\")[0]\n        values = expression.split(\"[\")[1].split(\"(\")[1].split(\")\")[0]\n        values = self.values_to_dict(\"(\" + values + \")\")\n        temp_expression = self.rewrite_sub_vars_with_values(temp_expression, values)\n    else:\n        temp_expression = expression.split(\"': '\")[1].split(\"'\")[0]\n\n    # if we still have them we just use their values (ie: Parameters)\n    result = self.rewrite_sub_vars(temp_expression)\n\n    results.append(result)\n\n    return results\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.evaluate_string","title":"<code>evaluate_string(template_url, depth=0)</code>","text":"<p>Recursively find expressions in the URL and send them to be evaluated</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def evaluate_string(self, template_url, depth=0):\n    \"\"\"Recursively find expressions in the URL and send them to be evaluated\"\"\"\n    # Recursion bail out\n    if depth &gt; self.MAX_DEPTH:\n        raise Exception(\n            \"Template URL contains more than {} levels or nesting\".format(\n                self.MAX_DEPTH\n            )\n        )\n\n    template_urls = []\n    # Evaluate expressions\n    if \"{\" in template_url:\n        parts = template_url.split(\"{\")\n        parts = parts[-1].split(\"}\")  # Last open bracket\n\n        # This function will handle Fn::Sub Fn::If etc.\n        replacements = self.evaluate_expression_controller(\n            parts[0]\n        )  # First closed bracket after\n\n        for replacement in replacements:\n            template_url_temp = template_url\n            template_url_temp = template_url_temp.replace(\n                \"{\" + parts[0] + \"}\", replacement\n            )\n\n            evaluated_strings = self.evaluate_string(\n                template_url_temp, depth=(depth + 1)\n            )\n            for evaluated_string in evaluated_strings:\n                template_urls.append(evaluated_string)\n    else:\n        template_urls.append(template_url)\n\n    return template_urls\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.flatten_template_url","title":"<code>flatten_template_url(template_url)</code>","text":"<p>Flatten template_url and return all permutations</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def flatten_template_url(self, template_url):\n    \"\"\"Flatten template_url and return all permutations\"\"\"\n    path_list = []\n\n    url_list = self._flatten_template_controller(template_url)\n\n    # Extract the path portion from the URL\n    for url in url_list:\n        # TODO: figure where the ' is coming from\n        output = urlparse(str(url.strip(\"'\")))\n        path_list.append(output.path)\n\n    path_list = list(dict.fromkeys(path_list))\n    # print(url_list)\n    # print(path_list)\n    return path_list\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.rewrite_sub_vars","title":"<code>rewrite_sub_vars(original_string, depth=1)</code>","text":"<p>Replace the '##var##' placeholders with 'var'</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def rewrite_sub_vars(self, original_string, depth=1):\n    \"\"\"Replace the '##var##' placeholders with 'var'\"\"\"\n    if \"##\" not in original_string:\n        return original_string\n\n    parts = original_string.split(\"##\")\n    parts = parts[1].split(\"##\")\n\n    rep_text = \"##\" + parts[0] + \"##\"\n    rep_with = \"\" + parts[0] + \"\"\n\n    result = original_string.replace(rep_text, rep_with)\n\n    if \"##\" in result:  # Recurse if we have more variables\n        result = self.rewrite_sub_vars(result, depth=depth + 1)\n\n    return result\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.rewrite_sub_vars_with_values","title":"<code>rewrite_sub_vars_with_values(expression, values)</code>  <code>staticmethod</code>","text":"<p>Rewrite sub vars with actual variable values</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>@staticmethod\ndef rewrite_sub_vars_with_values(expression, values):\n    \"\"\"Rewrite sub vars with actual variable values\"\"\"\n    result = expression\n\n    # replace each key we have a value for\n    for key in values:\n        rep_text = \"##\" + key + \"##\"\n        rep_with = \"\" + str(values[key]) + \"\"\n\n        result = result.replace(rep_text, rep_with)\n\n    return result\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.rewrite_vars","title":"<code>rewrite_vars(original_string, depth=1)</code>","text":"<p>Replace the ${var} placeholders with ##var##</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>def rewrite_vars(self, original_string, depth=1):\n    \"\"\"Replace the ${var} placeholders with ##var##\"\"\"\n    parts = original_string.split(\"${\")\n    parts = parts[1].split(\"}\")\n\n    rep_text = \"${\" + parts[0] + \"}\"\n    rep_with = \"##\" + parts[0] + \"##\"\n\n    result = original_string.replace(rep_text, rep_with)\n\n    if len(result.split(\"${\")) &gt; 1:\n        result = self.rewrite_vars(result, depth=depth + 1)\n\n    return result\n</code></pre>"},{"location":"reference/taskcat/_cfn/stack_url_helper/#taskcat._cfn.stack_url_helper.StackURLHelper.values_to_dict","title":"<code>values_to_dict(values)</code>  <code>staticmethod</code>","text":"<p>Rewrite sub vars with actual variable values</p> Source code in <code>taskcat/_cfn/stack_url_helper.py</code> <pre><code>@staticmethod\ndef values_to_dict(values):\n    \"\"\"Rewrite sub vars with actual variable values\"\"\"\n    # Create dictionary of values\n    values_dict_string = values.replace(\"(\", \"{\")\n    values_dict_string = values_dict_string.replace(\")\", \"}\")\n    values_dict_string = values_dict_string.replace(\"'\", '\"')\n\n    # for values or keys not quoted\n    # Split by :\n    values_split_string = values_dict_string\n    # Trim stuff so we can get the key values\n    values_split_string = values_split_string.replace(\" \", \"\")\n    values_split_string = values_split_string.replace(\"{\", \"\")\n    values_split_string = values_split_string.replace(\"}\", \"\")\n\n    values_split = values_split_string.split(\",\")\n    values_split_final = []\n    for value in values_split:\n        values = value.split(\":\")\n        values_split_final.extend(values)\n\n    for value in values_split_final:\n        if value[0] != \"'\" and value[-1] != \"'\":\n            if value[0] != '\"' and value[-1] != '\"':\n                values_dict_string = values_dict_string.replace(\n                    value, '\"' + value + '\"'\n                )\n\n    values_dict = json.loads(values_dict_string)\n\n    return values_dict\n</code></pre>"},{"location":"reference/taskcat/_cfn/template/","title":"Template","text":""},{"location":"reference/taskcat/_cfn/template/#taskcat._cfn.template","title":"<code>taskcat._cfn.template</code>","text":""},{"location":"reference/taskcat/_cfn/template/#taskcat._cfn.template.Template","title":"<code>Template(template_path, project_root='', url='', s3_key_prefix='', template_cache=tcat_template_cache)</code>","text":"Source code in <code>taskcat/_cfn/template.py</code> <pre><code>def __init__(\n    self,\n    template_path: Union[str, Path],\n    project_root: Union[str, Path] = \"\",\n    url: str = \"\",\n    s3_key_prefix: str = \"\",\n    template_cache: TemplateCache = tcat_template_cache,\n):\n    self.template_cache = template_cache\n    self.template_path: Path = Path(template_path).expanduser().resolve()\n    self.template = self.template_cache.get(str(self.template_path))\n    with open(template_path, \"r\", encoding=\"utf-8\") as file_handle:\n        self.raw_template = file_handle.read()\n    project_root = (\n        project_root if project_root else self.template_path.parent.parent\n    )\n    self.project_root = Path(project_root).expanduser().resolve()\n    self.url = url\n    self._s3_key_prefix = s3_key_prefix\n    self.children: List[Template] = []\n    self._find_children()\n</code></pre>"},{"location":"reference/taskcat/_cfn/template/#taskcat._cfn.template.Template.write","title":"<code>write()</code>","text":"<p>writes raw_template back to file, and reloads decoded template, useful if the template has been modified</p> Source code in <code>taskcat/_cfn/template.py</code> <pre><code>def write(self):\n    \"\"\"writes raw_template back to file, and reloads decoded template, useful if\n    the template has been modified\"\"\"\n    with open(str(self.template_path), \"w\", encoding=\"utf-8\") as file_handle:\n        file_handle.write(self.raw_template)\n    self.template = cfnlint.decode.cfn_yaml.load(self.template_path)\n    self._find_children()\n</code></pre>"},{"location":"reference/taskcat/_cfn/threaded/","title":"Threaded","text":""},{"location":"reference/taskcat/_cfn/threaded/#taskcat._cfn.threaded","title":"<code>taskcat._cfn.threaded</code>","text":""},{"location":"reference/taskcat/_cli_modules/","title":"Index","text":""},{"location":"reference/taskcat/_cli_modules/#taskcat._cli_modules","title":"<code>taskcat._cli_modules</code>","text":""},{"location":"reference/taskcat/_cli_modules/config/","title":"Config","text":""},{"location":"reference/taskcat/_cli_modules/config/#taskcat._cli_modules.config","title":"<code>taskcat._cli_modules.config</code>","text":""},{"location":"reference/taskcat/_cli_modules/config/#taskcat._cli_modules.config.ConvertConfig","title":"<code>ConvertConfig</code>","text":"<p>Mutating actions regarding the config file</p>"},{"location":"reference/taskcat/_cli_modules/config/#taskcat._cli_modules.config.ConvertConfig.convert","title":"<code>convert(project_root='./')</code>  <code>staticmethod</code>","text":"<p>Converts config from legacy to new format.</p> Source code in <code>taskcat/_cli_modules/config.py</code> <pre><code>@staticmethod\ndef convert(\n    project_root: str = \"./\",\n):  # pylint: disable=too-many-locals\n    \"\"\"Converts config from legacy to new format.\"\"\"\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    parse_legacy_config(project_root_path)\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/delete/","title":"Delete","text":""},{"location":"reference/taskcat/_cli_modules/delete/#taskcat._cli_modules.delete","title":"<code>taskcat._cli_modules.delete</code>","text":""},{"location":"reference/taskcat/_cli_modules/delete/#taskcat._cli_modules.delete.Delete","title":"<code>Delete(project, aws_profile='default', region='ALL', no_verify=False, stack_type='ALL', wait_for_delete=False)</code>","text":"<p>[ALPHA] Deletes an installed project in an AWS account/region</p> <p>:param project: installed project to delete, can be an install name, uuid, or project name :param aws_profile: aws profile to use for deletion :param region: region(s) to delete from, by default, will delete all applicable            stacks, supply a csv \"us-east-1,us-west-1\" to override this default :param no_verify: ignore region verification, delete will not error if an invalid            region is detected :param stack_type: type of stacks to delete, allowable options are [\"project\",\"test\",\"ALL\"] :param wait_for_delete: if True, wait for CloudFormation stacks to be deleted before continuing,     allowable options are [\"True\", \"False\"]</p> Source code in <code>taskcat/_cli_modules/delete.py</code> <pre><code>def __init__(\n    self,\n    project: str,\n    aws_profile: str = \"default\",\n    region=\"ALL\",\n    no_verify: bool = False,\n    stack_type: str = \"ALL\",\n    wait_for_delete: bool = False,\n):\n    \"\"\"\n    :param project: installed project to delete, can be an install name, uuid, or project name\n    :param aws_profile: aws profile to use for deletion\n    :param region: region(s) to delete from, by default, will delete all applicable\\\n        stacks, supply a csv \"us-east-1,us-west-1\" to override this default\n    :param no_verify: ignore region verification, delete will not error if an invalid\\\n        region is detected\n    :param stack_type: type of stacks to delete, allowable options are [\"project\",\"test\",\"ALL\"]\n    :param wait_for_delete: if True, wait for CloudFormation stacks to be deleted before continuing,\n        allowable options are [\"True\", \"False\"]\n    \"\"\"\n    regions = []\n    boto3_cache = Boto3Cache()\n    if region == \"default\":\n        regions = boto3_cache.get_default_region(aws_profile)\n    elif region == \"ALL\":\n        region_set: set = set()\n        region_set = region_set.union(\n            # pylint: disable=duplicate-code\n            set(\n                boto3.Session(profile_name=aws_profile).get_available_regions(\n                    \"cloudformation\"\n                )\n            )\n        )\n        regions = list(region_set)\n    elif isinstance(region, str):\n        regions = (\n            self._validate_regions(region) if not no_verify else region.split(\",\")\n        )\n    stacks = Stacker.list_stacks([aws_profile], regions)\n    jobs = []\n    for stack in stacks:\n        name = stack.get(\"taskcat-installer\", stack[\"taskcat-project-name\"])\n        job = {\n            \"name\": name,\n            \"project_name\": stack[\"taskcat-project-name\"],\n            \"test_name\": stack[\"taskcat-test-name\"],\n            \"taskcat_id\": stack[\"taskcat-id\"].hex,\n            \"region\": stack[\"region\"],\n            \"stack_id\": stack[\"stack-id\"],\n        }\n        if stack_type in [\"project\", \"ALL\"] and project in [\n            job[\"name\"],\n            job[\"taskcat_id\"],\n            \"ALL\",\n        ]:\n            jobs.append(job)\n        if stack_type in [\"test\", \"ALL\"] and project in [\n            job[\"project_name\"],\n            \"ALL\",\n        ]:\n            jobs.append(job)\n    with ThreadPoolExecutor() as executor:\n        stack_futures = {\n            executor.submit(\n                self._delete_stack,\n                boto3_cache=boto3_cache,\n                job=job,\n                aws_profile=aws_profile,\n                wait_for_delete=wait_for_delete,\n            ): [job[\"name\"], job[\"region\"]]\n            for job in jobs\n        }\n\n        for stack_future in as_completed(stack_futures):\n            name_and_region = stack_futures[stack_future]\n            try:\n                stack_future.result()\n            # pylint: disable=broad-except\n            except Exception:\n                LOG.error(f\"{name_and_region[0]} failed in {name_and_region[1]}\")\n            else:\n                LOG.info(f\"{name_and_region[0]} deleted in {name_and_region[1]}\")\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/deploy/","title":"Deploy","text":""},{"location":"reference/taskcat/_cli_modules/deploy/#taskcat._cli_modules.deploy","title":"<code>taskcat._cli_modules.deploy</code>","text":""},{"location":"reference/taskcat/_cli_modules/deploy/#taskcat._cli_modules.deploy.Deploy","title":"<code>Deploy</code>","text":"<p>[ALPHA] installs a stack into an AWS account/regions</p>"},{"location":"reference/taskcat/_cli_modules/deploy/#taskcat._cli_modules.deploy.Deploy.list","title":"<code>list(profiles='default', regions='ALL')</code>  <code>staticmethod</code>","text":"<p>:param profiles: comma separated list of aws profiles to search :param regions: comma separated list of regions to search, default is to check all commercial regions</p> Source code in <code>taskcat/_cli_modules/deploy.py</code> <pre><code>@staticmethod\ndef list(profiles: str = \"default\", regions=\"ALL\"):\n    \"\"\"\n    :param profiles: comma separated list of aws profiles to search\n    :param regions: comma separated list of regions to search, default is to check\n    all commercial regions\n    \"\"\"\n    List(profiles=profiles, regions=regions, stack_type=\"project\")\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/deploy/#taskcat._cli_modules.deploy.Deploy.run","title":"<code>run(project='./', test_names='ALL', regions='ALL', name='', input_file='./.taskcat.yml')</code>","text":"<p>:param project: name of project to install can be a path to a local project,        a github org/repo, or an AWS Quick Start name :param test_names: comma separated list of tests (specified in .taskcat.yml) to run            defaults to the 'default' test. Set to 'ALL' to deploy every entry :param regions: comma separated list of regions to test in        default :param name: stack name to use, if not specified one will be automatically        generated :param input_file: path to either a taskcat project config file or a CloudFormation template</p> Source code in <code>taskcat/_cli_modules/deploy.py</code> <pre><code>def run(  # noqa: C901\n    self,\n    project: str = \"./\",\n    test_names: str = \"ALL\",\n    regions: str = \"ALL\",\n    name=\"\",\n    input_file: str = \"./.taskcat.yml\",\n):\n    \"\"\"\n    :param project: name of project to install can be a path to a local project,\\\n    a github org/repo, or an AWS Quick Start name\n    :param test_names: comma separated list of tests (specified in .taskcat.yml) to run\\\n        defaults to the 'default' test. Set to 'ALL' to deploy every entry\n    :param regions: comma separated list of regions to test in\\\n    default\n    :param name: stack name to use, if not specified one will be automatically\\\n    generated\n    :param input_file: path to either a taskcat project config file or a CloudFormation template\n    \"\"\"\n    if not name:\n        name = generate_name()\n    path = Path(project).resolve()\n    if Path(project).resolve().is_dir():\n        package_type = \"local\"\n    elif \"/\" in project:\n        package_type = \"github\"\n    else:  # assuming it's an AWS Quick Start\n        package_type = \"github\"\n        project = f\"aws-quickstart/quickstart-{project}\"\n    if package_type == \"github\":\n        if project.startswith(\"https://\") or project.startswith(\"git@\"):\n            url = project\n            org, repo = (\n                project.replace(\".git\", \"\").replace(\":\", \"/\").split(\"/\")[-2:]\n            )\n        else:\n            org, repo = project.split(\"/\")\n            url = f\"https://github.com/{org}/{repo}.git\"\n        path = Deploy.PKG_CACHE_PATH / org / repo\n        LOG.info(f\"fetching git repo {url}\")\n        self._git_clone(url, path)\n        self._recurse_submodules(path, url)\n    _extra_tags = [(Tag({\"Key\": \"taskcat-installer\", \"Value\": name}))]\n    Test.run(\n        regions=regions,\n        no_delete=True,\n        project_root=path,\n        test_names=test_names,\n        input_file=input_file,\n        _extra_tags=_extra_tags,\n    )\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/generate_config/","title":"Generate config","text":""},{"location":"reference/taskcat/_cli_modules/generate_config/#taskcat._cli_modules.generate_config","title":"<code>taskcat._cli_modules.generate_config</code>","text":""},{"location":"reference/taskcat/_cli_modules/generate_config/#taskcat._cli_modules.generate_config.GenerateConfig","title":"<code>GenerateConfig(output_file='.taskcat.yml', main_template='./templates/template.yaml', user_email='noreply@example.com', project_root='./', aws_region='us-east-1', replace=False)</code>","text":"<p>[ALPHA] Introspects CFN Template(s) and generates a taskcat configuration file necessary to successfully run taskcat.</p> Source code in <code>taskcat/_cli_modules/generate_config.py</code> <pre><code>def __init__(\n    self,\n    output_file: str = \".taskcat.yml\",\n    main_template: str = \"./templates/template.yaml\",\n    user_email: str = \"noreply@example.com\",\n    project_root: str = \"./\",\n    aws_region: str = \"us-east-1\",\n    replace: bool = False,\n):\n\n    project_root_path = Path(project_root).expanduser().resolve()\n    if not project_root_path.exists():\n        raise TaskCatException(\n            f\"Project root path {project_root_path} does not exist\"\n        )\n    ConfigGenerator(\n        main_template=main_template,\n        output_file=output_file,\n        project_root_path=str(project_root_path),\n        owner_email=user_email,\n        aws_region=aws_region,\n        replace=replace,\n    ).generate_config()\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/generate_iam_policy/","title":"Generate iam policy","text":""},{"location":"reference/taskcat/_cli_modules/generate_iam_policy/#taskcat._cli_modules.generate_iam_policy","title":"<code>taskcat._cli_modules.generate_iam_policy</code>","text":""},{"location":"reference/taskcat/_cli_modules/generate_iam_policy/#taskcat._cli_modules.generate_iam_policy.GenerateIAMPolicy","title":"<code>GenerateIAMPolicy(output_file='./cfn_stack_policy.json', project_root='./')</code>","text":"<p>[ALPHA] Introspects CFN Template(s) and generates an IAM policy necessary to successfully launch the template(s)</p> Source code in <code>taskcat/_cli_modules/generate_iam_policy.py</code> <pre><code>def __init__(\n    self, output_file: str = \"./cfn_stack_policy.json\", project_root: str = \"./\"\n):\n    project_root_path = Path(project_root).expanduser().resolve()\n\n    config = Config.create(project_root=project_root_path)\n\n    CFNPolicyGenerator(config, output_file).generate_policy()\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/lint/","title":"Lint","text":""},{"location":"reference/taskcat/_cli_modules/lint/#taskcat._cli_modules.lint","title":"<code>taskcat._cli_modules.lint</code>","text":""},{"location":"reference/taskcat/_cli_modules/lint/#taskcat._cli_modules.lint.Lint","title":"<code>Lint(input_file='.taskcat.yml', project_root='./', strict=False)</code>","text":"<p>checks CloudFormation templates for issues using cfn-python-lint</p> <p>:param input_file: path to project config or CloudFormation template :param project_root: base path for project :param strict: fail on lint warnings as well as errors</p> Source code in <code>taskcat/_cli_modules/lint.py</code> <pre><code>def __init__(\n    self,\n    input_file: str = \".taskcat.yml\",\n    project_root: str = \"./\",\n    strict: bool = False,\n):\n    \"\"\"\n    :param input_file: path to project config or CloudFormation template\n    :param project_root: base path for project\n    :param strict: fail on lint warnings as well as errors\n    \"\"\"\n\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    input_file_path: Path = project_root_path / input_file\n    config = Config.create(\n        project_root=project_root_path, project_config_path=input_file_path\n    )\n\n    templates = config.get_templates()\n    lint = TaskCatLint(config, templates, strict)\n    errors = lint.lints[1]\n    lint.output_results()\n    if errors or not lint.passed:\n        raise TaskCatException(\"Lint failed with errors\")\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/list/","title":"List","text":""},{"location":"reference/taskcat/_cli_modules/list/#taskcat._cli_modules.list","title":"<code>taskcat._cli_modules.list</code>","text":""},{"location":"reference/taskcat/_cli_modules/list/#taskcat._cli_modules.list.List","title":"<code>List(profiles='default', regions='ALL', stack_type='ALL')</code>","text":"<p>[ALPHA] lists taskcat jobs with active stacks</p> <p>:param profiles: comma separated list of aws profiles to search :param regions: comma separated list of regions to search, default is to check             all commercial regions :param stack_type: type of stacks to check, options are 'test', 'project', or 'ALL'.             default is 'ALL'</p> Source code in <code>taskcat/_cli_modules/list.py</code> <pre><code>def __init__(  # noqa: C901\n    self,\n    profiles: Union[str, ListType[str]] = \"default\",\n    regions=\"ALL\",\n    stack_type=\"ALL\",\n):\n    \"\"\"\n    :param profiles: comma separated list of aws profiles to search\n    :param regions: comma separated list of regions to search, default is to check \\\n        all commercial regions\n    :param stack_type: type of stacks to check, options are 'test', 'project', or 'ALL'. \\\n        default is 'ALL'\n    \"\"\"\n    if isinstance(profiles, str):\n        profiles = profiles.split(\",\")\n    if regions == \"ALL\":\n        region_set: set = set()\n        for profile in profiles:\n            region_set = region_set.union(\n                set(\n                    boto3.Session(profile_name=profile).get_available_regions(\n                        \"cloudformation\"\n                    )\n                )\n            )\n        regions = list(region_set)\n    else:\n        regions = regions.split(\",\")\n    stacks = Stacker.list_stacks(profiles, regions)\n    jobs: dict = {}\n    for stack in stacks:\n        stack_key = stack[\"taskcat-id\"].hex + \"-\" + stack[\"region\"]\n        if stack_key not in jobs:\n            name = stack.get(\"taskcat-installer\")\n            if stack_type == \"ALL\":\n                if not name:\n                    name = stack[\"taskcat-project-name\"]\n                jobs[stack_key] = {\n                    \"name\": name,\n                    \"id\": stack[\"taskcat-id\"].hex,\n                    \"project_name\": stack[\"taskcat-project-name\"],\n                    \"active_stacks\": 1,\n                    \"region\": stack[\"region\"],\n                }\n            elif stack_type == \"test\" and not name:\n                name = stack[\"taskcat-project-name\"]\n                jobs[stack_key] = {\n                    \"name\": name,\n                    \"id\": stack[\"taskcat-id\"].hex,\n                    \"project_name\": stack[\"taskcat-project-name\"],\n                    \"active_stacks\": 1,\n                    \"region\": stack[\"region\"],\n                }\n            elif name and stack_type == \"project\":\n                jobs[stack_key] = {\n                    \"name\": name,\n                    \"id\": stack[\"taskcat-id\"].hex,\n                    \"project_name\": stack[\"taskcat-project-name\"],\n                    \"active_stacks\": 1,\n                    \"region\": stack[\"region\"],\n                }\n        else:\n            jobs[stack_key][\"active_stacks\"] += 1\n\n    longest_name = List._longest([v[\"name\"] for _, v in jobs.items()])\n    longest_project_name = List._longest(\n        [v[\"project_name\"] for _, v in jobs.items()]\n    )\n    if not jobs:\n        LOG.info(\"no stacks found\")\n        return\n    if stack_type != \"test\":\n        header = (\n            f\"NAME{List._spaces(longest_name)}PROJECT{List._spaces(longest_project_name)}\"\n            f\"ID{List._spaces(34)}REGION\"\n        )\n        column = \"{}    {}       {}    {}\"\n    else:\n        header = f\"NAME{List._spaces(longest_name)}ID{List._spaces(34)}REGION\"\n        column = \"{}    {}    {}\"\n    LOG.error(header, extra={\"nametag\": \"\"})\n    for job in jobs.values():\n        args = [\n            List._pad(job[\"name\"], longest_name),\n            List._pad(job[\"project_name\"], longest_project_name),\n            job[\"id\"],\n            job[\"region\"],\n        ]\n        if stack_type == \"test\":\n            args = [List._pad(job[\"name\"], longest_name), job[\"id\"], job[\"region\"]]\n        LOG.error(column.format(*args), extra={\"nametag\": \"\"})\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/package/","title":"Package","text":""},{"location":"reference/taskcat/_cli_modules/package/#taskcat._cli_modules.package","title":"<code>taskcat._cli_modules.package</code>","text":""},{"location":"reference/taskcat/_cli_modules/package/#taskcat._cli_modules.package.Package","title":"<code>Package(project_root='./', source_folder='lambda_functions/source', zip_folder='lambda_functions/packages', config_file='.taskcat.yml', from_ref=None, to_ref=None)</code>","text":"<p>packages lambda source files into zip files. If a dockerfile is present in a source folder, it will be run prior to zipping the contents</p> <p>:param project_root: base path for project :param source_folder: folder containing the lambda source files, relative to the project_root :param zip_folder: folder to output zip files, relative to the project root :param config_file: path to taskcat project config file</p> Source code in <code>taskcat/_cli_modules/package.py</code> <pre><code>def __init__(\n    self,\n    project_root: str = \"./\",\n    source_folder: str = \"lambda_functions/source\",\n    zip_folder: str = \"lambda_functions/packages\",\n    config_file: str = \".taskcat.yml\",\n    from_ref: str = None,\n    to_ref: str = None,\n):\n    \"\"\"\n    :param project_root: base path for project\n    :param source_folder: folder containing the lambda source files, relative to the\n    project_root\n    :param zip_folder: folder to output zip files, relative to the project root\n    :param config_file: path to taskcat project config file\n    \"\"\"\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    project_config: Path = project_root_path / config_file\n    config = Config.create(\n        project_config_path=project_config,\n        project_root=project_root_path,\n        args={\n            \"project\": {\n                \"lambda_zip_path\": zip_folder,\n                \"lambda_source_path\": source_folder,\n            }\n        },\n    )\n    if not config.config.project.package_lambda:\n        LOG.info(\"Lambda packaging disabled by config\")\n        return\n    LambdaBuild(config, project_root_path, from_ref, to_ref)\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/package_single/","title":"Package single","text":""},{"location":"reference/taskcat/_cli_modules/package_single/#taskcat._cli_modules.package_single","title":"<code>taskcat._cli_modules.package_single</code>","text":""},{"location":"reference/taskcat/_cli_modules/package_single/#taskcat._cli_modules.package_single.PackageSingle","title":"<code>PackageSingle(project_root='./', source_folder='lambda_functions/source', zip_folder='lambda_functions/packages', from_ref=None, to_ref=None, name=None)</code>","text":"<p>packages lambda source files into zip files. If a dockerfile is present in a source folder, it will be run prior to zipping the contents</p> <p>:param project_root: base path for project :param source_folder: folder containing the lambda source files, relative to the project_root :param zip_folder: folder to output zip files, relative to the project root :param config_file: path to taskcat project config file</p> Source code in <code>taskcat/_cli_modules/package_single.py</code> <pre><code>def __init__(\n    self,\n    project_root: str = \"./\",\n    source_folder: str = \"lambda_functions/source\",\n    zip_folder: str = \"lambda_functions/packages\",\n    from_ref: str = None,\n    to_ref: str = None,\n    name: str = None,\n):\n    \"\"\"\n    :param project_root: base path for project\n    :param source_folder: folder containing the lambda source files, relative to the\n    project_root\n    :param zip_folder: folder to output zip files, relative to the project root\n    :param config_file: path to taskcat project config file\n    \"\"\"\n    _pc = None\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    if not PROJECT.exists():\n        _fd, _path = tempfile.mkstemp()\n        _path = Path(_path).expanduser().resolve()\n        _d = {\"project\": {\"name\": \"blah\", \"regions\": [\"us-east-1\"]}}\n        with open(_path, \"w\", encoding=\"utf8\") as _f:\n            _f.write(yaml.dump(_d))\n        _pc = _path\n\n    config = Config.create(\n        project_config_path=_pc if _pc else None,\n        project_root=project_root_path,\n        args={\n            \"project\": {\n                \"lambda_zip_path\": zip_folder,\n                \"lambda_source_path\": source_folder,\n            }\n        },\n    )\n    if not config.config.project.package_lambda:\n        LOG.info(\"Lambda packaging disabled by config\")\n        return\n    LambdaBuild(config, project_root_path, from_ref, to_ref, name)\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/test/","title":"Test","text":""},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test","title":"<code>taskcat._cli_modules.test</code>","text":""},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test.Test","title":"<code>Test</code>","text":"<p>Performs functional tests on CloudFormation templates.</p>"},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test.Test.clean","title":"<code>clean(project, aws_profile='default', region='ALL', wait_for_delete=False)</code>  <code>staticmethod</code>","text":"<p>:param project: project to delete, can be an name or uuid, or ALL to clean all tests :param aws_profile: aws profile to use for deletion :param region: region to delete from, default will scan all regions :param wait_for_delete: wait for stacks to be deleted before returning</p> Source code in <code>taskcat/_cli_modules/test.py</code> <pre><code>@staticmethod\ndef clean(\n    project: str,\n    aws_profile: str = \"default\",\n    region=\"ALL\",\n    wait_for_delete: bool = False,\n):\n    \"\"\"\n    :param project: project to delete, can be an name or uuid, or ALL to clean all\n    tests\n    :param aws_profile: aws profile to use for deletion\n    :param region: region to delete from, default will scan all regions\n    :param wait_for_delete: wait for stacks to be deleted before returning\n    \"\"\"\n    Delete(\n        project=project,\n        aws_profile=aws_profile,\n        region=region,\n        stack_type=\"test\",\n        wait_for_delete=wait_for_delete,\n    )\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test.Test.list","title":"<code>list(profiles='default', regions='ALL')</code>  <code>staticmethod</code>","text":"<p>:param profiles: comma separated list of aws profiles to search :param regions: comma separated list of regions to search, default is to check all commercial regions</p> Source code in <code>taskcat/_cli_modules/test.py</code> <pre><code>@staticmethod\ndef list(profiles: str = \"default\", regions=\"ALL\"):\n    \"\"\"\n    :param profiles: comma separated list of aws profiles to search\n    :param regions: comma separated list of regions to search, default is to check\n    all commercial regions\n    \"\"\"\n    List(profiles=profiles, regions=regions, stack_type=\"test\")\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test.Test.resume","title":"<code>resume(run_id)</code>","text":"<p>resumes a monitoring of a previously started test run</p> Source code in <code>taskcat/_cli_modules/test.py</code> <pre><code>def resume(self, run_id):\n    \"\"\"resumes a monitoring of a previously started test run\"\"\"\n    # do some stuff\n    raise NotImplementedError()\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test.Test.retry","title":"<code>retry(region, stack_name, resource_name, config_file='./.taskcat.yml', project_root='./', no_delete=False, keep_failed=False, minimal_output=False, dont_wait_for_delete=False)</code>  <code>staticmethod</code>","text":"<p>[ALPHA] re-launches a child stack using the same parameters as previous launch</p> <p>:param region: region stack is in :param stack_name: name of parent stack :param resource_name: logical id of child stack that will be re-launched :param config_file: path to either a taskcat project config file or a CloudFormation template :param project_root: root path of the project relative to input_file :param no_delete: don't delete stacks after test is complete :param keep_failed: do not delete failed stacks :param minimal_output: Reduces output during test runs :param dont_wait_for_delete: Exits immediately after calling stack_delete</p> Source code in <code>taskcat/_cli_modules/test.py</code> <pre><code>@staticmethod\ndef retry(\n    region: str,\n    stack_name: str,\n    resource_name: str,\n    config_file: str = \"./.taskcat.yml\",\n    project_root: str = \"./\",\n    no_delete: bool = False,\n    keep_failed: bool = False,\n    minimal_output: bool = False,\n    dont_wait_for_delete: bool = False,\n):\n    \"\"\"[ALPHA] re-launches a child stack using the same parameters as previous\n    launch\n\n    :param region: region stack is in\n    :param stack_name: name of parent stack\n    :param resource_name: logical id of child stack that will be re-launched\n    :param config_file: path to either a taskcat project config file or a\n    CloudFormation template\n    :param project_root: root path of the project relative to input_file\n    :param no_delete: don't delete stacks after test is complete\n    :param keep_failed: do not delete failed stacks\n    :param minimal_output: Reduces output during test runs\n    :param dont_wait_for_delete: Exits immediately after calling stack_delete\n    \"\"\"\n    LOG.warning(\"test retry is in alpha feature, use with caution\")\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    input_file_path: Path = project_root_path / config_file\n    config = Config.create(\n        project_root=project_root_path, project_config_path=input_file_path\n    )\n    profile = determine_profile_for_region(config.config.general.auth, region)\n    cfn = boto3.Session(profile_name=profile).client(\n        \"cloudformation\", region_name=region\n    )\n    events = cfn.describe_stack_events(StackName=stack_name)[\"StackEvents\"]\n    resource = [i for i in events if i[\"LogicalResourceId\"] == resource_name][0]\n    properties = yaml.safe_load(resource[\"ResourceProperties\"])\n\n    with open(str(input_file_path), \"r\", encoding=\"utf-8\") as filepointer:\n        config_yaml = yaml.safe_load(filepointer)\n\n    config_yaml[\"project\"][\"regions\"] = [region]\n    config_yaml[\"project\"][\"parameters\"] = properties[\"Parameters\"]\n    config_yaml[\"project\"][\"template\"] = \"/\".join(\n        properties[\"TemplateURL\"].split(\"/\")[4:]\n    )\n    config_yaml[\"tests\"] = {\"default\": {}}\n\n    tmpdir = tempfile.mkdtemp()\n    name = \".taskcat.yml.temp\"\n    umask = os.umask(0o77)\n    file_path = os.path.join(tmpdir, name)\n    try:\n        with open(file_path, \"w\", encoding=\"utf-8\") as filepointer:  # nosec\n            yaml.safe_dump(config_yaml, filepointer)\n        if resource[\"PhysicalResourceId\"]:\n            cfn.delete_stack(StackName=resource[\"PhysicalResourceId\"])\n            LOG.info(\"waiting for old stack to delete...\")\n            cfn.get_waiter(\"stack_delete_complete\").wait(\n                StackName=resource[\"PhysicalResourceId\"]\n            )\n\n        Test.run(\n            input_file=file_path,  # nosec\n            project_root=project_root,\n            lint_disable=True,\n            no_delete=no_delete,\n            keep_failed=keep_failed,\n            minimal_output=minimal_output,\n            dont_wait_for_delete=dont_wait_for_delete,\n        )\n    except IOError:\n        LOG.error(\"IOError when retrying Test Run\")\n        sys.exit(1)\n    else:\n        os.remove(file_path)\n    finally:\n        os.umask(umask)\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/test/#taskcat._cli_modules.test.Test.run","title":"<code>run(test_names='ALL', regions='ALL', input_file='./.taskcat.yml', project_root='./', no_delete=False, lint_disable=False, enable_sig_v2=False, keep_failed=False, output_directory='./taskcat_outputs', minimal_output=False, dont_wait_for_delete=False, skip_upload=False, _extra_tags=None)</code>  <code>staticmethod</code>","text":"<p>tests whether CloudFormation templates are able to successfully launch :param test_names: comma separated list of tests to run :param regions: comma separated list of regions to test in :param input_file: path to either a taskcat project config file or a CloudFormation template :param project_root: root path of the project relative to input_file :param no_delete: don't delete stacks after test is complete :param lint_disable: disable cfn-lint checks :param enable_sig_v2: enable legacy sigv2 requests for auto-created buckets :param keep_failed: do not delete failed stacks :param output_directory: Where to store generated logfiles :param minimal_output: Reduces output during test runs :param dont_wait_for_delete: Exits immediately after calling stack_delete :param skip_upload: Use templates in an existing cloudformation bucket.</p> Source code in <code>taskcat/_cli_modules/test.py</code> <pre><code>@staticmethod\n# pylint: disable=too-many-arguments,W0613,line-too-long\ndef run(  # noqa: C901\n    test_names: str = \"ALL\",\n    regions: str = \"ALL\",\n    input_file: str = \"./.taskcat.yml\",\n    project_root: str = \"./\",\n    no_delete: bool = False,\n    lint_disable: bool = False,\n    enable_sig_v2: bool = False,\n    keep_failed: bool = False,\n    output_directory: str = \"./taskcat_outputs\",\n    minimal_output: bool = False,\n    dont_wait_for_delete: bool = False,\n    skip_upload: bool = False,\n    _extra_tags: List = None,\n):\n    \"\"\"tests whether CloudFormation templates are able to successfully launch\n    :param test_names: comma separated list of tests to run\n    :param regions: comma separated list of regions to test in\n    :param input_file: path to either a taskcat project config file or a CloudFormation template\n    :param project_root: root path of the project relative to input_file\n    :param no_delete: don't delete stacks after test is complete\n    :param lint_disable: disable cfn-lint checks\n    :param enable_sig_v2: enable legacy sigv2 requests for auto-created buckets\n    :param keep_failed: do not delete failed stacks\n    :param output_directory: Where to store generated logfiles\n    :param minimal_output: Reduces output during test runs\n    :param dont_wait_for_delete: Exits immediately after calling stack_delete\n    :param skip_upload: Use templates in an existing cloudformation bucket.\n    \"\"\"  # noqa: B950\n\n    test = CFNTest.from_file(\n        project_root=project_root,\n        input_file=input_file,\n        regions=regions,\n        enable_sig_v2=enable_sig_v2,\n    )\n\n    # This code is temporary and should be removed once its easier\n    # to create a config object\n    frame = inspect.currentframe()\n\n    if frame is not None:\n        args, _, _, values = inspect.getargvalues(frame)\n\n        for i in args:\n            if hasattr(test, i):\n                setattr(test, i, values[i])\n\n    terminal_printer = TerminalPrinter(minimalist=minimal_output)\n\n    test.printer = terminal_printer\n\n    # Runs here\n    with test:\n        test.report(output_directory)\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/update_ami/","title":"Update ami","text":""},{"location":"reference/taskcat/_cli_modules/update_ami/#taskcat._cli_modules.update_ami","title":"<code>taskcat._cli_modules.update_ami</code>","text":""},{"location":"reference/taskcat/_cli_modules/update_ami/#taskcat._cli_modules.update_ami.UpdateAMI","title":"<code>UpdateAMI(project_root='./')</code>","text":"<p>Updates AMI IDs within CloudFormation templates</p> <p>:param project_root: base path for project</p> Source code in <code>taskcat/_cli_modules/update_ami.py</code> <pre><code>def __init__(self, project_root: str = \"./\"):\n    \"\"\"\n    :param project_root: base path for project\n    \"\"\"\n\n    if project_root == \"./\":\n        _project_root = Path(os.getcwd())\n    else:\n        _project_root = Path(project_root)\n\n    config = Config.create(\n        project_root=_project_root,\n        project_config_path=Path(_project_root / \".taskcat.yml\"),\n    )\n\n    amiupdater = AMIUpdater(config=config)\n    try:\n        amiupdater.update_amis()\n    except AMIUpdaterCommitNeededException:\n        exit_with_code(100)\n    except AMIUpdaterFatalException:\n        exit_with_code(1)\n</code></pre>"},{"location":"reference/taskcat/_cli_modules/upload/","title":"Upload","text":""},{"location":"reference/taskcat/_cli_modules/upload/#taskcat._cli_modules.upload","title":"<code>taskcat._cli_modules.upload</code>","text":""},{"location":"reference/taskcat/_cli_modules/upload/#taskcat._cli_modules.upload.Upload","title":"<code>Upload(config_file='./.taskcat.yml', project_root='./', enable_sig_v2=False, bucket_name='', disable_lambda_packaging=False, key_prefix='', dry_run=False, object_acl='', exclude_prefix=None)</code>","text":"<p>Uploads project to S3.</p> <p>does lambda packaging and uploads to s3</p> <p>:param config_file: path to taskcat project config file :param enable_sig_v2: enable legacy sigv2 requests for auto-created buckets :param bucket_name: set bucket name instead of generating it. If regional buckets are enabled, will use this as a prefix :param disable_lambda_packaging: skip packaging step :param key_prefix: provide a custom key-prefix for uploading to S3. This will be used instead of <code>project</code> =&gt; <code>name</code> in the config :param dry_run: identify changes needed but do not upload to S3.</p> Source code in <code>taskcat/_cli_modules/upload.py</code> <pre><code>@CliCore.longform_param_required(\"exclude_prefix\")\n@CliCore.longform_param_required(\"dry_run\")\ndef __init__(\n    self,\n    config_file: str = \"./.taskcat.yml\",\n    project_root: str = \"./\",\n    enable_sig_v2: bool = False,\n    bucket_name: str = \"\",\n    disable_lambda_packaging: bool = False,\n    key_prefix: str = \"\",\n    dry_run: bool = False,\n    object_acl: str = \"\",\n    exclude_prefix: list = None,\n):  # pylint: disable=too-many-locals\n    \"\"\"does lambda packaging and uploads to s3\n\n    :param config_file: path to taskcat project config file\n    :param enable_sig_v2: enable legacy sigv2 requests for auto-created buckets\n    :param bucket_name: set bucket name instead of generating it. If regional\n    buckets are enabled, will use this as a prefix\n    :param disable_lambda_packaging: skip packaging step\n    :param key_prefix: provide a custom key-prefix for uploading to S3. This\n    will be used instead of `project` =&gt; `name` in the config\n    :param dry_run: identify changes needed but do not upload to S3.\n    \"\"\"\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    input_file_path: Path = project_root_path / config_file\n    args: Dict[str, Any] = {\"project\": {\"s3_enable_sig_v2\": enable_sig_v2}}\n    if object_acl:\n        args[\"project\"][\"s3_object_acl\"] = object_acl\n    if bucket_name:\n        args[\"project\"][\"s3_bucket\"] = bucket_name\n    if key_prefix:\n        args[\"project\"][\"name\"] = key_prefix\n    config = Config.create(\n        project_root=project_root_path,\n        project_config_path=input_file_path,\n        args=args,\n    )\n    boto3_cache = Boto3Cache()\n    if (\n        config.config.project.package_lambda\n        and disable_lambda_packaging is not True\n    ):\n        LambdaBuild(config, project_root_path)\n    buckets = config.get_buckets(boto3_cache)\n    stage_in_s3(\n        buckets,\n        config.config.project.name,\n        config.project_root,\n        exclude_prefix,\n        dry_run,\n    )\n</code></pre>"},{"location":"reference/taskcat/iam_policy/","title":"Index","text":""},{"location":"reference/taskcat/iam_policy/#taskcat.iam_policy","title":"<code>taskcat.iam_policy</code>","text":""},{"location":"reference/taskcat/iam_policy/policy/","title":"Policy","text":""},{"location":"reference/taskcat/iam_policy/policy/#taskcat.iam_policy.policy","title":"<code>taskcat.iam_policy.policy</code>","text":""},{"location":"reference/taskcat/iam_policy/tools/","title":"Tools","text":""},{"location":"reference/taskcat/iam_policy/tools/#taskcat.iam_policy.tools","title":"<code>taskcat.iam_policy.tools</code>","text":""},{"location":"reference/taskcat/project_config/","title":"Index","text":""},{"location":"reference/taskcat/project_config/#taskcat.project_config","title":"<code>taskcat.project_config</code>","text":""},{"location":"reference/taskcat/project_config/config/","title":"Config","text":""},{"location":"reference/taskcat/project_config/config/#taskcat.project_config.config","title":"<code>taskcat.project_config.config</code>","text":""},{"location":"reference/taskcat/project_config/tools/","title":"Tools","text":""},{"location":"reference/taskcat/project_config/tools/#taskcat.project_config.tools","title":"<code>taskcat.project_config.tools</code>","text":""},{"location":"reference/taskcat/testing/","title":"Index","text":""},{"location":"reference/taskcat/testing/#taskcat.testing","title":"<code>taskcat.testing</code>","text":""},{"location":"reference/taskcat/testing/#taskcat.testing.CFNTest","title":"<code>CFNTest(config, printer=None, test_names='ALL', regions='ALL', skip_upload=False, lint_disable=False, no_delete=False, keep_failed=False, dont_wait_for_delete=True, _extra_tags=None)</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>Tests Cloudformation template by making sure the stack can properly deploy in the specified regions.</p> <p>The constructor creates a test from the given Config object.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>A pre-configured Taskcat Config instance.</p> required <code>printer</code> <code>Union[TerminalPrinter, None]</code> <p>A printer object that will handle Test output. Defaults to TerminalPrinter.</p> <code>None</code> <code>test_names</code> <code>str</code> <p>A comma separated list of tests to run. Defaults to \"ALL\".</p> <code>'ALL'</code> <code>regions</code> <code>str</code> <p>A comma separated list of regions to test in. Defaults to \"ALL\".</p> <code>'ALL'</code> <code>skip_upload</code> <code>bool</code> <p>Use templates in an existing cloudformation bucket. Defaults to False.</p> <code>False</code> <code>lint_disable</code> <code>bool</code> <p>Disable linting with cfn-lint. Defaults to False.</p> <code>False</code> <code>no_delete</code> <code>bool</code> <p>Don't delete stacks after test is complete. Defaults to False.</p> <code>False</code> <code>keep_failed</code> <code>bool</code> <p>Don't delete failed stacks. Defaults to False.</p> <code>False</code> <code>dont_wait_for_delete</code> <code>bool</code> <p>Exits immediately after calling stack_delete. Defaults to True.</p> <code>True</code> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def __init__(\n    self,\n    config: Config,\n    printer: Union[TerminalPrinter, None] = None,\n    test_names: str = \"ALL\",\n    regions: str = \"ALL\",\n    skip_upload: bool = False,\n    lint_disable: bool = False,\n    no_delete: bool = False,\n    keep_failed: bool = False,\n    dont_wait_for_delete: bool = True,\n    _extra_tags: list = None,\n):\n    \"\"\"The constructor creates a test from the given Config object.\n\n    Args:\n        config (Config): A pre-configured Taskcat Config instance.\n        printer (Union[TerminalPrinter, None], optional): A printer object that will handle Test output. Defaults to TerminalPrinter.\n        test_names (str, optional): A comma separated list of tests to run. Defaults to \"ALL\".\n        regions (str, optional): A comma separated list of regions to test in. Defaults to \"ALL\".\n        skip_upload (bool, optional): Use templates in an existing cloudformation bucket. Defaults to False.\n        lint_disable (bool, optional): Disable linting with cfn-lint. Defaults to False.\n        no_delete (bool, optional): Don't delete stacks after test is complete. Defaults to False.\n        keep_failed (bool, optional): Don't delete failed stacks. Defaults to False.\n        dont_wait_for_delete (bool, optional): Exits immediately after calling stack_delete. Defaults to True.\n    \"\"\"  # noqa: B950\n    super().__init__(config)\n    self.test_definition: Stacker\n    self.test_names = test_names\n    self.regions = regions\n    self.skip_upload = skip_upload\n    self.lint_disable = lint_disable\n    self.no_delete = no_delete\n    self.keep_failed = keep_failed\n    self.dont_wait_for_delete = dont_wait_for_delete\n    self._extra_tags = _extra_tags if _extra_tags else []\n\n    if printer is None:\n        self.printer = TerminalPrinter(minimalist=True)\n    else:\n        self.printer = printer\n</code></pre>"},{"location":"reference/taskcat/testing/#taskcat.testing.CFNTest.clean_up","title":"<code>clean_up()</code>","text":"<p>Deletes the Test related resources in AWS.</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If one or more stacks failed to create.</p> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def clean_up(self) -&gt; None:  # noqa: C901\n    \"\"\"Deletes the Test related resources in AWS.\n\n    Raises:\n        TaskCatException: If one or more stacks failed to create.\n    \"\"\"\n\n    if not hasattr(self, \"test_definition\"):\n        LOG.warning(\"No stacks were created... skipping cleanup.\")\n        return\n\n    status = self.test_definition.status()\n\n    # Delete Stacks\n    if self.no_delete:\n        LOG.info(\"Skipping delete due to cli argument\")\n    elif self.keep_failed:\n        if len(status[\"COMPLETE\"]) &gt; 0:\n            LOG.info(\"deleting successful stacks\")\n            self.test_definition.delete_stacks({\"status\": \"CREATE_COMPLETE\"})\n    else:\n        self.test_definition.delete_stacks()\n\n    if not self.dont_wait_for_delete:\n        self.printer.report_test_progress(stacker=self.test_definition)\n\n    # TODO: summarise stack statusses (did they complete/delete ok) and print any\n    #  error events\n\n    # Delete Templates and Buckets\n    buckets = self.config.get_buckets()\n\n    if not self.no_delete or (\n        self.keep_failed is True and len(status[\"FAILED\"]) == 0\n    ):\n        deleted: ListType[str] = []\n        for test in buckets.values():\n            for bucket in test.values():\n                if (bucket.name not in deleted) and not bucket.regional_buckets:\n                    bucket.delete(delete_objects=True)\n                    deleted.append(bucket.name)\n\n    # 9. raise if something failed\n    # - grabbing the status again to ensure everything deleted OK.\n\n    status = self.test_definition.status()\n    if len(status[\"FAILED\"]) &gt; 0:\n        raise TaskCatException(\n            f'One or more stacks failed to create: {status[\"FAILED\"]}'\n        )\n</code></pre>"},{"location":"reference/taskcat/testing/#taskcat.testing.CFNTest.report","title":"<code>report(output_directory='./taskcat_outputs')</code>","text":"<p>Generates a report of the status of Cloudformation stacks.</p> <p>Parameters:</p> Name Type Description Default <code>output_directory</code> <code>str</code> <p>The directory to save the report in. Defaults to \"./taskcat_outputs\".</p> <code>'./taskcat_outputs'</code> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def report(\n    self,\n    output_directory: str = \"./taskcat_outputs\",\n):\n    \"\"\"Generates a report of the status of Cloudformation stacks.\n\n    Args:\n        output_directory (str, optional): The directory to save the report in. Defaults to \"./taskcat_outputs\".\n    \"\"\"  # noqa: B950\n    report_path = Path(output_directory).resolve()\n    report_path.mkdir(exist_ok=True)\n    cfn_logs = _CfnLogTools()\n    cfn_logs.createcfnlogs(self.test_definition, report_path)\n    ReportBuilder(\n        self.test_definition, report_path / \"index.html\"\n    ).generate_report()\n</code></pre>"},{"location":"reference/taskcat/testing/#taskcat.testing.CFNTest.run","title":"<code>run()</code>","text":"<p>Deploys the required Test resources in AWS.</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If skip_upload is set without specifying s3_bucket in config.</p> <code>TaskCatException</code> <p>If linting fails with errors.</p> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Deploys the required Test resources in AWS.\n\n    Raises:\n        TaskCatException: If skip_upload is set without specifying s3_bucket in config.\n        TaskCatException: If linting fails with errors.\n    \"\"\"\n    _trim_regions(self.regions, self.config)\n    _trim_tests(self.test_names, self.config)\n\n    boto3_cache = Boto3Cache()\n\n    templates = self.config.get_templates()\n\n    if self.skip_upload and not self.config.config.project.s3_bucket:\n        raise TaskCatException(\n            \"cannot skip_buckets without specifying s3_bucket in config\"\n        )\n\n    buckets = self.config.get_buckets(boto3_cache)\n\n    if not self.skip_upload:\n        # 1. lint\n        if not self.lint_disable:\n            lint = TaskCatLint(self.config, templates)\n            errors = lint.lints[1]\n            lint.output_results()\n            if errors or not lint.passed:\n                raise TaskCatException(\"Lint failed with errors\")\n        # 2. build lambdas\n        if self.config.config.project.package_lambda:\n            LambdaBuild(self.config, self.config.project_root)\n        # 3. s3 sync\n        stage_in_s3(\n            buckets, self.config.config.project.name, self.config.project_root, []\n        )\n    regions = self.config.get_regions(boto3_cache)\n    parameters = self.config.get_rendered_parameters(buckets, regions, templates)\n    tests = self.config.get_tests(templates, regions, buckets, parameters)\n\n    # Check if we have any valid test if NOT log a message\n    if not tests:\n        LOG.warning(\"No valid test found.\")\n\n    # pre-hooks\n    execute_hooks(\"prehooks\", self.config, tests, parameters)\n\n    self.test_definition = Stacker(\n        self.config.config.project.name,\n        tests,\n        shorten_stack_name=self.config.config.project.shorten_stack_name,\n        tags=self._extra_tags,\n    )\n    self.test_definition.create_stacks()\n\n    # post-hooks\n    # TODO: pass in outputs, once there is a standard interface for a test_definition\n    execute_hooks(\"posthooks\", self.config, tests, parameters)\n\n    self.printer.report_test_progress(stacker=self.test_definition)\n\n    self.passed = True\n    self.result = self.test_definition.stacks\n</code></pre>"},{"location":"reference/taskcat/testing/_abstract_test/","title":"abstract test","text":""},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test","title":"<code>taskcat.testing._abstract_test</code>","text":""},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test.Test","title":"<code>Test</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract Test class the forces subclasses to implement a run method to be called to start a test run and a clean_up method to be called afterwards. All subclasses must have a config, passed and result property.</p>"},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test.Test.config","title":"<code>config</code>  <code>abstractmethod</code> <code>property</code> <code>writable</code>","text":"<p>Get or set the current Test configuration.</p>"},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test.Test.passed","title":"<code>passed</code>  <code>abstractmethod</code> <code>property</code> <code>writable</code>","text":"<p>Get the result of the current test. Defaults to False if test hasn't run.</p>"},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test.Test.result","title":"<code>result</code>  <code>abstractmethod</code> <code>property</code> <code>writable</code>","text":"<p>Get the result of the Test. Defaults to None if test hasn't run.</p>"},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test.Test.clean_up","title":"<code>clean_up()</code>  <code>abstractmethod</code>","text":"<p>Clean up after the Test.</p> Source code in <code>taskcat/testing/_abstract_test.py</code> <pre><code>@abstractmethod\ndef clean_up(self) -&gt; None:\n    \"\"\"Clean up after the Test.\"\"\"\n</code></pre>"},{"location":"reference/taskcat/testing/_abstract_test/#taskcat.testing._abstract_test.Test.run","title":"<code>run()</code>  <code>abstractmethod</code>","text":"<p>Run the Test.</p> Source code in <code>taskcat/testing/_abstract_test.py</code> <pre><code>@abstractmethod\ndef run(self) -&gt; None:\n    \"\"\"Run the Test.\"\"\"\n</code></pre>"},{"location":"reference/taskcat/testing/_cfn_test/","title":"cfn test","text":""},{"location":"reference/taskcat/testing/_cfn_test/#taskcat.testing._cfn_test","title":"<code>taskcat.testing._cfn_test</code>","text":""},{"location":"reference/taskcat/testing/_cfn_test/#taskcat.testing._cfn_test.CFNTest","title":"<code>CFNTest(config, printer=None, test_names='ALL', regions='ALL', skip_upload=False, lint_disable=False, no_delete=False, keep_failed=False, dont_wait_for_delete=True, _extra_tags=None)</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>Tests Cloudformation template by making sure the stack can properly deploy in the specified regions.</p> <p>The constructor creates a test from the given Config object.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>A pre-configured Taskcat Config instance.</p> required <code>printer</code> <code>Union[TerminalPrinter, None]</code> <p>A printer object that will handle Test output. Defaults to TerminalPrinter.</p> <code>None</code> <code>test_names</code> <code>str</code> <p>A comma separated list of tests to run. Defaults to \"ALL\".</p> <code>'ALL'</code> <code>regions</code> <code>str</code> <p>A comma separated list of regions to test in. Defaults to \"ALL\".</p> <code>'ALL'</code> <code>skip_upload</code> <code>bool</code> <p>Use templates in an existing cloudformation bucket. Defaults to False.</p> <code>False</code> <code>lint_disable</code> <code>bool</code> <p>Disable linting with cfn-lint. Defaults to False.</p> <code>False</code> <code>no_delete</code> <code>bool</code> <p>Don't delete stacks after test is complete. Defaults to False.</p> <code>False</code> <code>keep_failed</code> <code>bool</code> <p>Don't delete failed stacks. Defaults to False.</p> <code>False</code> <code>dont_wait_for_delete</code> <code>bool</code> <p>Exits immediately after calling stack_delete. Defaults to True.</p> <code>True</code> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def __init__(\n    self,\n    config: Config,\n    printer: Union[TerminalPrinter, None] = None,\n    test_names: str = \"ALL\",\n    regions: str = \"ALL\",\n    skip_upload: bool = False,\n    lint_disable: bool = False,\n    no_delete: bool = False,\n    keep_failed: bool = False,\n    dont_wait_for_delete: bool = True,\n    _extra_tags: list = None,\n):\n    \"\"\"The constructor creates a test from the given Config object.\n\n    Args:\n        config (Config): A pre-configured Taskcat Config instance.\n        printer (Union[TerminalPrinter, None], optional): A printer object that will handle Test output. Defaults to TerminalPrinter.\n        test_names (str, optional): A comma separated list of tests to run. Defaults to \"ALL\".\n        regions (str, optional): A comma separated list of regions to test in. Defaults to \"ALL\".\n        skip_upload (bool, optional): Use templates in an existing cloudformation bucket. Defaults to False.\n        lint_disable (bool, optional): Disable linting with cfn-lint. Defaults to False.\n        no_delete (bool, optional): Don't delete stacks after test is complete. Defaults to False.\n        keep_failed (bool, optional): Don't delete failed stacks. Defaults to False.\n        dont_wait_for_delete (bool, optional): Exits immediately after calling stack_delete. Defaults to True.\n    \"\"\"  # noqa: B950\n    super().__init__(config)\n    self.test_definition: Stacker\n    self.test_names = test_names\n    self.regions = regions\n    self.skip_upload = skip_upload\n    self.lint_disable = lint_disable\n    self.no_delete = no_delete\n    self.keep_failed = keep_failed\n    self.dont_wait_for_delete = dont_wait_for_delete\n    self._extra_tags = _extra_tags if _extra_tags else []\n\n    if printer is None:\n        self.printer = TerminalPrinter(minimalist=True)\n    else:\n        self.printer = printer\n</code></pre>"},{"location":"reference/taskcat/testing/_cfn_test/#taskcat.testing._cfn_test.CFNTest.clean_up","title":"<code>clean_up()</code>","text":"<p>Deletes the Test related resources in AWS.</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If one or more stacks failed to create.</p> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def clean_up(self) -&gt; None:  # noqa: C901\n    \"\"\"Deletes the Test related resources in AWS.\n\n    Raises:\n        TaskCatException: If one or more stacks failed to create.\n    \"\"\"\n\n    if not hasattr(self, \"test_definition\"):\n        LOG.warning(\"No stacks were created... skipping cleanup.\")\n        return\n\n    status = self.test_definition.status()\n\n    # Delete Stacks\n    if self.no_delete:\n        LOG.info(\"Skipping delete due to cli argument\")\n    elif self.keep_failed:\n        if len(status[\"COMPLETE\"]) &gt; 0:\n            LOG.info(\"deleting successful stacks\")\n            self.test_definition.delete_stacks({\"status\": \"CREATE_COMPLETE\"})\n    else:\n        self.test_definition.delete_stacks()\n\n    if not self.dont_wait_for_delete:\n        self.printer.report_test_progress(stacker=self.test_definition)\n\n    # TODO: summarise stack statusses (did they complete/delete ok) and print any\n    #  error events\n\n    # Delete Templates and Buckets\n    buckets = self.config.get_buckets()\n\n    if not self.no_delete or (\n        self.keep_failed is True and len(status[\"FAILED\"]) == 0\n    ):\n        deleted: ListType[str] = []\n        for test in buckets.values():\n            for bucket in test.values():\n                if (bucket.name not in deleted) and not bucket.regional_buckets:\n                    bucket.delete(delete_objects=True)\n                    deleted.append(bucket.name)\n\n    # 9. raise if something failed\n    # - grabbing the status again to ensure everything deleted OK.\n\n    status = self.test_definition.status()\n    if len(status[\"FAILED\"]) &gt; 0:\n        raise TaskCatException(\n            f'One or more stacks failed to create: {status[\"FAILED\"]}'\n        )\n</code></pre>"},{"location":"reference/taskcat/testing/_cfn_test/#taskcat.testing._cfn_test.CFNTest.report","title":"<code>report(output_directory='./taskcat_outputs')</code>","text":"<p>Generates a report of the status of Cloudformation stacks.</p> <p>Parameters:</p> Name Type Description Default <code>output_directory</code> <code>str</code> <p>The directory to save the report in. Defaults to \"./taskcat_outputs\".</p> <code>'./taskcat_outputs'</code> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def report(\n    self,\n    output_directory: str = \"./taskcat_outputs\",\n):\n    \"\"\"Generates a report of the status of Cloudformation stacks.\n\n    Args:\n        output_directory (str, optional): The directory to save the report in. Defaults to \"./taskcat_outputs\".\n    \"\"\"  # noqa: B950\n    report_path = Path(output_directory).resolve()\n    report_path.mkdir(exist_ok=True)\n    cfn_logs = _CfnLogTools()\n    cfn_logs.createcfnlogs(self.test_definition, report_path)\n    ReportBuilder(\n        self.test_definition, report_path / \"index.html\"\n    ).generate_report()\n</code></pre>"},{"location":"reference/taskcat/testing/_cfn_test/#taskcat.testing._cfn_test.CFNTest.run","title":"<code>run()</code>","text":"<p>Deploys the required Test resources in AWS.</p> <p>Raises:</p> Type Description <code>TaskCatException</code> <p>If skip_upload is set without specifying s3_bucket in config.</p> <code>TaskCatException</code> <p>If linting fails with errors.</p> Source code in <code>taskcat/testing/_cfn_test.py</code> <pre><code>def run(self) -&gt; None:\n    \"\"\"Deploys the required Test resources in AWS.\n\n    Raises:\n        TaskCatException: If skip_upload is set without specifying s3_bucket in config.\n        TaskCatException: If linting fails with errors.\n    \"\"\"\n    _trim_regions(self.regions, self.config)\n    _trim_tests(self.test_names, self.config)\n\n    boto3_cache = Boto3Cache()\n\n    templates = self.config.get_templates()\n\n    if self.skip_upload and not self.config.config.project.s3_bucket:\n        raise TaskCatException(\n            \"cannot skip_buckets without specifying s3_bucket in config\"\n        )\n\n    buckets = self.config.get_buckets(boto3_cache)\n\n    if not self.skip_upload:\n        # 1. lint\n        if not self.lint_disable:\n            lint = TaskCatLint(self.config, templates)\n            errors = lint.lints[1]\n            lint.output_results()\n            if errors or not lint.passed:\n                raise TaskCatException(\"Lint failed with errors\")\n        # 2. build lambdas\n        if self.config.config.project.package_lambda:\n            LambdaBuild(self.config, self.config.project_root)\n        # 3. s3 sync\n        stage_in_s3(\n            buckets, self.config.config.project.name, self.config.project_root, []\n        )\n    regions = self.config.get_regions(boto3_cache)\n    parameters = self.config.get_rendered_parameters(buckets, regions, templates)\n    tests = self.config.get_tests(templates, regions, buckets, parameters)\n\n    # Check if we have any valid test if NOT log a message\n    if not tests:\n        LOG.warning(\"No valid test found.\")\n\n    # pre-hooks\n    execute_hooks(\"prehooks\", self.config, tests, parameters)\n\n    self.test_definition = Stacker(\n        self.config.config.project.name,\n        tests,\n        shorten_stack_name=self.config.config.project.shorten_stack_name,\n        tags=self._extra_tags,\n    )\n    self.test_definition.create_stacks()\n\n    # post-hooks\n    # TODO: pass in outputs, once there is a standard interface for a test_definition\n    execute_hooks(\"posthooks\", self.config, tests, parameters)\n\n    self.printer.report_test_progress(stacker=self.test_definition)\n\n    self.passed = True\n    self.result = self.test_definition.stacks\n</code></pre>"},{"location":"reference/taskcat/testing/_hooks/","title":"hooks","text":""},{"location":"reference/taskcat/testing/_hooks/#taskcat.testing._hooks","title":"<code>taskcat.testing._hooks</code>","text":""},{"location":"reference/taskcat/testing/_lint_test/","title":"lint test","text":""},{"location":"reference/taskcat/testing/_lint_test/#taskcat.testing._lint_test","title":"<code>taskcat.testing._lint_test</code>","text":""},{"location":"reference/taskcat/testing/_lint_test/#taskcat.testing._lint_test.LintTest","title":"<code>LintTest(config)</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>Lints Cloudformation Templates using cfn-lint. (Not yet implemented)</p> <p>Creates a Test from an existing Config object.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>A pre-configured Taskcat Config instance.</p> required Source code in <code>taskcat/testing/_lint_test.py</code> <pre><code>def __init__(self, config: Config):  # pylint: disable=W0235\n    \"\"\"Creates a Test from an existing Config object.\n\n    Args:\n        config (Config): A pre-configured Taskcat Config instance.\n    \"\"\"\n    super().__init__(config)\n</code></pre>"},{"location":"reference/taskcat/testing/_lint_test/#taskcat.testing._lint_test.LintTest.clean_up","title":"<code>clean_up()</code>","text":"<p>Cleans up cfn-lint Test resources.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Thrown until this class is implemented.</p> Source code in <code>taskcat/testing/_lint_test.py</code> <pre><code>def clean_up(self):\n    \"\"\"Cleans up cfn-lint Test resources.\n\n    Raises:\n        NotImplementedError: Thrown until this class is implemented.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/taskcat/testing/_lint_test/#taskcat.testing._lint_test.LintTest.run","title":"<code>run()</code>","text":"<p>Runs cfn-lint againt the Test templates.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Thrown until this class is implemented.</p> Source code in <code>taskcat/testing/_lint_test.py</code> <pre><code>def run(self):\n    \"\"\"Runs cfn-lint againt the Test templates.\n\n    Raises:\n        NotImplementedError: Thrown until this class is implemented.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/taskcat/testing/_unit_test/","title":"unit test","text":""},{"location":"reference/taskcat/testing/_unit_test/#taskcat.testing._unit_test","title":"<code>taskcat.testing._unit_test</code>","text":""},{"location":"reference/taskcat/testing/_unit_test/#taskcat.testing._unit_test.UnitTest","title":"<code>UnitTest(config)</code>","text":"<p>               Bases: <code>BaseTest</code></p> <p>UnitTest Cloudformation locally without deploying them to AWS.</p> <p>Creates a Test from an existing Config object.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>A pre-configured Taskcat Config instance.</p> required Source code in <code>taskcat/testing/_unit_test.py</code> <pre><code>def __init__(self, config: Config):  # pylint: disable=W0235\n    \"\"\"Creates a Test from an existing Config object.\n\n    Args:\n        config (Config): A pre-configured Taskcat Config instance.\n    \"\"\"\n    super().__init__(config)\n</code></pre>"},{"location":"reference/taskcat/testing/_unit_test/#taskcat.testing._unit_test.UnitTest.clean_up","title":"<code>clean_up()</code>","text":"<p>Cleans up after the Test.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Thrown until this class is implemented.</p> Source code in <code>taskcat/testing/_unit_test.py</code> <pre><code>def clean_up(self):  # pylint: disable=W0221\n    \"\"\"Cleans up after the Test.\n\n    Raises:\n        NotImplementedError: Thrown until this class is implemented.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/taskcat/testing/_unit_test/#taskcat.testing._unit_test.UnitTest.run","title":"<code>run()</code>","text":"<p>Renders out any AWS Variables or Conditionals from the Test templates.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Thrown until this class is implemented.</p> Source code in <code>taskcat/testing/_unit_test.py</code> <pre><code>def run(self):  # pylint: disable=W0221\n    \"\"\"Renders out any AWS Variables or Conditionals from the Test templates.\n\n    Raises:\n        NotImplementedError: Thrown until this class is implemented.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/taskcat/testing/base_test/","title":"Base test","text":""},{"location":"reference/taskcat/testing/base_test/#taskcat.testing.base_test","title":"<code>taskcat.testing.base_test</code>","text":""},{"location":"reference/taskcat/testing/base_test/#taskcat.testing.base_test.BaseTest","title":"<code>BaseTest(config)</code>","text":"<p>               Bases: <code>Test</code></p> <p>A Generic Test Class that implements the passed and uid properties. Any subclass will still need to implement the the run and clean_up methods.</p> Source code in <code>taskcat/testing/base_test.py</code> <pre><code>def __init__(self, config: Config):\n    self.config: Config = config\n    self.passed: bool = False\n    self.result: Any = None\n</code></pre>"},{"location":"reference/taskcat/testing/base_test/#taskcat.testing.base_test.BaseTest.from_dict","title":"<code>from_dict(input_config, project_root='./', regions='ALL', enable_sig_v2=False)</code>  <code>classmethod</code>","text":"<p>Creates a Test from a Taskcat configuration in dictionary form.</p> <p>Parameters:</p> Name Type Description Default <code>input_config</code> <code>dict</code> <p>A Taskcat configuration in the form of a dict.</p> required <code>project_root</code> <code>str</code> <p>The path to the directory with your template and config file. Defaults to \"./\".</p> <code>'./'</code> <code>regions</code> <code>str</code> <p>A comma separated list of regions to test in. Defaults to \"ALL\".</p> <code>'ALL'</code> <code>enable_sig_v2</code> <code>bool</code> <p>Enable legacy sigv2 requests for auto-created buckets. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>Returns a Test instance.</p> Source code in <code>taskcat/testing/base_test.py</code> <pre><code>@classmethod\ndef from_dict(\n    cls: Type[T],\n    input_config: dict,\n    project_root: str = \"./\",\n    regions: str = \"ALL\",\n    enable_sig_v2: bool = False,\n) -&gt; T:\n    \"\"\"Creates a Test from a Taskcat configuration in dictionary form.\n\n    Args:\n        input_config (dict): A Taskcat configuration in the form of a dict.\n        project_root (str, optional): The path to the directory with your template and config file. Defaults to \"./\".\n        regions (str, optional): A comma separated list of regions to test in. Defaults to \"ALL\".\n        enable_sig_v2 (bool, optional): Enable legacy sigv2 requests for auto-created buckets. Defaults to False.\n\n    Returns:\n        T: Returns a Test instance.\n    \"\"\"  # noqa: B950\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n\n    # pylint: disable=too-many-arguments\n    args = _build_args(enable_sig_v2, regions, GLOBAL_ARGS.profile)\n\n    sources = [\n        {\"source\": \"Manual\", \"config\": input_config},\n        {\"source\": \"CliArgument\", \"config\": args},\n    ]\n\n    config = Config(\n        uid=uuid.uuid4(), project_root=project_root_path, sources=sources\n    )\n\n    return cls(config)\n</code></pre>"},{"location":"reference/taskcat/testing/base_test/#taskcat.testing.base_test.BaseTest.from_file","title":"<code>from_file(project_root='./', input_file='./.taskcat.yml', regions='ALL', enable_sig_v2=False)</code>  <code>classmethod</code>","text":"<p>Creates a Test from a Taskcat config file.</p> <p>Parameters:</p> Name Type Description Default <code>project_root</code> <code>str</code> <p>The path to the directory with your template and config file. Defaults to \"./\".</p> <code>'./'</code> <code>input_file</code> <code>str</code> <p>The name of the Taskcat confile file. Defaults to \"./.taskcat.yml\".</p> <code>'./.taskcat.yml'</code> <code>regions</code> <code>str</code> <p>A comma separated list of regions to test in. Defaults to \"ALL\".</p> <code>'ALL'</code> <code>enable_sig_v2</code> <code>bool</code> <p>Enable legacy sigv2 requests for auto-created buckets. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>Returns a Test instance.</p> Source code in <code>taskcat/testing/base_test.py</code> <pre><code>@classmethod\ndef from_file(\n    cls: Type[T],\n    project_root: str = \"./\",\n    input_file: str = \"./.taskcat.yml\",\n    regions: str = \"ALL\",\n    enable_sig_v2: bool = False,\n) -&gt; T:\n    \"\"\"Creates a Test from a Taskcat config file.\n\n    Args:\n        project_root (str, optional): The path to the directory with your template and config file. Defaults to \"./\".\n        input_file (str, optional): The name of the Taskcat confile file. Defaults to \"./.taskcat.yml\".\n        regions (str, optional): A comma separated list of regions to test in. Defaults to \"ALL\".\n        enable_sig_v2 (bool, optional): Enable legacy sigv2 requests for auto-created buckets. Defaults to False.\n\n    Returns:\n        T: Returns a Test instance.\n    \"\"\"  # noqa: B950\n    project_root_path: Path = Path(project_root).expanduser().resolve()\n    input_file_path: Path = project_root_path / input_file\n    # pylint: disable=too-many-arguments\n    args = _build_args(enable_sig_v2, regions, GLOBAL_ARGS.profile)\n    config = Config.create(\n        project_root=project_root_path,\n        project_config_path=input_file_path,\n        args=args,\n        # TODO: detect if input file is taskcat config or CloudFormation template\n    )\n\n    return cls(config)\n</code></pre>"},{"location":"schema/taskcat_schema/","title":"Taskcat schema","text":"Schema Docs Expand all Collapse all Type: object <p>Taskcat configuration file</p> No Additional Properties general root  generalType: object Default: {\"artifact_regions\": null, \"auth\": null, \"parameters\": null, \"posthooks\": null, \"prehooks\": null, \"regions\": null, \"s3_bucket\": null, \"s3_regional_buckets\": null, \"tags\": null} <p>General configuration settings.</p> No Additional Properties artifact_regions root  general artifact_regionsType: array of string <p>List of AWS regions where artifacts need to be copied. This helps same region artifact bucket access to resources</p> Each item of this array must be: root  general artifact_regions artifact_regions itemsType: string <p>AWS Region name</p> Must match regular expression: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code> Example: <pre>\"us-east-1\"\n</pre> auth root  general authType: object <p>AWS authentication section</p> Example: <pre>{\n    \"cn-northwest-1\": \"china-profile\",\n    \"default\": \"my-default-profile\",\n    \"us-east-2\": \"specific-profile-for-us-east-2\"\n}\n</pre> Additional Properties <p>Each additional property must conform to the following schema</p> root  general auth additionalPropertiesType: string parameters root  general parametersType: object <p>Parameter key-values to pass to CloudFormation, parameters provided in global config take precedence</p> Additional Properties <p>Each additional property must conform to the following schema</p> root  general parameters additionalProperties One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li></ul> root  general parameters additionalProperties oneOf item 0Type: string root  general parameters additionalProperties oneOf item 1Type: integer root  general parameters additionalProperties oneOf item 2Type: boolean root  general parameters additionalProperties oneOf item 3Type: array Each item of this array must be: root  general parameters additionalProperties oneOf item 3 item 3 items One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root  general parameters additionalProperties oneOf item 3 item 3 items oneOf item 0Type: integer root  general parameters additionalProperties oneOf item 3 item 3 items oneOf item 1Type: string posthooks root  general posthooksType: array <p>hooks to execute after executing tests</p> Each item of this array must be: root  general posthooks HookDataType: object <p>Hook definition</p> No Additional Properties config root  general posthooks posthooks items configType: object <p>hook configuration</p> type root  general posthooks posthooks items typeType: string <p>hook type</p> prehooks root  general prehooksType: array <p>hooks to execute prior to executing tests</p> Each item of this array must be: root  general prehooks HookDataType: object <p>Hook definition</p> Same definition as general_posthooks_items regions root  general regionsType: array of string <p>List of AWS regions</p> Each item of this array must be: root  general regions regions itemsType: string <p>AWS Region name</p> Must match regular expression: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code> Example: <pre>\"us-east-1\"\n</pre> s3_bucket root  general s3_bucketType: string <p>Name of S3 bucket to upload project to, if left out a bucket will be auto-generated</p> Example: <pre>\"my-s3-bucket-name\"\n</pre> s3_regional_buckets root  general s3_regional_bucketsType: boolean <p>Enable regional auto-buckets.</p> Examples: <pre>true\n</pre> <pre>false\n</pre> tags root  general tagsType: object <p>Tags to apply to CloudFormation template</p> Example: <pre>{\n    \"CostCenter\": \"1001\"\n}\n</pre> Additional Properties <p>Each additional property must conform to the following schema</p> root  general tags additionalPropertiesType: string project root  projectType: object Default: {\"artifact_regions\": null, \"auth\": null, \"az_blacklist\": null, \"build_submodules\": null, \"lambda_source_path\": null, \"lambda_zip_path\": null, \"name\": null, \"org_id\": null, \"owner\": null, \"package_lambda\": null, \"parameters\": null, \"posthooks\": null, \"prehooks\": null, \"regions\": null, \"role_name\": null, \"s3_bucket\": null, \"s3_enable_sig_v2\": null, \"s3_object_acl\": null, \"s3_regional_buckets\": null, \"shorten_stack_name\": null, \"tags\": null, \"template\": null} <p>Project specific configuration section</p> No Additional Properties artifact_regions root  project artifact_regionsType: array of string <p>List of AWS regions where artifacts need to be copied. This helps same region artifact bucket access to resources</p> Each item of this array must be: root  project artifact_regions artifact_regions itemsType: string <p>AWS Region name</p> Must match regular expression: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code> Example: <pre>\"us-east-1\"\n</pre> auth root  project authType: object <p>AWS authentication section</p> Example: <pre>{\n    \"cn-northwest-1\": \"china-profile\",\n    \"default\": \"my-default-profile\",\n    \"us-east-2\": \"specific-profile-for-us-east-2\"\n}\n</pre> Additional Properties <p>Each additional property must conform to the following schema</p> root  project auth additionalPropertiesType: string az_blacklist root  project az_blacklistType: array of string <p>List of Availablilty Zones ID's to exclude when generating availability zones</p> Each item of this array must be: root  project az_blacklist az_blacklist itemsType: string <p>Availability Zone ID, eg.: 'use1-az1'</p> Must match regular expression: <code>(afs1-az1|afs1-az2|afs1-az3|ape1-az1|ape1-az2|ape1-az3|apne1-az1|apne1-az2|apne1-az4|apne2-az1|apne2-az2|apne2-az3|apne2-az4|apne3-az1|apne3-az2|apne3-az3|aps1-az1|aps1-az2|aps1-az3|apse1-az1|apse1-az2|apse1-az3|apse2-az1|apse2-az2|apse2-az3|apse3-az1|apse3-az2|apse3-az3|cac1-az1|cac1-az2|cac1-az4|euc1-az1|euc1-az2|euc1-az3|eun1-az1|eun1-az2|eun1-az3|eus1-az1|eus1-az2|eus1-az3|euw1-az1|euw1-az2|euw1-az3|euw2-az1|euw2-az2|euw2-az3|euw3-az1|euw3-az2|euw3-az3|mes1-az1|mes1-az2|mes1-az3|sae1-az1|sae1-az2|sae1-az3|use1-atl1-az1|use1-az1|use1-az2|use1-az3|use1-az4|use1-az5|use1-az6|use1-bos1-az1|use1-chi1-az1|use1-dfw1-az1|use1-iah1-az1|use1-mci1-az1|use1-mia1-az1|use1-msp1-az1|use1-nyc1-az1|use1-phl1-az1|use2-az1|use2-az2|use2-az3|usw1-az1|usw1-az3|usw2-az1|usw2-az2|usw2-az3|usw2-az4|usw2-den1-az1|usw2-las1-az1|usw2-lax1-az1|usw2-lax1-az2|usw2-pdx1-az1|usw2-phx1-az1|usw2-sea1-az1)</code> Examples: <pre>\"usw2-laz1-az1\"\n</pre> <pre>\"use2-az2\"\n</pre> build_submodules root  project build_submodulesType: boolean <p>Build Lambda zips recursively for submodules, set to false to disable</p> Examples: <pre>true\n</pre> <pre>false\n</pre> lambda_source_path root  project lambda_source_pathType: string <p>Path relative to the project root containing Lambda zip files, default is 'lambda_functions/source'</p> Example: <pre>\"functions/source\"\n</pre> lambda_zip_path root  project lambda_zip_pathType: string <p>Path relative to the project root to place Lambda zip files</p> Example: <pre>\"functions/packages\"\n</pre> name root  project nameType: string <p>Project name, used as s3 key prefix when uploading objects</p> Must match regular expression: <code>^[a-z0-9-]*$</code> Example: <pre>\"my-project-name\"\n</pre> org_id root  project org_idType: string <p>Organization ID to use when launching CFN Stacks. starts with o-. It is found on Organization Settings page</p> owner root  project ownerType: string <p>email address for project owner (not used at present)</p> Example: <pre>\"Bob.Slydell@example.com\"\n</pre> package_lambda root  project package_lambdaType: boolean <p>Package Lambda functions into zips before uploading to s3, set to false to disable</p> Examples: <pre>true\n</pre> <pre>false\n</pre> parameters root  project parametersType: object <p>Parameter key-values to pass to CloudFormation, parameters provided in global config take precedence</p> Additional Properties <p>Each additional property must conform to the following schema</p> root  project parameters additionalProperties One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li></ul> root  project parameters additionalProperties oneOf item 0Type: string root  project parameters additionalProperties oneOf item 1Type: integer root  project parameters additionalProperties oneOf item 2Type: boolean root  project parameters additionalProperties oneOf item 3Type: array Each item of this array must be: root  project parameters additionalProperties oneOf item 3 item 3 items One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root  project parameters additionalProperties oneOf item 3 item 3 items oneOf item 0Type: integer root  project parameters additionalProperties oneOf item 3 item 3 items oneOf item 1Type: string posthooks root  project posthooksType: array <p>hooks to execute after executing tests</p> Each item of this array must be: root  project posthooks HookDataType: object <p>Hook definition</p> Same definition as general_posthooks_items prehooks root  project prehooksType: array <p>hooks to execute prior to executing tests</p> Each item of this array must be: root  project prehooks HookDataType: object <p>Hook definition</p> Same definition as general_posthooks_items regions root  project regionsType: array of string <p>List of AWS regions</p> Each item of this array must be: root  project regions regions itemsType: string <p>AWS Region name</p> Must match regular expression: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code> Example: <pre>\"us-east-1\"\n</pre> role_name root  project role_nameType: string <p>Role name to use when launching CFN Stacks.</p> s3_bucket root  project s3_bucketType: string <p>Name of S3 bucket to upload project to, if left out a bucket will be auto-generated</p> Must match regular expression: <code>^[a-z0-9-]*$</code> Example: <pre>\"my-s3-bucket-name\"\n</pre> s3_enable_sig_v2 root  project s3_enable_sig_v2Type: boolean <p>Enable (deprecated) sigv2 access to auto-generated buckets</p> Examples: <pre>true\n</pre> <pre>false\n</pre> s3_object_acl root  project s3_object_aclType: string Default: \"private\" <p>ACL for uploaded s3 objects</p> Must match regular expression: <code>^(bucket-owner-full-control|bucket-owner-read|authenticated-read|aws-exec-read|public-read-write|public-read|private)$</code> Examples: <pre>\"bucket-owner-read\"\n</pre> <pre>\"private\"\n</pre> s3_regional_buckets root  project s3_regional_bucketsType: boolean <p>Enable regional auto-buckets.</p> Examples: <pre>true\n</pre> <pre>false\n</pre> shorten_stack_name root  project shorten_stack_nameType: boolean <p>Shorten stack names generated for tests, set to true to enable</p> Examples: <pre>true\n</pre> <pre>false\n</pre> tags root  project tagsType: object <p>Tags to apply to CloudFormation template</p> Example: <pre>{\n    \"CostCenter\": \"1001\"\n}\n</pre> Additional Properties <p>Each additional property must conform to the following schema</p> root  project tags additionalPropertiesType: string template root  project templateType: string <p>path to template file relative to the project config file path</p> Example: <pre>\"cloudformation_templates/\"\n</pre> tests root  testsType: object Default: {} Additional Properties <p>Each additional property must conform to the following schema</p> root  tests TestConfigType: object <p>Test specific configuration section.</p> No Additional Properties artifact_regions root  tests additionalProperties artifact_regionsType: array of string <p>List of AWS regions where artifacts need to be copied. This helps same region artifact bucket access to resources</p> Each item of this array must be: root  tests additionalProperties artifact_regions artifact_regions itemsType: string <p>AWS Region name</p> Must match regular expression: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code> Example: <pre>\"us-east-1\"\n</pre> auth root  tests additionalProperties authType: object <p>AWS authentication section</p> Example: <pre>{\n    \"cn-northwest-1\": \"china-profile\",\n    \"default\": \"my-default-profile\",\n    \"us-east-2\": \"specific-profile-for-us-east-2\"\n}\n</pre> Additional Properties <p>Each additional property must conform to the following schema</p> root  tests additionalProperties auth additionalPropertiesType: string az_blacklist root  tests additionalProperties az_blacklistType: array of string <p>List of Availablilty Zones ID's to exclude when generating availability zones</p> Each item of this array must be: root  tests additionalProperties az_blacklist az_blacklist itemsType: string <p>Availability Zone ID, eg.: 'use1-az1'</p> Must match regular expression: <code>(afs1-az1|afs1-az2|afs1-az3|ape1-az1|ape1-az2|ape1-az3|apne1-az1|apne1-az2|apne1-az4|apne2-az1|apne2-az2|apne2-az3|apne2-az4|apne3-az1|apne3-az2|apne3-az3|aps1-az1|aps1-az2|aps1-az3|apse1-az1|apse1-az2|apse1-az3|apse2-az1|apse2-az2|apse2-az3|apse3-az1|apse3-az2|apse3-az3|cac1-az1|cac1-az2|cac1-az4|euc1-az1|euc1-az2|euc1-az3|eun1-az1|eun1-az2|eun1-az3|eus1-az1|eus1-az2|eus1-az3|euw1-az1|euw1-az2|euw1-az3|euw2-az1|euw2-az2|euw2-az3|euw3-az1|euw3-az2|euw3-az3|mes1-az1|mes1-az2|mes1-az3|sae1-az1|sae1-az2|sae1-az3|use1-atl1-az1|use1-az1|use1-az2|use1-az3|use1-az4|use1-az5|use1-az6|use1-bos1-az1|use1-chi1-az1|use1-dfw1-az1|use1-iah1-az1|use1-mci1-az1|use1-mia1-az1|use1-msp1-az1|use1-nyc1-az1|use1-phl1-az1|use2-az1|use2-az2|use2-az3|usw1-az1|usw1-az3|usw2-az1|usw2-az2|usw2-az3|usw2-az4|usw2-den1-az1|usw2-las1-az1|usw2-lax1-az1|usw2-lax1-az2|usw2-pdx1-az1|usw2-phx1-az1|usw2-sea1-az1)</code> Examples: <pre>\"usw2-laz1-az1\"\n</pre> <pre>\"use2-az2\"\n</pre> parameters root  tests additionalProperties parametersType: object Default: {} <p>Parameter key-values to pass to CloudFormation, parameters provided in global config take precedence</p> Additional Properties <p>Each additional property must conform to the following schema</p> root  tests additionalProperties parameters additionalProperties One of <ul><li> Option 1 </li><li> Option 2 </li><li> Option 3 </li><li> Option 4 </li></ul> root  tests additionalProperties parameters additionalProperties oneOf item 0Type: string root  tests additionalProperties parameters additionalProperties oneOf item 1Type: integer root  tests additionalProperties parameters additionalProperties oneOf item 2Type: boolean root  tests additionalProperties parameters additionalProperties oneOf item 3Type: array Each item of this array must be: root  tests additionalProperties parameters additionalProperties oneOf item 3 item 3 items One of <ul><li> Option 1 </li><li> Option 2 </li></ul> root  tests additionalProperties parameters additionalProperties oneOf item 3 item 3 items oneOf item 0Type: integer root  tests additionalProperties parameters additionalProperties oneOf item 3 item 3 items oneOf item 1Type: string posthooks root  tests additionalProperties posthooksType: array <p>hooks to execute after executing tests</p> Each item of this array must be: root  tests additionalProperties posthooks HookDataType: object <p>Hook definition</p> Same definition as general_posthooks_items prehooks root  tests additionalProperties prehooksType: array <p>hooks to execute prior to executing tests</p> Each item of this array must be: root  tests additionalProperties prehooks HookDataType: object <p>Hook definition</p> Same definition as general_posthooks_items regions root  tests additionalProperties regionsType: array of string <p>List of AWS regions</p> Each item of this array must be: root  tests additionalProperties regions regions itemsType: string <p>AWS Region name</p> Must match regular expression: <code>^(ap|eu|us|sa|ca|cn|af|me|us-gov)-(central|south|north|east|west|southeast|southwest|northeast|northwest)-[0-9]$</code> Example: <pre>\"us-east-1\"\n</pre> role_name root  tests additionalProperties role_nameType: string <p>Role name to use when launching CFN Stacks.</p> s3_bucket root  tests additionalProperties s3_bucketType: string <p>Name of S3 bucket to upload project to, if left out a bucket will be auto-generated</p> Must match regular expression: <code>^[a-z0-9-]*$</code> Example: <pre>\"my-s3-bucket-name\"\n</pre> s3_regional_buckets root  tests additionalProperties s3_regional_bucketsType: boolean <p>Enable regional auto-buckets.</p> Examples: <pre>true\n</pre> <pre>false\n</pre> stack_name root  tests additionalProperties stack_nameType: string <p>Cloudformation Stack Name</p> stack_name_prefix root  tests additionalProperties stack_name_prefixType: string <p>Prefix to apply to generated CFN Stack Name</p> stack_name_suffix root  tests additionalProperties stack_name_suffixType: string <p>Suffix to apply to generated CFN Stack Name</p> tags root  tests additionalProperties tagsType: object <p>Tags to apply to CloudFormation template</p> Example: <pre>{\n    \"CostCenter\": \"1001\"\n}\n</pre> Additional Properties <p>Each additional property must conform to the following schema</p> root  tests additionalProperties tags additionalPropertiesType: string template root  tests additionalProperties templateType: string <p>path to template file relative to the project config file path</p> Example: <pre>\"cloudformation_templates/\"\n</pre> <p>Generated using json-schema-for-humans on 2022-03-01 at 09:02:47 -0600</p>"},{"location":"support/troubleshooting/","title":"Troubleshooting Guide","text":"<p>Having issues with taskcat? This comprehensive troubleshooting guide will help you diagnose and resolve common problems.</p>"},{"location":"support/troubleshooting/#quick-diagnostics","title":"\ud83d\udd0d Quick Diagnostics","text":"<p>Before diving into specific issues, run these diagnostic commands:</p> <pre><code># Check taskcat version and installation\ntaskcat --version\n\n# Validate your configuration\ntaskcat test run --dry-run\n\n# Check AWS credentials\naws sts get-caller-identity\n\n# Verify CloudFormation permissions\naws cloudformation describe-stacks --region us-east-1\n</code></pre>"},{"location":"support/troubleshooting/#common-issues","title":"\ud83d\udea8 Common Issues","text":""},{"location":"support/troubleshooting/#installation-problems","title":"Installation Problems","text":""},{"location":"support/troubleshooting/#python-version-issues","title":"Python Version Issues","text":"<p>Problem: <code>taskcat requires Python 3.8 or higher</code></p> <p>Solution: <pre><code># Check Python version\npython3 --version\n\n# Install Python 3.8+ if needed\n# macOS: brew install python@3.9\n# Ubuntu: sudo apt-get install python3.9\n# Windows: Download from python.org\n</code></pre></p>"},{"location":"support/troubleshooting/#permission-denied-during-installation","title":"Permission Denied During Installation","text":"<p>Problem: <code>Permission denied</code> when running <code>pip install taskcat</code></p> <p>Solution: <pre><code># Install for current user only\npip install --user taskcat\n\n# Or use virtual environment (recommended)\npython3 -m venv taskcat-env\nsource taskcat-env/bin/activate  # Linux/macOS\n# taskcat-env\\Scripts\\activate   # Windows\npip install taskcat\n</code></pre></p>"},{"location":"support/troubleshooting/#aws-credentials-issues","title":"AWS Credentials Issues","text":""},{"location":"support/troubleshooting/#no-credentials-found","title":"No Credentials Found","text":"<p>Problem: <code>Unable to locate credentials</code></p> <p>Solutions: <pre><code># Option 1: Configure AWS CLI\naws configure\n\n# Option 2: Set environment variables\nexport AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_DEFAULT_REGION=us-east-1\n\n# Option 3: Use IAM roles (for EC2/Lambda)\n# Attach appropriate IAM role to your instance\n</code></pre></p>"},{"location":"support/troubleshooting/#insufficient-permissions","title":"Insufficient Permissions","text":"<p>Problem: <code>Access Denied</code> errors during testing</p> <p>Required Permissions: <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"cloudformation:*\",\n                \"s3:*\",\n                \"iam:PassRole\",\n                \"iam:CreateRole\",\n                \"iam:DeleteRole\",\n                \"iam:GetRole\",\n                \"iam:AttachRolePolicy\",\n                \"iam:DetachRolePolicy\",\n                \"ec2:Describe*\",\n                \"ssm:GetParameter*\",\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre></p>"},{"location":"support/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"support/troubleshooting/#invalid-yaml-syntax","title":"Invalid YAML Syntax","text":"<p>Problem: <code>YAML syntax error in .taskcat.yml</code></p> <p>Solution: <pre><code># Validate YAML syntax\npython3 -c \"import yaml; yaml.safe_load(open('.taskcat.yml'))\"\n\n# Common issues:\n# - Incorrect indentation (use spaces, not tabs)\n# - Missing colons after keys\n# - Unquoted special characters\n</code></pre></p> <p>Example of correct syntax: <pre><code>project:\n  name: my-project          # \u2705 Correct\n  regions:\n    - us-east-1            # \u2705 Correct indentation\n    - us-west-2\n\ntests:\n  test1:\n    template: templates/main.yaml  # \u2705 Quoted path with spaces\n    parameters:\n      Key: \"Value with spaces\"     # \u2705 Quoted value\n</code></pre></p>"},{"location":"support/troubleshooting/#template-not-found","title":"Template Not Found","text":"<p>Problem: <code>Template file not found</code></p> <p>Solutions: <pre><code># Check file path\nls -la templates/\n\n# Use relative paths from project root\ntemplate: templates/main.yaml  # \u2705 Correct\ntemplate: ./templates/main.yaml # \u2705 Also correct\ntemplate: /full/path/main.yaml  # \u274c Avoid absolute paths\n</code></pre></p>"},{"location":"support/troubleshooting/#template-issues","title":"Template Issues","text":""},{"location":"support/troubleshooting/#cloudformation-validation-errors","title":"CloudFormation Validation Errors","text":"<p>Problem: Template fails CloudFormation validation</p> <p>Debugging Steps: <pre><code># Validate template syntax\naws cloudformation validate-template \\\n  --template-body file://templates/main.yaml\n\n# Check for common issues:\n# - Invalid resource types\n# - Missing required properties\n# - Circular dependencies\n# - Invalid parameter constraints\n</code></pre></p>"},{"location":"support/troubleshooting/#parameter-issues","title":"Parameter Issues","text":"<p>Problem: <code>Parameter validation failed</code></p> <p>Common Causes: - Missing required parameters - Invalid parameter values - Type mismatches - Constraint violations</p> <p>Solution: <pre><code># Ensure all required parameters are provided\ntests:\n  test1:\n    template: templates/main.yaml\n    parameters:\n      RequiredParam1: value1\n      RequiredParam2: value2\n</code></pre></p>"},{"location":"support/troubleshooting/#pseudo-parameter-issues","title":"Pseudo-Parameter Issues","text":""},{"location":"support/troubleshooting/#git-branch-parameter-fails","title":"Git Branch Parameter Fails","text":"<p>Problem: <code>Project root is not a git repository</code></p> <p>Solution: <pre><code># Initialize git repository\ngit init\ngit add .\ngit commit -m \"Initial commit\"\n\n# Or avoid using $[taskcat_git_branch]\n</code></pre></p>"},{"location":"support/troubleshooting/#availability-zone-issues","title":"Availability Zone Issues","text":"<p>Problem: <code>Not enough availability zones in region</code></p> <p>Solutions: <pre><code># Reduce number of AZs requested\nparameters:\n  AvailabilityZones: $[taskcat_genaz_2]  # Instead of _3 or higher\n\n# Or test in regions with more AZs\nproject:\n  regions:\n    - us-east-1  # Has 6 AZs\n    - us-west-2  # Has 4 AZs\n</code></pre></p>"},{"location":"support/troubleshooting/#ssm-parameter-not-found","title":"SSM Parameter Not Found","text":"<p>Problem: <code>Parameter /path/to/param not found</code></p> <p>Solutions: <pre><code># Verify parameter exists\naws ssm get-parameter --name \"/path/to/param\" --region us-east-1\n\n# Check parameter path spelling\nparameters:\n  AMI: $[taskcat_ssm_/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]\n</code></pre></p>"},{"location":"support/troubleshooting/#deployment-issues","title":"Deployment Issues","text":""},{"location":"support/troubleshooting/#stack-creation-fails","title":"Stack Creation Fails","text":"<p>Problem: CloudFormation stack creation fails</p> <p>Debugging Steps: 1. Check CloudFormation console for detailed error messages 2. Review stack events for failure points 3. Validate resource limits and quotas 4. Check for naming conflicts</p> <pre><code># View stack events\naws cloudformation describe-stack-events \\\n  --stack-name your-stack-name \\\n  --region us-east-1\n</code></pre>"},{"location":"support/troubleshooting/#resource-limits-exceeded","title":"Resource Limits Exceeded","text":"<p>Problem: <code>LimitExceeded</code> errors</p> <p>Solutions: - Check AWS service limits - Use different instance types - Test in fewer regions simultaneously - Clean up unused resources</p>"},{"location":"support/troubleshooting/#timeout-issues","title":"Timeout Issues","text":"<p>Problem: Stack creation times out</p> <p>Solutions: <pre><code># Increase timeout in template\nResources:\n  MyResource:\n    Type: AWS::EC2::Instance\n    CreationPolicy:\n      ResourceSignal:\n        Timeout: PT15M  # 15 minutes\n</code></pre></p>"},{"location":"support/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"support/troubleshooting/#slow-test-execution","title":"Slow Test Execution","text":"<p>Problem: Tests take too long to complete</p> <p>Optimization Strategies: <pre><code># Test in fewer regions initially\nproject:\n  regions:\n    - us-east-1  # Start with one region\n\n# Use smaller instance types\nparameters:\n  InstanceType: t3.nano  # Faster launch times\n\n# Parallel execution (default)\n# taskcat runs tests in parallel automatically\n</code></pre></p>"},{"location":"support/troubleshooting/#memory-issues","title":"Memory Issues","text":"<p>Problem: taskcat runs out of memory</p> <p>Solutions: <pre><code># Increase available memory\n# For Docker: docker run -m 4g taskcat\n\n# Reduce concurrent tests\n# Split large test suites into smaller batches\n</code></pre></p>"},{"location":"support/troubleshooting/#advanced-debugging","title":"\ud83d\udd27 Advanced Debugging","text":""},{"location":"support/troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Enable verbose logging\ntaskcat test run --debug\n\n# Save logs to file\ntaskcat test run --debug &gt; taskcat-debug.log 2&gt;&amp;1\n</code></pre>"},{"location":"support/troubleshooting/#template-preprocessing-debug","title":"Template Preprocessing Debug","text":"<pre><code># See processed templates\ntaskcat test run --keep-failed\n\n# Check generated parameters\nls taskcat_outputs/\ncat taskcat_outputs/*/parameters.json\n</code></pre>"},{"location":"support/troubleshooting/#aws-cloudtrail-integration","title":"AWS CloudTrail Integration","text":"<pre><code># Monitor AWS API calls\naws logs filter-log-events \\\n  --log-group-name CloudTrail/taskcatTesting \\\n  --start-time $(date -d '1 hour ago' +%s)000\n</code></pre>"},{"location":"support/troubleshooting/#getting-help","title":"\ud83c\udd98 Getting Help","text":""},{"location":"support/troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ol> <li>Check this troubleshooting guide</li> <li>Search existing GitHub issues</li> <li>Enable debug logging</li> <li>Gather system information:    <pre><code>taskcat --version\npython3 --version\naws --version\nuname -a  # Linux/macOS\n</code></pre></li> </ol>"},{"location":"support/troubleshooting/#where-to-get-help","title":"Where to Get Help","text":""},{"location":"support/troubleshooting/#github-issues","title":"GitHub Issues","text":"<ul> <li>Bug Reports: Create an issue</li> <li>Feature Requests: Request a feature</li> <li>Questions: Ask a question</li> </ul>"},{"location":"support/troubleshooting/#community-support","title":"Community Support","text":"<ul> <li>AWS re:Post: Tag questions with <code>taskcat</code></li> <li>Stack Overflow: Use the <code>taskcat</code> tag</li> <li>AWS Forums: CloudFormation section</li> </ul>"},{"location":"support/troubleshooting/#creating-effective-bug-reports","title":"Creating Effective Bug Reports","text":"<p>Include this information:</p> <pre><code>## Environment\n- taskcat version: X.X.X\n- Python version: X.X.X\n- Operating System: OS name and version\n- AWS CLI version: X.X.X\n\n## Configuration\n```yaml\n# Your .taskcat.yml (remove sensitive data)\n</code></pre>"},{"location":"support/troubleshooting/#template","title":"Template","text":"<pre><code># Minimal template that reproduces the issue\n</code></pre>"},{"location":"support/troubleshooting/#error-output","title":"Error Output","text":"<pre><code># Full error message and stack trace\n</code></pre>"},{"location":"support/troubleshooting/#steps-to-reproduce","title":"Steps to Reproduce","text":"<ol> <li>Step one</li> <li>Step two</li> <li>Step three ```</li> </ol>"},{"location":"support/troubleshooting/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>AWS CloudFormation User Guide</li> <li>AWS CLI Configuration</li> <li>taskcat GitHub Repository</li> <li>AWS Quick Start Program</li> </ul>"},{"location":"support/troubleshooting/#still-having-issues","title":"\ud83d\udd04 Still Having Issues?","text":"<p>If this guide doesn't resolve your issue:</p> <ol> <li>Search GitHub Issues: Someone might have encountered the same problem</li> <li>Check AWS Service Health: Verify AWS services are operational</li> <li>Try a Minimal Example: Isolate the problem with a simple test case</li> <li>Contact Support: Create a detailed GitHub issue with all relevant information</li> </ol> <p>Remember: The more information you provide, the faster we can help resolve your issue! \ud83d\ude80</p>"},{"location":"usage/DYNAMIC_VALUES/","title":"Dynamic Values","text":"<p>Dynamic Values are runtime-evaluated parameters that provide flexible, context-aware configurations for your CloudFormation templates. These values are evaluated during taskcat execution and can pull data from your AWS environment, generate random values, or provide contextual information about your test run.</p>"},{"location":"usage/DYNAMIC_VALUES/#overview","title":"Overview","text":"<p>Dynamic Values solve common testing challenges:</p> <ul> <li>Environment-specific values: Pull actual values from your AWS environment</li> <li>Unique resource names: Generate random strings to avoid naming conflicts</li> <li>Context awareness: Access current region, project name, and test information</li> <li>Security: Generate secure passwords and retrieve secrets safely</li> <li>Flexibility: Reference other parameters and create complex configurations</li> </ul>"},{"location":"usage/DYNAMIC_VALUES/#syntax","title":"Syntax","text":"<p>Dynamic Values use the syntax: <code>$[taskcat_function_name]</code> or <code>$[taskcat_function_name_parameter]</code></p> <pre><code>parameters:\n  DatabasePassword: $[taskcat_genpass_16S]\n  S3BucketName: $[taskcat_autobucket]\n  CurrentRegion: $[taskcat_current_region]\n  AvailabilityZones: $[taskcat_genaz_2]\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#complete-dynamic-values-reference","title":"Complete Dynamic Values Reference","text":""},{"location":"usage/DYNAMIC_VALUES/#random-value-generation","title":"Random Value Generation","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_random-string]</code> Generate 20-character random string <code>kj8s9dkf7h3m2n4p5q6r</code> Unique resource identifiers <code>$[taskcat_random-numbers]</code> Generate 20-digit random number <code>12345678901234567890</code> Unique numeric identifiers <code>$[taskcat_genuuid]</code> Generate UUID v1 <code>550e8400-e29b-41d4-a716-446655440000</code> Globally unique identifiers"},{"location":"usage/DYNAMIC_VALUES/#password-generation","title":"Password Generation","text":"Dynamic Value Description Example Use Case <code>$[taskcat_genpass_8]</code> 8-character alphanumeric password <code>aB3dE7gH</code> Simple passwords <code>$[taskcat_genpass_16S]</code> 16-character password with special chars <code>aB3!dE7@gH9#kL2$</code> Secure passwords <code>$[taskcat_genpass_32A]</code> 32-character alphanumeric password <code>aB3dE7gH9kL2mN4pQ6rS8tU0vW2xY4zA</code> Long secure passwords <p>Password Types: - No suffix: Alphanumeric only - <code>S</code>: Includes special characters (!@#$%^&amp;*) - <code>A</code>: Alphanumeric only (explicit)</p>"},{"location":"usage/DYNAMIC_VALUES/#aws-environment-values","title":"AWS Environment Values","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_current_region]</code> Current AWS region <code>us-east-1</code> Region-specific configurations <code>$[taskcat_genaz_2]</code> 2 availability zones <code>us-east-1a,us-east-1b</code> Multi-AZ deployments <code>$[taskcat_genaz_3]</code> 3 availability zones <code>us-east-1a,us-east-1b,us-east-1c</code> High availability setups <code>$[taskcat_gensingleaz_1]</code> Single AZ (1<sup>st</sup> available) <code>us-east-1a</code> Single AZ deployments <code>$[taskcat_gensingleaz_2]</code> Single AZ (2<sup>nd</sup> available) <code>us-east-1b</code> Specific AZ selection"},{"location":"usage/DYNAMIC_VALUES/#s3-and-storage","title":"S3 and Storage","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_autobucket]</code> Auto-generated S3 bucket name <code>tcat-myproject-us-east-1-123456789</code> Template artifacts <code>$[taskcat_autobucket_prefix]</code> S3 bucket prefix <code>myproject-us-east-1-123456789</code> Custom bucket naming"},{"location":"usage/DYNAMIC_VALUES/#context-information","title":"Context Information","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_project_name]</code> Current project name <code>my-cloudformation-project</code> Tagging and naming <code>$[taskcat_test_name]</code> Current test name <code>production-test</code> Test identification <code>$[taskcat_git_branch]</code> Current Git branch <code>feature/new-feature</code> Branch-specific configs"},{"location":"usage/DYNAMIC_VALUES/#parameter-references","title":"Parameter References","text":"Dynamic Value Description Example Use Case <code>$[taskcat_getval_ParameterName]</code> Reference another parameter <code>$[taskcat_getval_DatabasePassword]</code> Parameter dependencies"},{"location":"usage/DYNAMIC_VALUES/#aws-services-integration","title":"AWS Services Integration","text":"Dynamic Value Description Example Use Case <code>$[taskcat_ssm_/path/to/parameter]</code> Retrieve SSM Parameter <code>$[taskcat_ssm_/app/database/host]</code> Configuration management <code>$[taskcat_secretsmanager_secret-name]</code> Retrieve Secrets Manager value <code>$[taskcat_secretsmanager_prod/db/password]</code> Secure credential retrieval"},{"location":"usage/DYNAMIC_VALUES/#legacyspecialized-values","title":"Legacy/Specialized Values","text":"Dynamic Value Description Example Output Use Case <code>$[taskcat_getkeypair]</code> Default key pair name <code>cikey</code> EC2 key pair reference <code>$[taskcat_getlicensebucket]</code> License bucket placeholder <code>override_this</code> License content storage <code>$[taskcat_getmediabucket]</code> Media bucket placeholder <code>override_this</code> Media content storage"},{"location":"usage/DYNAMIC_VALUES/#advanced-examples","title":"Advanced Examples","text":""},{"location":"usage/DYNAMIC_VALUES/#multi-tier-application","title":"Multi-Tier Application","text":"<pre><code>project:\n  name: multi-tier-app\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n\nglobal:\n  parameters:\n    ProjectName: $[taskcat_project_name]\n    Environment: production\n\ntests:\n  vpc-infrastructure:\n    template: templates/vpc.yaml\n    parameters:\n      VpcName: $[taskcat_project_name]-vpc-$[taskcat_current_region]\n      AvailabilityZones: $[taskcat_genaz_3]\n\n  database-tier:\n    template: templates/rds.yaml\n    parameters:\n      DBInstanceIdentifier: $[taskcat_project_name]-db-$[taskcat_random-string]\n      MasterUsername: admin\n      MasterUserPassword: $[taskcat_genpass_32S]\n      DBSubnetGroupName: $[taskcat_getval_VpcName]-db-subnets\n\n  application-tier:\n    template: templates/app.yaml\n    parameters:\n      ApplicationName: $[taskcat_project_name]-app\n      InstanceType: m5.large\n      KeyName: $[taskcat_getkeypair]\n      S3Bucket: $[taskcat_autobucket]\n      DatabaseEndpoint: $[taskcat_getval_DBInstanceIdentifier]\n\n  monitoring:\n    template: templates/monitoring.yaml\n    parameters:\n      DashboardName: $[taskcat_project_name]-$[taskcat_test_name]-dashboard\n      LogGroupName: /aws/lambda/$[taskcat_project_name]\n      AlertEmail: $[taskcat_ssm_/notifications/email]\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<pre><code>project:\n  name: environment-configs\n  regions:\n    - us-east-1\n\ntests:\n  development:\n    template: templates/app.yaml\n    parameters:\n      Environment: dev\n      InstanceType: t3.micro\n      DatabasePassword: $[taskcat_genpass_16]\n      S3Bucket: $[taskcat_project_name]-dev-$[taskcat_current_region]\n\n  staging:\n    template: templates/app.yaml\n    parameters:\n      Environment: staging\n      InstanceType: t3.small\n      DatabasePassword: $[taskcat_secretsmanager_staging/db/password]\n      S3Bucket: $[taskcat_project_name]-staging-$[taskcat_current_region]\n\n  production:\n    template: templates/app.yaml\n    parameters:\n      Environment: prod\n      InstanceType: m5.large\n      DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n      S3Bucket: $[taskcat_project_name]-prod-$[taskcat_current_region]\n      BackupRetention: 30\n      MonitoringEnabled: true\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#security-focused-configuration","title":"Security-Focused Configuration","text":"<pre><code>project:\n  name: secure-app\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  secure-deployment:\n    template: templates/secure-app.yaml\n    parameters:\n      # Generate unique, secure passwords\n      DatabaseMasterPassword: $[taskcat_genpass_32S]\n      ApplicationSecret: $[taskcat_genpass_24S]\n\n      # Use AWS Secrets Manager for production secrets\n      ApiKey: $[taskcat_secretsmanager_prod/api/key]\n      CertificateArn: $[taskcat_ssm_/ssl/certificate/arn]\n\n      # Generate unique resource names\n      KMSKeyAlias: $[taskcat_project_name]-key-$[taskcat_genuuid]\n      S3BucketName: $[taskcat_autobucket]\n\n      # Context-aware naming\n      LogGroupName: /aws/lambda/$[taskcat_project_name]-$[taskcat_current_region]\n\n      # Reference other parameters\n      DatabasePasswordConfirm: $[taskcat_getval_DatabaseMasterPassword]\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#multi-region-deployment","title":"Multi-Region Deployment","text":"<pre><code>project:\n  name: global-app\n  regions:\n    - us-east-1\n    - us-west-2\n    - eu-west-1\n    - ap-southeast-1\n\ntests:\n  global-infrastructure:\n    template: templates/global-app.yaml\n    parameters:\n      # Region-specific configurations\n      PrimaryRegion: us-east-1\n      CurrentRegion: $[taskcat_current_region]\n\n      # Generate region-specific AZs\n      AvailabilityZones: $[taskcat_genaz_2]\n\n      # Unique naming per region\n      S3BucketName: $[taskcat_project_name]-$[taskcat_current_region]-$[taskcat_random-numbers]\n\n      # Global unique identifiers\n      DeploymentId: $[taskcat_genuuid]\n\n      # Branch-specific configurations\n      GitBranch: $[taskcat_git_branch]\n\n      # Environment from SSM\n      Environment: $[taskcat_ssm_/global/environment]\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#best-practices","title":"Best Practices","text":""},{"location":"usage/DYNAMIC_VALUES/#1-use-appropriate-value-types","title":"1. Use Appropriate Value Types","text":"<pre><code># \u2705 Good: Use specific types for specific purposes\nparameters:\n  DatabasePassword: $[taskcat_genpass_16S]    # Secure password\n  ResourceId: $[taskcat_genuuid]              # Globally unique\n  BucketName: $[taskcat_autobucket]           # S3-compliant naming\n\n# \u274c Avoid: Using generic values for specific purposes\nparameters:\n  DatabasePassword: $[taskcat_random-string]  # Not secure enough\n  ResourceId: $[taskcat_random-numbers]       # May not be unique\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#2-leverage-parameter-references","title":"2. Leverage Parameter References","text":"<pre><code># \u2705 Good: Reference parameters to maintain consistency\nparameters:\n  MasterPassword: $[taskcat_genpass_20S]\n  PasswordConfirm: $[taskcat_getval_MasterPassword]\n\n# \u274c Avoid: Generating separate values for related parameters\nparameters:\n  MasterPassword: $[taskcat_genpass_20S]\n  PasswordConfirm: $[taskcat_genpass_20S]     # Different values!\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#3-use-context-aware-naming","title":"3. Use Context-Aware Naming","text":"<pre><code># \u2705 Good: Include context in resource names\nparameters:\n  LogGroup: /aws/lambda/$[taskcat_project_name]-$[taskcat_current_region]\n  S3Bucket: $[taskcat_project_name]-logs-$[taskcat_current_region]\n\n# \u274c Avoid: Generic naming that may conflict\nparameters:\n  LogGroup: /aws/lambda/myapp\n  S3Bucket: myapp-logs\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#4-secure-credential-management","title":"4. Secure Credential Management","text":"<pre><code># \u2705 Good: Use AWS services for production secrets\nparameters:\n  DatabasePassword: $[taskcat_secretsmanager_prod/db/password]\n  ApiKey: $[taskcat_ssm_/app/api/key]\n\n# \u2705 Good: Generate secure passwords for testing\nparameters:\n  TestPassword: $[taskcat_genpass_16S]\n\n# \u274c Avoid: Hardcoded secrets\nparameters:\n  DatabasePassword: \"hardcoded-password\"\n</code></pre>"},{"location":"usage/DYNAMIC_VALUES/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/DYNAMIC_VALUES/#common-issues","title":"Common Issues","text":"<p>Dynamic Value not replaced: - Check syntax: <code>$[taskcat_function_name]</code> - Verify function name spelling - Ensure proper parameter placement</p> <p>AWS service integration fails: - Verify IAM permissions for SSM/Secrets Manager - Check parameter/secret exists in target region - Validate parameter path format</p> <p>AZ generation fails: - Check if region has enough AZs - Verify region is enabled in your account - Consider AZ exclusions in configuration</p> <p>Parameter reference fails: - Ensure referenced parameter exists - Check parameter name spelling - Verify parameter is defined before reference</p> <p>For more troubleshooting help, see the Troubleshooting Guide.</p>"},{"location":"usage/GENERAL_USAGE/","title":"GENERAL USAGE","text":""},{"location":"usage/GENERAL_USAGE/#usage","title":"Usage","text":""},{"location":"usage/GENERAL_USAGE/#cli","title":"CLI","text":"<p>The cli is self documenting by using <code>--help</code>. The most common use of taskcat is for executing function tests of CloudFormation templates. The command for this is:</p> <pre><code>taskcat test run\n</code></pre> <p>add <code>--help to see the supported flags and arguments</code></p>"},{"location":"usage/GENERAL_USAGE/#python","title":"Python","text":"<p>Taskcat can be imported into Python and used in the testing framework of your choice. <pre><code>from taskcat.testing import CFNTest\ntest = CFNTest.from_file(project_root='./template_dir')\nwith test as stacks:\n    # Calling 'with' or 'test.run()' will deploy the stacks.\n    for stack in stacks:\n        print(f\"Testing {stack.name}\")\n        bucket_name = \"\"\n        for output in stack.outputs:\n            if output.key == \"LogsBucketName\":\n                bucket_name = output.value\n                break\n        assert \"logs\" in bucket_name\n        assert stack.region.name in bucket_name\n        print(f\"Created bucket: {bucket_name}\")\n</code></pre></p> <p>The example used here is very simple, you would most likely leverage other python modules like boto3 to do more advanced testing. The <code>CFNTest</code> object can be passed the same arguments as <code>taskcat test run</code>. See the docs for more details.</p>"},{"location":"usage/GENERAL_USAGE/#config-files","title":"Config files","text":"<p>taskcat has several configuration files which can be used to set behaviors in a flexible way.</p>"},{"location":"usage/GENERAL_USAGE/#global-config","title":"Global config","text":"<p><code>~/.taskcat.yml</code> provides global settings that become defaults for all projects. Please see our schema reference for specific configuration options that are available.</p>"},{"location":"usage/GENERAL_USAGE/#project-config","title":"Project config","text":"<p><code>&lt;PROJECT_ROOT&gt;/.taskcat.yml</code> provides project specific configuration. Please see our schema reference for specific configuration options that are available.</p>"},{"location":"usage/GENERAL_USAGE/#precedence","title":"Precedence","text":"<p>With the exception of the <code>parameters</code> section, more specific config with the same key takes precedence.</p> <p>The rationale behind having parameters function this way is so that values can be overridden at a system level outside of a project, that is likely committed to source control. parameters that define account specific things like VPC details, Key Pairs, or secrets like API keys can be defined per host outside of source control.</p> <p>For example, consider this global config:</p> <p><code>~/.taskcat.yml</code> <pre><code>general:\n  s3_bucket: my-globally-defined-bucket\n  parameters:\n    KeyPair: my-global-ec2-keypair\n</code></pre></p> <p>Given a simple project config:</p> <pre><code>project:\n  name: my-project\n  regions:\n  - us-east-2\ntests:\n  default:\n    template: ./template.yaml\n</code></pre> <p>The effective test configuration would become:</p> <pre><code>tests:\n  default:\n    template: ./template.yaml\n    s3_bucket: my-globally-defined-bucket\n    parameters:\n      KeyPair: my-global-ec2-keypair\n</code></pre> <p>If any item is re-defined in a project it takes precedence over the global value. Anything defined in a test takes precedence over what is defined in the project or global configuration. with the exception of the <code>parameters</code> section which works in reverse. For example, using the same global config as above, given this project config:</p> <pre><code>project:\n  name: my-project\n  regions:\n  - us-east-2\n  s3_bucket: my-project-s3-bucket\ntests:\n  default:\n    template: ./template.yaml\n    parameters:\n      KeyPair: my-test-ec2-keypair\n</code></pre> <p>Would result in this effective test configuration:</p> <pre><code>tests:\n  default:\n    template: ./template.yaml\n    s3_bucket: my-project-s3-bucket\n    parameters:\n      KeyPair: my-global-ec2-keypair\n</code></pre> <p>Notice that <code>s3_bucket</code> took the most specific value and <code>KeyPair</code> the most general.</p>"},{"location":"usage/GENERAL_USAGE/#cli-interface","title":"CLI interface","text":"<p>taskcat adopts a similar cli command structure to <code>git</code> with a <code>taskcat command subcommand --flag</code> style. The cli is also designed to be simplest if run from the root of a project. Let's have a look at equivalent command to run a test:</p> <p>cd into the project root and type test run:</p> <pre><code>cd ./quickstart-aws-vpc\ntaskcat test run\n</code></pre> <p>or run it from anywhere by providing the path to the project root <pre><code>taskcat test run -p ./quickstart-aws-vpc\n</code></pre></p>"},{"location":"usage/GENERAL_USAGE/#configuration-files","title":"Configuration files","text":"<p>The configuration files required for taskcat have changed, to ease migration, if taskcat is run and legacy config files are found, they are converted and written to new file locations. For more information on the new format, see the config file docs.</p>"},{"location":"usage/PARAMETER_OVERRIDES/","title":"PARAMETER OVERRIDES","text":""},{"location":"usage/PARAMETER_OVERRIDES/#parameter-overrides","title":"Parameter overrides","text":"<p>Parameter Overrides were added to the taskcat to solve a couple of common problems. First, many templates share common parameters that are unique to an AWS account, like a KeyPair name or an S3 Bucket, overrides provided a way to store those centrally for all your projects. Second, we didn't want to add sensitive data (usernames, passwords, tokens) to a git repository. The idea was to store sensitive/unique data outside of a git repository, but still execute a test using this data. To that end, any parameter defined in the global config will take precedence over the same parameter in a project-level config.</p>"},{"location":"usage/PSUEDO_PARAMETERS/","title":"Pseudo-Parameters","text":"<p>To increase the flexibility of taskcat, we've built-in support for pseudo-parameters that are dynamically replaced at runtime with actual values. These parameters allow you to create more flexible and reusable CloudFormation templates without hardcoding environment-specific values.</p>"},{"location":"usage/PSUEDO_PARAMETERS/#how-pseudo-parameters-work","title":"How Pseudo-Parameters Work","text":"<p>Pseudo-parameters use the syntax <code>$[parameter_name]</code> and are processed by taskcat before the CloudFormation template is deployed. They are replaced with actual values based on the current test context, AWS environment, or generated data.</p>"},{"location":"usage/PSUEDO_PARAMETERS/#available-pseudo-parameters","title":"Available Pseudo-Parameters","text":""},{"location":"usage/PSUEDO_PARAMETERS/#s3-bucket-parameters","title":"\ud83e\udea3 S3 Bucket Parameters","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_autobucket]</code> <code>taskcat-tag-sample-taskcat-project-5fba6597</code> Creates a unique S3 bucket for the test. The bucket is automatically created and managed by taskcat. <code>$[taskcat_autobucket_prefix]</code> <code>taskcat-tag-sample-taskcat-project</code> Returns the prefix portion of the auto-generated bucket name (without the random suffix)."},{"location":"usage/PSUEDO_PARAMETERS/#availability-zone-parameters","title":"\ud83c\udf0d Availability Zone Parameters","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_genaz_1]</code> <code>\"us-east-1a\"</code> Returns a single available Availability Zone in the current region. <code>$[taskcat_genaz_2]</code> <code>\"us-east-1a,us-east-1b\"</code> Returns two available Availability Zones in the current region, comma-separated. <code>$[taskcat_genaz_3]</code> <code>\"us-east-1a,us-east-1b,us-east-1c\"</code> Returns three available Availability Zones in the current region, comma-separated. <code>$[taskcat_genaz_N]</code> <code>\"us-east-1a,us-east-1b,...\"</code> Returns N available Availability Zones (replace N with desired number). <code>$[taskcat_gensingleaz_1]</code> <code>\"us-east-1a\"</code> Returns a single AZ by index (1-based). Useful for consistent AZ selection. <code>$[taskcat_gensingleaz_2]</code> <code>\"us-east-1b\"</code> Returns the second AZ in the region."},{"location":"usage/PSUEDO_PARAMETERS/#password-generation-parameters","title":"\ud83d\udd10 Password Generation Parameters","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_genpass_8A]</code> <code>tI8zN3iX</code> Generates an 8-character alphanumeric password (letters + numbers). <code>$[taskcat_genpass_12A]</code> <code>vGceIP8EHCmn</code> Generates a 12-character alphanumeric password. <code>$[taskcat_genpass_8S]</code> <code>mA5@cB5!</code> Generates an 8-character password with special characters. <code>$[taskcat_genpass_16S]</code> <code>kL9#nM2$pQ4&amp;rS6*</code> Generates a 16-character password with special characters. <p>Password Types: - A = Alphanumeric (letters + numbers) - S = Special characters (letters + numbers + symbols: <code>!#$&amp;{*:[=,]-_%@+</code>) - Length = Any number from 1-99</p>"},{"location":"usage/PSUEDO_PARAMETERS/#random-data-generation","title":"\ud83c\udfb2 Random Data Generation","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_random-string]</code> <code>yysuawpwubvotiqgwjcu</code> Generates a 20-character random lowercase string. <code>$[taskcat_random-numbers]</code> <code>56188163597280820763</code> Generates a 20-digit random number string. <code>$[taskcat_genuuid]</code> <code>1c2e3483-2c99-45bb-801d-8af68a3b907b</code> Generates a UUID (Universally Unique Identifier)."},{"location":"usage/PSUEDO_PARAMETERS/#context-information-parameters","title":"\ud83d\udccd Context Information Parameters","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_current_region]</code> <code>\"us-east-2\"</code> Returns the AWS region where the current test is being executed. <code>$[taskcat_project_name]</code> <code>\"my-example-project\"</code> Returns the name of the taskcat project being tested. <code>$[taskcat_test_name]</code> <code>\"cluster-with-windows-ad\"</code> Returns the name of the specific test being executed. <code>$[taskcat_git_branch]</code> <code>\"main\"</code> Returns the current Git branch name (requires project to be a Git repository)."},{"location":"usage/PSUEDO_PARAMETERS/#parameter-reference","title":"\ud83d\udd17 Parameter Reference","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_getval_ParameterName]</code> <code>tI8zN3iX</code> Retrieves the value of another parameter. Useful for password confirmation fields."},{"location":"usage/PSUEDO_PARAMETERS/#aws-service-integration","title":"\u2601\ufe0f AWS Service Integration","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_ssm_/path/to/parameter]</code> <code>ami-12345678</code> Retrieves a value from AWS Systems Manager Parameter Store. <code>$[taskcat_secretsmanager_SecretName]</code> <code>{\"username\":\"admin\",\"password\":\"secret\"}</code> Retrieves a secret value from AWS Secrets Manager using secret name or ARN."},{"location":"usage/PSUEDO_PARAMETERS/#legacydeprecated-parameters","title":"\ud83d\udd27 Legacy/Deprecated Parameters","text":"Pseudo-Parameter Example Value Description <code>$[taskcat_getkeypair]</code> <code>cikey</code> Returns a default keypair name. Deprecated - use parameter overrides instead. <code>$[taskcat_getlicensebucket]</code> <code>override_this</code> Placeholder for license bucket. Deprecated - use parameter overrides instead. <code>$[taskcat_getmediabucket]</code> <code>override_this</code> Placeholder for media bucket. Deprecated - use parameter overrides instead."},{"location":"usage/PSUEDO_PARAMETERS/#usage-examples","title":"Usage Examples","text":""},{"location":"usage/PSUEDO_PARAMETERS/#basic-configuration-taskcatyml","title":"Basic Configuration (taskcat.yml)","text":"<pre><code>project:\n  name: my-cloudformation-project\n  regions:\n    - us-east-1\n    - us-west-2\n\ntests:\n  default:\n    template: templates/main.yaml\n    parameters:\n      InstanceType: t3.micro\n      AvailabilityZones: $[taskcat_genaz_2]\n      DatabasePassword: $[taskcat_genpass_16S]\n      ConfirmPassword: $[taskcat_getval_DatabasePassword]\n      S3Bucket: $[taskcat_autobucket]\n      CurrentRegion: $[taskcat_current_region]\n      ProjectName: $[taskcat_project_name]\n      RandomIdentifier: $[taskcat_genuuid]\n</code></pre>"},{"location":"usage/PSUEDO_PARAMETERS/#runtime-transformation","title":"Runtime Transformation","text":"<p>Before (in taskcat.yml): <pre><code>parameters:\n  InstanceType: t3.micro\n  AvailabilityZones: $[taskcat_genaz_2]\n  DatabasePassword: $[taskcat_genpass_16S]\n  ConfirmPassword: $[taskcat_getval_DatabasePassword]\n  S3Bucket: $[taskcat_autobucket]\n  AMIId: $[taskcat_ssm_/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]\n</code></pre></p> <p>After (passed to CloudFormation): <pre><code>parameters:\n  InstanceType: t3.micro\n  AvailabilityZones: \"us-east-1a,us-east-1b\"\n  DatabasePassword: \"kL9#nM2$pQ4&amp;rS6*\"\n  ConfirmPassword: \"kL9#nM2$pQ4&amp;rS6*\"\n  S3Bucket: \"taskcat-my-project-a1b2c3d4\"\n  AMIId: \"ami-0abcdef1234567890\"\n</code></pre></p>"},{"location":"usage/PSUEDO_PARAMETERS/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/PSUEDO_PARAMETERS/#ssm-parameter-store-integration","title":"SSM Parameter Store Integration","text":"<pre><code>parameters:\n  LatestAMI: $[taskcat_ssm_/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2]\n  DatabaseEndpoint: $[taskcat_ssm_/myapp/prod/database/endpoint]\n  APIKey: $[taskcat_ssm_/myapp/prod/api/key]\n</code></pre>"},{"location":"usage/PSUEDO_PARAMETERS/#secrets-manager-integration","title":"Secrets Manager Integration","text":"<pre><code>parameters:\n  DatabaseCredentials: $[taskcat_secretsmanager_prod/database/credentials]\n  APISecret: $[taskcat_secretsmanager_arn:aws:secretsmanager:us-east-1:123456789012:secret:MySecret-AbCdEf]\n</code></pre>"},{"location":"usage/PSUEDO_PARAMETERS/#multi-az-deployment","title":"Multi-AZ Deployment","text":"<pre><code>parameters:\n  PublicSubnetAZs: $[taskcat_genaz_2]      # For public subnets\n  PrivateSubnetAZs: $[taskcat_genaz_2]     # Same AZs for private subnets\n  DatabaseAZ1: $[taskcat_gensingleaz_1]    # Specific AZ for primary DB\n  DatabaseAZ2: $[taskcat_gensingleaz_2]    # Specific AZ for standby DB\n</code></pre>"},{"location":"usage/PSUEDO_PARAMETERS/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Consistent Naming: Choose descriptive parameter names that clearly indicate their purpose.</p> </li> <li> <p>Password Security: Always use <code>$[taskcat_genpass_XS]</code> for production passwords to include special characters.</p> </li> <li> <p>Parameter Reuse: Use <code>$[taskcat_getval_ParameterName]</code> for password confirmation fields to ensure consistency.</p> </li> <li> <p>Region Awareness: Use <code>$[taskcat_current_region]</code> when you need region-specific logic in your templates.</p> </li> <li> <p>AZ Planning: Use <code>$[taskcat_genaz_N]</code> for resources that need multiple AZs, and <code>$[taskcat_gensingleaz_N]</code> for resources that need specific AZ placement.</p> </li> <li> <p>External Dependencies: Use SSM and Secrets Manager pseudo-parameters for values that change between environments or contain sensitive data.</p> </li> </ol>"},{"location":"usage/PSUEDO_PARAMETERS/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/PSUEDO_PARAMETERS/#common-issues","title":"Common Issues","text":"<ul> <li>Git Branch Parameter: <code>$[taskcat_git_branch]</code> requires the project to be in a Git repository</li> <li>AZ Availability: Some regions may not have enough AZs for high numbers (e.g., <code>$[taskcat_genaz_5]</code>)</li> <li>SSM Permissions: Ensure taskcat has permissions to read from Parameter Store and Secrets Manager</li> <li>Parameter Dependencies: When using <code>$[taskcat_getval_X]</code>, ensure the referenced parameter is defined in the same test</li> </ul>"},{"location":"usage/PSUEDO_PARAMETERS/#error-messages","title":"Error Messages","text":"<ul> <li><code>\"Project root is not a git repository\"</code> - Use Git or avoid <code>$[taskcat_git_branch]</code></li> <li><code>\"Not enough availability zones\"</code> - Reduce the number in <code>$[taskcat_genaz_N]</code> or choose a different region</li> <li><code>\"Parameter not found\"</code> - Check SSM parameter paths and permissions</li> </ul>"}]}