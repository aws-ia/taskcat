#!/usr/bin/env python
"""
AWS Region to Partition Mapping Updater

This script automatically updates the AWS region-to-partition mapping used by TaskCat.
It fetches the latest endpoint data from the official boto/botocore repository and
generates a Python module with current region and partition mappings.

The script addresses the lack of a programmatic way to get region-partition mappings
from boto3/botocore (see: https://github.com/boto/boto3/issues/1868).

AWS Partitions:
- aws: Standard AWS regions (most common)
- aws-cn: AWS China regions
- aws-us-gov: AWS GovCloud regions

Usage:
    python update_partition_region_map.py

Output:
    Updates ./taskcat/regions_to_partitions.py with current mappings

The generated file contains:
- REGIONS: Dict mapping region codes to partition names
- PARTITIONS: Dict mapping partition names to lists of regions
"""

import json

import requests

# URL to the official AWS endpoints data from botocore
ENDPOINT_JSON = (
    "https://raw.githubusercontent.com/boto/botocore/master/botocore/"
    "data/endpoints.json"
)

if __name__ == "__main__":
    # Fetch the latest endpoints data from botocore repository
    print("Fetching latest AWS endpoints data...")
    resp = requests.get(ENDPOINT_JSON)
    
    # Check if the request was successful
    if resp.status_code != 200:
        raise Exception(f"Failed to fetch endpoints data: {resp.status_code} {resp.reason}")
    
    # Parse the JSON response
    endpoints = resp.json()
    
    # Initialize dictionaries for partition and region mappings
    partitions = {}  # partition_name -> [list of regions]
    regions = {}     # region_name -> partition_name
    
    # Process each partition in the endpoints data
    for partition_data in endpoints["partitions"]:
        partition_name = partition_data["partition"]
        partition_regions = list(partition_data["regions"])
        
        # Store partition -> regions mapping
        partitions[partition_name] = partition_regions
        
        # Store region -> partition mapping for each region
        for region in partition_data["regions"]:
            regions[region] = partition_name
    
    # Write the mappings to the Python module file
    print(f"Writing mappings for {len(regions)} regions across {len(partitions)} partitions...")
    with open("./taskcat/regions_to_partitions.py", "w") as fh:
        # Write file header comment
        fh.write('"""\n')
        fh.write("AWS Region to Partition Mappings\n\n")
        fh.write("This file is automatically generated by update_partition_region_map.py\n")
        fh.write("Do not edit manually - run the update script instead.\n")
        fh.write('"""\n\n')
        
        # Write the regions dictionary (region -> partition mapping)
        fh.write("# Mapping of AWS region codes to their partition names\n")
        fh.write(f"REGIONS = {json.dumps(regions, indent=4, sort_keys=True)}\n\n")
        
        # Write the partitions dictionary (partition -> regions mapping)
        fh.write("# Mapping of AWS partition names to their region lists\n")
        fh.write(f"PARTITIONS = {json.dumps(partitions, indent=4, sort_keys=True)}\n")
    
    print("Successfully updated region-to-partition mappings!")
